# /home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/src/py/ambench/amdoc.py
# -*- coding: utf-8 -*-
# PyXB bindings for NM:e92452c8d3e28a9e27abfc9994d2007779e7f4c9
# Generated 2022-03-17 20:23:12.625410 by PyXB version 1.2.6 using Python 3.8.5.final.0
# Namespace AbsentNamespace0

from __future__ import unicode_literals
import pyxb
import pyxb.binding
import pyxb.binding.saxer
import io
import pyxb.utils.utility
import pyxb.utils.domutils
import sys
import pyxb.utils.six as _six
# Unique identifier for bindings created at the same time
_GenerationUID = pyxb.utils.utility.UniqueIdentifier('urn:uuid:1160601e-a630-11ec-88d8-9aacbd4a1bd2')

# Version of PyXB used to generate the bindings
_PyXBVersion = '1.2.6'
# Generated bindings are not compatible across PyXB versions
if pyxb.__version__ != _PyXBVersion:
    raise pyxb.PyXBVersionError(_PyXBVersion)

# A holder for module-level binding classes so we can access them from
# inside class definitions where property names may conflict.
_module_typeBindings = pyxb.utils.utility.Object()

# Import bindings for namespaces imported into schema
import pyxb.binding.datatypes

# NOTE: All namespace declarations are reserved within the binding
Namespace = pyxb.namespace.CreateAbsentNamespace()
Namespace.configureCategories(['typeBinding', 'elementBinding'])

def CreateFromDocument (xml_text, default_namespace=None, location_base=None):
    """Parse the given XML and use the document element to create a
    Python instance.

    @param xml_text An XML document.  This should be data (Python 2
    str or Python 3 bytes), or a text (Python 2 unicode or Python 3
    str) in the L{pyxb._InputEncoding} encoding.

    @keyword default_namespace The L{pyxb.Namespace} instance to use as the
    default namespace where there is no default namespace in scope.
    If unspecified or C{None}, the namespace of the module containing
    this function will be used.

    @keyword location_base: An object to be recorded as the base of all
    L{pyxb.utils.utility.Location} instances associated with events and
    objects handled by the parser.  You might pass the URI from which
    the document was obtained.
    """

    if pyxb.XMLStyle_saxer != pyxb._XMLStyle:
        dom = pyxb.utils.domutils.StringToDOM(xml_text)
        return CreateFromDOM(dom.documentElement, default_namespace=default_namespace)
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    saxer = pyxb.binding.saxer.make_parser(fallback_namespace=default_namespace, location_base=location_base)
    handler = saxer.getContentHandler()
    xmld = xml_text
    if isinstance(xmld, _six.text_type):
        xmld = xmld.encode(pyxb._InputEncoding)
    saxer.parse(io.BytesIO(xmld))
    instance = handler.rootObject()
    return instance

def CreateFromDOM (node, default_namespace=None):
    """Create a Python instance from the given DOM node.
    The node tag must correspond to an element declaration in this module.

    @deprecated: Forcing use of DOM interface is unnecessary; use L{CreateFromDocument}."""
    if default_namespace is None:
        default_namespace = Namespace.fallbackNamespace()
    return pyxb.binding.basis.element.AnyCreateFromDOM(node, default_namespace)


# Atomic simple type: BuildProductPurpose
class BuildProductPurpose (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BuildProductPurpose')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 74, 2)
    _Documentation = None
BuildProductPurpose._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=BuildProductPurpose, enum_prefix=None)
BuildProductPurpose.XRD_Residual_Strain = BuildProductPurpose._CF_enumeration.addEnumeration(unicode_value='XRD Residual Strain', tag='XRD_Residual_Strain')
BuildProductPurpose.Neutron_Residual_Strain = BuildProductPurpose._CF_enumeration.addEnumeration(unicode_value='Neutron Residual Strain', tag='Neutron_Residual_Strain')
BuildProductPurpose.Deflection = BuildProductPurpose._CF_enumeration.addEnumeration(unicode_value='Deflection', tag='Deflection')
BuildProductPurpose.XRCT = BuildProductPurpose._CF_enumeration.addEnumeration(unicode_value='XRCT', tag='XRCT')
BuildProductPurpose.APS_Microstructure = BuildProductPurpose._CF_enumeration.addEnumeration(unicode_value='APS Microstructure', tag='APS_Microstructure')
BuildProductPurpose.As_built_Lab_Microstructure = BuildProductPurpose._CF_enumeration.addEnumeration(unicode_value='As-built Lab Microstructure', tag='As_built_Lab_Microstructure')
BuildProductPurpose.Annealed_Lab_Mircrostructure = BuildProductPurpose._CF_enumeration.addEnumeration(unicode_value='Annealed Lab Mircrostructure ', tag='Annealed_Lab_Mircrostructure')
BuildProductPurpose.Confocal_Microscopy = BuildProductPurpose._CF_enumeration.addEnumeration(unicode_value='Confocal Microscopy', tag='Confocal_Microscopy')
BuildProductPurpose.Cross_Section_characterization = BuildProductPurpose._CF_enumeration.addEnumeration(unicode_value='Cross-Section characterization', tag='Cross_Section_characterization')
BuildProductPurpose.Macroscale_Tensile_Tests = BuildProductPurpose._CF_enumeration.addEnumeration(unicode_value='Macroscale Tensile Tests', tag='Macroscale_Tensile_Tests')
BuildProductPurpose.Mini_Tensile_Test = BuildProductPurpose._CF_enumeration.addEnumeration(unicode_value='Mini Tensile Test', tag='Mini_Tensile_Test')
BuildProductPurpose.Meso_Tensile_Test = BuildProductPurpose._CF_enumeration.addEnumeration(unicode_value='Meso Tensile Test', tag='Meso_Tensile_Test')
BuildProductPurpose.Compression_Tests = BuildProductPurpose._CF_enumeration.addEnumeration(unicode_value='Compression Tests', tag='Compression_Tests')
BuildProductPurpose.Serial_Sectioning = BuildProductPurpose._CF_enumeration.addEnumeration(unicode_value='Serial Sectioning', tag='Serial_Sectioning')
BuildProductPurpose.Other = BuildProductPurpose._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
BuildProductPurpose._InitializeFacetMap(BuildProductPurpose._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'BuildProductPurpose', BuildProductPurpose)
_module_typeBindings.BuildProductPurpose = BuildProductPurpose

# Atomic simple type: PartType
class PartType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PartType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 128, 2)
    _Documentation = None
PartType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PartType, enum_prefix=None)
PartType.PART = PartType._CF_enumeration.addEnumeration(unicode_value='PART', tag='PART')
PartType.GUIDEWING = PartType._CF_enumeration.addEnumeration(unicode_value='GUIDEWING', tag='GUIDEWING')
PartType.OTHER = PartType._CF_enumeration.addEnumeration(unicode_value='OTHER', tag='OTHER')
PartType._InitializeFacetMap(PartType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PartType', PartType)
_module_typeBindings.PartType = PartType

# Atomic simple type: [anonymous]
class STD_ANON (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 373, 8)
    _Documentation = None
STD_ANON._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON, enum_prefix=None)
STD_ANON.XRD_Residual_Strain = STD_ANON._CF_enumeration.addEnumeration(unicode_value='XRD Residual Strain', tag='XRD_Residual_Strain')
STD_ANON.Neutron_Residual_Strain = STD_ANON._CF_enumeration.addEnumeration(unicode_value='Neutron Residual Strain', tag='Neutron_Residual_Strain')
STD_ANON.Deflection = STD_ANON._CF_enumeration.addEnumeration(unicode_value='Deflection', tag='Deflection')
STD_ANON.XRCT = STD_ANON._CF_enumeration.addEnumeration(unicode_value='XRCT', tag='XRCT')
STD_ANON.APS_Microstructure = STD_ANON._CF_enumeration.addEnumeration(unicode_value='APS Microstructure', tag='APS_Microstructure')
STD_ANON.As_built_Lab_Microstructure = STD_ANON._CF_enumeration.addEnumeration(unicode_value='As-built Lab Microstructure', tag='As_built_Lab_Microstructure')
STD_ANON.Annealed_Lab_Mircrostructure = STD_ANON._CF_enumeration.addEnumeration(unicode_value='Annealed Lab Mircrostructure ', tag='Annealed_Lab_Mircrostructure')
STD_ANON.Confocal_Microscopy = STD_ANON._CF_enumeration.addEnumeration(unicode_value='Confocal Microscopy', tag='Confocal_Microscopy')
STD_ANON.Cross_Section_characterization = STD_ANON._CF_enumeration.addEnumeration(unicode_value='Cross-Section characterization', tag='Cross_Section_characterization')
STD_ANON.Macroscale_Tensile_Tests = STD_ANON._CF_enumeration.addEnumeration(unicode_value='Macroscale Tensile Tests', tag='Macroscale_Tensile_Tests')
STD_ANON.Mini_Tensile_Test = STD_ANON._CF_enumeration.addEnumeration(unicode_value='Mini Tensile Test', tag='Mini_Tensile_Test')
STD_ANON.Meso_Tensile_Test = STD_ANON._CF_enumeration.addEnumeration(unicode_value='Meso Tensile Test', tag='Meso_Tensile_Test')
STD_ANON.Compression_Tests = STD_ANON._CF_enumeration.addEnumeration(unicode_value='Compression Tests', tag='Compression_Tests')
STD_ANON.Serial_Sectioning = STD_ANON._CF_enumeration.addEnumeration(unicode_value='Serial Sectioning', tag='Serial_Sectioning')
STD_ANON.Other = STD_ANON._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
STD_ANON._InitializeFacetMap(STD_ANON._CF_enumeration)
_module_typeBindings.STD_ANON = STD_ANON

# Atomic simple type: [anonymous]
class STD_ANON_ (pyxb.binding.datatypes.string):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 397, 6)
    _Documentation = None
STD_ANON_._InitializeFacetMap()
_module_typeBindings.STD_ANON_ = STD_ANON_

# Atomic simple type: [anonymous]
class STD_ANON_2 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 413, 8)
    _Documentation = None
STD_ANON_2._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_2, enum_prefix=None)
STD_ANON_2.Conductive = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='Conductive', tag='Conductive')
STD_ANON_2.Non_Conductive = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='Non-Conductive', tag='Non_Conductive')
STD_ANON_2.Epoxy = STD_ANON_2._CF_enumeration.addEnumeration(unicode_value='Epoxy', tag='Epoxy')
STD_ANON_2._InitializeFacetMap(STD_ANON_2._CF_enumeration)
_module_typeBindings.STD_ANON_2 = STD_ANON_2

# Atomic simple type: [anonymous]
class STD_ANON_3 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 470, 8)
    _Documentation = None
STD_ANON_3._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_3, enum_prefix=None)
STD_ANON_3.AMBench2022_01 = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='AMBench2022-01', tag='AMBench2022_01')
STD_ANON_3.AMBench2022_02 = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='AMBench2022-02', tag='AMBench2022_02')
STD_ANON_3.AMBench2022_03 = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='AMBench2022-03', tag='AMBench2022_03')
STD_ANON_3.AMBench2022_04 = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='AMBench2022-04', tag='AMBench2022_04')
STD_ANON_3.AMBench2022_05 = STD_ANON_3._CF_enumeration.addEnumeration(unicode_value='AMBench2022-05', tag='AMBench2022_05')
STD_ANON_3._InitializeFacetMap(STD_ANON_3._CF_enumeration)
_module_typeBindings.STD_ANON_3 = STD_ANON_3

# Atomic simple type: ArtifactType
class ArtifactType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ArtifactType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 130, 2)
    _Documentation = None
ArtifactType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ArtifactType, enum_prefix=None)
ArtifactType.AMBuildPlate = ArtifactType._CF_enumeration.addEnumeration(unicode_value='AMBuildPlate', tag='AMBuildPlate')
ArtifactType.AMBuildPart = ArtifactType._CF_enumeration.addEnumeration(unicode_value='AMBuildPart', tag='AMBuildPart')
ArtifactType.AMBSpecimen = ArtifactType._CF_enumeration.addEnumeration(unicode_value='AMBSpecimen', tag='AMBSpecimen')
ArtifactType.AMPowder = ArtifactType._CF_enumeration.addEnumeration(unicode_value='AMPowder', tag='AMPowder')
ArtifactType.Material = ArtifactType._CF_enumeration.addEnumeration(unicode_value='Material', tag='Material')
ArtifactType._InitializeFacetMap(ArtifactType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ArtifactType', ArtifactType)
_module_typeBindings.ArtifactType = ArtifactType

# Atomic simple type: TemperatureUnit
class TemperatureUnit (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureUnit')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 141, 2)
    _Documentation = None
TemperatureUnit._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TemperatureUnit, enum_prefix=None)
TemperatureUnit.Kelvin = TemperatureUnit._CF_enumeration.addEnumeration(unicode_value='Kelvin', tag='Kelvin')
TemperatureUnit.Celsius = TemperatureUnit._CF_enumeration.addEnumeration(unicode_value='Celsius', tag='Celsius')
TemperatureUnit.Fahrenheit = TemperatureUnit._CF_enumeration.addEnumeration(unicode_value='Fahrenheit', tag='Fahrenheit')
TemperatureUnit._InitializeFacetMap(TemperatureUnit._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TemperatureUnit', TemperatureUnit)
_module_typeBindings.TemperatureUnit = TemperatureUnit

# Atomic simple type: TimeUnit
class TimeUnit (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeUnit')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 148, 2)
    _Documentation = None
TimeUnit._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=TimeUnit, enum_prefix=None)
TimeUnit.years = TimeUnit._CF_enumeration.addEnumeration(unicode_value='years', tag='years')
TimeUnit.days = TimeUnit._CF_enumeration.addEnumeration(unicode_value='days', tag='days')
TimeUnit.hours = TimeUnit._CF_enumeration.addEnumeration(unicode_value='hours', tag='hours')
TimeUnit.minutes = TimeUnit._CF_enumeration.addEnumeration(unicode_value='minutes', tag='minutes')
TimeUnit.seconds = TimeUnit._CF_enumeration.addEnumeration(unicode_value='seconds', tag='seconds')
TimeUnit.milliseconds = TimeUnit._CF_enumeration.addEnumeration(unicode_value='milliseconds', tag='milliseconds')
TimeUnit.microseconds = TimeUnit._CF_enumeration.addEnumeration(unicode_value='microseconds', tag='microseconds')
TimeUnit._InitializeFacetMap(TimeUnit._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'TimeUnit', TimeUnit)
_module_typeBindings.TimeUnit = TimeUnit

# Atomic simple type: LengthUnit
class LengthUnit (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthUnit')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 159, 2)
    _Documentation = None
LengthUnit._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=LengthUnit, enum_prefix=None)
LengthUnit.picometer = LengthUnit._CF_enumeration.addEnumeration(unicode_value='picometer', tag='picometer')
LengthUnit.um = LengthUnit._CF_enumeration.addEnumeration(unicode_value='um', tag='um')
LengthUnit.mm = LengthUnit._CF_enumeration.addEnumeration(unicode_value='mm', tag='mm')
LengthUnit.cm = LengthUnit._CF_enumeration.addEnumeration(unicode_value='cm', tag='cm')
LengthUnit.m = LengthUnit._CF_enumeration.addEnumeration(unicode_value='m', tag='m')
LengthUnit._InitializeFacetMap(LengthUnit._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'LengthUnit', LengthUnit)
_module_typeBindings.LengthUnit = LengthUnit

# Atomic simple type: ConstituentQuantityUnit
class ConstituentQuantityUnit (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConstituentQuantityUnit')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 169, 2)
    _Documentation = None
ConstituentQuantityUnit._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ConstituentQuantityUnit, enum_prefix=None)
ConstituentQuantityUnit.mass_fraction = ConstituentQuantityUnit._CF_enumeration.addEnumeration(unicode_value='mass fraction', tag='mass_fraction')
ConstituentQuantityUnit.mass_percent = ConstituentQuantityUnit._CF_enumeration.addEnumeration(unicode_value='mass percent', tag='mass_percent')
ConstituentQuantityUnit.mole_fraction = ConstituentQuantityUnit._CF_enumeration.addEnumeration(unicode_value='mole fraction', tag='mole_fraction')
ConstituentQuantityUnit.mole_percent = ConstituentQuantityUnit._CF_enumeration.addEnumeration(unicode_value='mole percent', tag='mole_percent')
ConstituentQuantityUnit._InitializeFacetMap(ConstituentQuantityUnit._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ConstituentQuantityUnit', ConstituentQuantityUnit)
_module_typeBindings.ConstituentQuantityUnit = ConstituentQuantityUnit

# Atomic simple type: FlowSpeedUnits
class FlowSpeedUnits (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'FlowSpeedUnits')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 177, 2)
    _Documentation = None
FlowSpeedUnits._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=FlowSpeedUnits, enum_prefix=None)
FlowSpeedUnits.ms = FlowSpeedUnits._CF_enumeration.addEnumeration(unicode_value='m/s', tag='ms')
FlowSpeedUnits.mms = FlowSpeedUnits._CF_enumeration.addEnumeration(unicode_value='mm/s', tag='mms')
FlowSpeedUnits.other = FlowSpeedUnits._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
FlowSpeedUnits._InitializeFacetMap(FlowSpeedUnits._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'FlowSpeedUnits', FlowSpeedUnits)
_module_typeBindings.FlowSpeedUnits = FlowSpeedUnits

# Atomic simple type: RotationAngleUnit
class RotationAngleUnit (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RotationAngleUnit')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 185, 2)
    _Documentation = None
RotationAngleUnit._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=RotationAngleUnit, enum_prefix=None)
RotationAngleUnit.Degrees = RotationAngleUnit._CF_enumeration.addEnumeration(unicode_value='Degrees', tag='Degrees')
RotationAngleUnit._InitializeFacetMap(RotationAngleUnit._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'RotationAngleUnit', RotationAngleUnit)
_module_typeBindings.RotationAngleUnit = RotationAngleUnit

# Atomic simple type: SpaceGroupType
class SpaceGroupType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SpaceGroupType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 192, 2)
    _Documentation = None
SpaceGroupType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=SpaceGroupType, enum_prefix=None)
SpaceGroupType.C2c = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='C2/c', tag='C2c')
SpaceGroupType.C2m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='C2/m', tag='C2m')
SpaceGroupType.Cmca = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Cmca', tag='Cmca')
SpaceGroupType.Cmcm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Cmcm', tag='Cmcm')
SpaceGroupType.Cmmc = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Cmmc', tag='Cmmc')
SpaceGroupType.F_43m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='F-43m', tag='F_43m')
SpaceGroupType.Fd_3m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Fd-3m', tag='Fd_3m')
SpaceGroupType.Fdd2 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Fdd2', tag='Fdd2')
SpaceGroupType.Fddd = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Fddd', tag='Fddd')
SpaceGroupType.Fm_3c = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Fm-3c', tag='Fm_3c')
SpaceGroupType.Fm_3m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Fm-3m', tag='Fm_3m')
SpaceGroupType.I_4 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='I-4', tag='I_4')
SpaceGroupType.I_42m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='I-42m', tag='I_42m')
SpaceGroupType.I_43d = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='I-43d', tag='I_43d')
SpaceGroupType.I_43m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='I-43m', tag='I_43m')
SpaceGroupType.Immm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='I/mmm', tag='Immm')
SpaceGroupType.I213 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='I213', tag='I213')
SpaceGroupType.I4m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='I4/m', tag='I4m')
SpaceGroupType.I4man = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='I4/man', tag='I4man')
SpaceGroupType.I4mcm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='I4/mcm', tag='I4mcm')
SpaceGroupType.I4mmm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='I4/mmm', tag='I4mmm')
SpaceGroupType.I41amd = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='I41/amd', tag='I41amd')
SpaceGroupType.Ia_3 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Ia-3', tag='Ia_3')
SpaceGroupType.Ibam = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Ibam', tag='Ibam')
SpaceGroupType.Im_3 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Im-3', tag='Im_3')
SpaceGroupType.Im_3m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Im-3m', tag='Im_3m')
SpaceGroupType.Imam = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Imam', tag='Imam')
SpaceGroupType.Imma = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Imma', tag='Imma')
SpaceGroupType.Immm_ = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Immm', tag='Immm_')
SpaceGroupType.P_3 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P-3', tag='P_3')
SpaceGroupType.P_3m1 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P-3m1', tag='P_3m1')
SpaceGroupType.P_43m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P-43m', tag='P_43m')
SpaceGroupType.P_62m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P-62m', tag='P_62m')
SpaceGroupType.P_6m2 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P-6m2', tag='P_6m2')
SpaceGroupType.P2c = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P2/c', tag='P2c')
SpaceGroupType.P2m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P2/m', tag='P2m')
SpaceGroupType.P21c = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P21/c', tag='P21c')
SpaceGroupType.P213 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P213', tag='P213')
SpaceGroupType.P3121 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P3121', tag='P3121')
SpaceGroupType.P432 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P4,32', tag='P432')
SpaceGroupType.P4mbm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P4/mbm', tag='P4mbm')
SpaceGroupType.P4mmm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P4/mmm', tag='P4mmm')
SpaceGroupType.P4mnc = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P4/mnc', tag='P4mnc')
SpaceGroupType.P4nbm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P4/nbm', tag='P4nbm')
SpaceGroupType.P4nmm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P4/nmm', tag='P4nmm')
SpaceGroupType.P42m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P42/m', tag='P42m')
SpaceGroupType.P42mmc = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P42/mmc', tag='P42mmc')
SpaceGroupType.P42mnm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P42/mnm', tag='P42mnm')
SpaceGroupType.P42nmc = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P42/nmc', tag='P42nmc')
SpaceGroupType.P42nnm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P42/nnm', tag='P42nnm')
SpaceGroupType.P421m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P421m', tag='P421m')
SpaceGroupType.P6mmc = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P6,/mmc', tag='P6mmc')
SpaceGroupType.P6mc = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P6,mc', tag='P6mc')
SpaceGroupType.P6_3mc = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P6-3mc', tag='P6_3mc')
SpaceGroupType.P6mmm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P6/mmm', tag='P6mmm')
SpaceGroupType.P6222 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P6222', tag='P6222')
SpaceGroupType.P63m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P63/m', tag='P63m')
SpaceGroupType.P63mcm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P63/mcm', tag='P63mcm')
SpaceGroupType.P63mmc = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P63/mmc', tag='P63mmc')
SpaceGroupType.P63mmm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P63/mmm', tag='P63mmm')
SpaceGroupType.P63cm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='P63cm', tag='P63cm')
SpaceGroupType.Pa3 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pa3', tag='Pa3')
SpaceGroupType.Pam1 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pam1', tag='Pam1')
SpaceGroupType.Pbca = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pbca', tag='Pbca')
SpaceGroupType.Pbcm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pbcm', tag='Pbcm')
SpaceGroupType.Pbnm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pbnm', tag='Pbnm')
SpaceGroupType.Pccn = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pccn', tag='Pccn')
SpaceGroupType.Pm_3 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pm-3', tag='Pm_3')
SpaceGroupType.Pm_3m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pm-3m', tag='Pm_3m')
SpaceGroupType.Pm3n = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pm3n', tag='Pm3n')
SpaceGroupType.Pma2 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pma2', tag='Pma2')
SpaceGroupType.Pmcn = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pmcn', tag='Pmcn')
SpaceGroupType.Pmma = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pmma', tag='Pmma')
SpaceGroupType.Pmmn = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pmmn', tag='Pmmn')
SpaceGroupType.Pmnb = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pmnb', tag='Pmnb')
SpaceGroupType.Pn_3m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pn-3m', tag='Pn_3m')
SpaceGroupType.Pnma = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pnma', tag='Pnma')
SpaceGroupType.Pnnm = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='Pnnm', tag='Pnnm')
SpaceGroupType.R_3 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='R-3', tag='R_3')
SpaceGroupType.R_3c = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='R-3c', tag='R_3c')
SpaceGroupType.R_3m = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='R-3m', tag='R_3m')
SpaceGroupType.R32 = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='R32', tag='R32')
SpaceGroupType.l42d = SpaceGroupType._CF_enumeration.addEnumeration(unicode_value='l42d', tag='l42d')
SpaceGroupType._InitializeFacetMap(SpaceGroupType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'SpaceGroupType', SpaceGroupType)
_module_typeBindings.SpaceGroupType = SpaceGroupType

# Atomic simple type: prototypeType
class prototypeType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'prototypeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 280, 2)
    _Documentation = None
prototypeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=prototypeType, enum_prefix=None)
prototypeType.A14C3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='A14C3', tag='A14C3')
prototypeType.AI3Ni = prototypeType._CF_enumeration.addEnumeration(unicode_value='AI3Ni', tag='AI3Ni')
prototypeType.AI3Zr = prototypeType._CF_enumeration.addEnumeration(unicode_value='AI3Zr', tag='AI3Zr')
prototypeType.AI4Ba = prototypeType._CF_enumeration.addEnumeration(unicode_value='AI4Ba', tag='AI4Ba')
prototypeType.AI4U = prototypeType._CF_enumeration.addEnumeration(unicode_value='AI4U', tag='AI4U')
prototypeType.AI6Mn = prototypeType._CF_enumeration.addEnumeration(unicode_value='AI6Mn', tag='AI6Mn')
prototypeType.AICu2Mn_Heusler = prototypeType._CF_enumeration.addEnumeration(unicode_value='AICu2Mn (Heusler)', tag='AICu2Mn_Heusler')
prototypeType.AIFe3C_perovskite = prototypeType._CF_enumeration.addEnumeration(unicode_value='AIFe3C (perovskite)', tag='AIFe3C_perovskite')
prototypeType.Ag2O = prototypeType._CF_enumeration.addEnumeration(unicode_value='Ag2O', tag='Ag2O')
prototypeType.AgAuTe4_sylvanite = prototypeType._CF_enumeration.addEnumeration(unicode_value='AgAuTe4 (sylvanite)', tag='AgAuTe4_sylvanite')
prototypeType.Al2CdS4 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Al2CdS4', tag='Al2CdS4')
prototypeType.Al2Cu = prototypeType._CF_enumeration.addEnumeration(unicode_value='Al2Cu', tag='Al2Cu')
prototypeType.Al2MgO4_spinel = prototypeType._CF_enumeration.addEnumeration(unicode_value='Al2MgO4 (spinel)', tag='Al2MgO4_spinel')
prototypeType.Al3Mg2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Al3Mg2', tag='Al3Mg2')
prototypeType.Al3Ti = prototypeType._CF_enumeration.addEnumeration(unicode_value='Al3Ti', tag='Al3Ti')
prototypeType.Al4C4Si = prototypeType._CF_enumeration.addEnumeration(unicode_value='Al4C4Si', tag='Al4C4Si')
prototypeType.Al7Cu2Fe = prototypeType._CF_enumeration.addEnumeration(unicode_value='Al7Cu2Fe', tag='Al7Cu2Fe')
prototypeType.Al8FeMg3Si6 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Al8FeMg3Si6', tag='Al8FeMg3Si6')
prototypeType.AlB2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='AlB2', tag='AlB2')
prototypeType.AlLi3N2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='AlLi3N2', tag='AlLi3N2')
prototypeType.As2S3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='As2S3', tag='As2S3')
prototypeType.AsMn3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='AsMn3', tag='AsMn3')
prototypeType.AsS_realgar = prototypeType._CF_enumeration.addEnumeration(unicode_value='AsS (realgar)', tag='AsS_realgar')
prototypeType.AuBe5 = prototypeType._CF_enumeration.addEnumeration(unicode_value='AuBe5', tag='AuBe5')
prototypeType.AuCd = prototypeType._CF_enumeration.addEnumeration(unicode_value='AuCd', tag='AuCd')
prototypeType.AuCu = prototypeType._CF_enumeration.addEnumeration(unicode_value='AuCu', tag='AuCu')
prototypeType.AuCu3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='AuCu3', tag='AuCu3')
prototypeType.AuCull = prototypeType._CF_enumeration.addEnumeration(unicode_value='AuCull', tag='AuCull')
prototypeType.AuTe2_calaverite = prototypeType._CF_enumeration.addEnumeration(unicode_value='AuTe2 (calaverite)', tag='AuTe2_calaverite')
prototypeType.AuTe2_krennerite = prototypeType._CF_enumeration.addEnumeration(unicode_value='AuTe2 (krennerite)', tag='AuTe2_krennerite')
prototypeType.B4C = prototypeType._CF_enumeration.addEnumeration(unicode_value='B4C', tag='B4C')
prototypeType.B4Th = prototypeType._CF_enumeration.addEnumeration(unicode_value='B4Th', tag='B4Th')
prototypeType.BN = prototypeType._CF_enumeration.addEnumeration(unicode_value='BN', tag='BN')
prototypeType.BaHg11 = prototypeType._CF_enumeration.addEnumeration(unicode_value='BaHg11', tag='BaHg11')
prototypeType.BaS3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='BaS3', tag='BaS3')
prototypeType.Bi2Te3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Bi2Te3', tag='Bi2Te3')
prototypeType.BiF3_AIFe3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='BiF3, AIFe3', tag='BiF3_AIFe3')
prototypeType.C_graphite = prototypeType._CF_enumeration.addEnumeration(unicode_value='C (graphite)', tag='C_graphite')
prototypeType.Cdiamond = prototypeType._CF_enumeration.addEnumeration(unicode_value='C(diamond)', tag='Cdiamond')
prototypeType.CaB6 = prototypeType._CF_enumeration.addEnumeration(unicode_value='CaB6', tag='CaB6')
prototypeType.CaC2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='CaC2', tag='CaC2')
prototypeType.CaCl2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='CaCl2', tag='CaCl2')
prototypeType.CaCu5 = prototypeType._CF_enumeration.addEnumeration(unicode_value='CaCu5', tag='CaCu5')
prototypeType.CaF2_fluorite = prototypeType._CF_enumeration.addEnumeration(unicode_value='CaF2 (fluorite)', tag='CaF2_fluorite')
prototypeType.CaSi = prototypeType._CF_enumeration.addEnumeration(unicode_value='CaSi', tag='CaSi')
prototypeType.CaSi2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='CaSi2', tag='CaSi2')
prototypeType.CaTiO3_perovskite = prototypeType._CF_enumeration.addEnumeration(unicode_value='CaTiO3 (perovskite)', tag='CaTiO3_perovskite')
prototypeType.CdI2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='CdI2', tag='CdI2')
prototypeType.CdSb = prototypeType._CF_enumeration.addEnumeration(unicode_value='CdSb', tag='CdSb')
prototypeType.Ce2Mg12 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Ce2Mg12', tag='Ce2Mg12')
prototypeType.Ce5Mg41 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Ce5Mg41', tag='Ce5Mg41')
prototypeType.Co2Al5 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Co2Al5', tag='Co2Al5')
prototypeType.Co2Al9 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Co2Al9', tag='Co2Al9')
prototypeType.Co2Si = prototypeType._CF_enumeration.addEnumeration(unicode_value='Co2Si', tag='Co2Si')
prototypeType.Co2Si_NiSiTi_E_phase = prototypeType._CF_enumeration.addEnumeration(unicode_value='Co2Si, NiSiTi (E-phase)', tag='Co2Si_NiSiTi_E_phase')
prototypeType.Co3S4 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Co3S4', tag='Co3S4')
prototypeType.Co5Cr2Mo3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Co5Cr2Mo3', tag='Co5Cr2Mo3')
prototypeType.Co9S8 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Co9S8', tag='Co9S8')
prototypeType.CoAs3_skutterudite = prototypeType._CF_enumeration.addEnumeration(unicode_value='CoAs3 (skutterudite)', tag='CoAs3_skutterudite')
prototypeType.CoSn = prototypeType._CF_enumeration.addEnumeration(unicode_value='CoSn', tag='CoSn')
prototypeType.CoU = prototypeType._CF_enumeration.addEnumeration(unicode_value='CoU', tag='CoU')
prototypeType.Cr23C6 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Cr23C6', tag='Cr23C6')
prototypeType.Cr3C2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Cr3C2', tag='Cr3C2')
prototypeType.Cr3Si_beta_W = prototypeType._CF_enumeration.addEnumeration(unicode_value='Cr3Si (beta-W)', tag='Cr3Si_beta_W')
prototypeType.Cr5Al8 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Cr5Al8', tag='Cr5Al8')
prototypeType.Cr5B3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Cr5B3', tag='Cr5B3')
prototypeType.Cr7C3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Cr7C3', tag='Cr7C3')
prototypeType.CrB = prototypeType._CF_enumeration.addEnumeration(unicode_value='CrB', tag='CrB')
prototypeType.CrSi2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='CrSi2', tag='CrSi2')
prototypeType.CsCI = prototypeType._CF_enumeration.addEnumeration(unicode_value='CsCI', tag='CsCI')
prototypeType.Cu = prototypeType._CF_enumeration.addEnumeration(unicode_value='Cu', tag='Cu')
prototypeType.Cu15Si4 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Cu15Si4', tag='Cu15Si4')
prototypeType.Cu2FeSnS4 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Cu2FeSnS4', tag='Cu2FeSnS4')
prototypeType.Cu2Mg_Laves = prototypeType._CF_enumeration.addEnumeration(unicode_value='Cu2Mg (Laves)', tag='Cu2Mg_Laves')
prototypeType.Cu2Sb = prototypeType._CF_enumeration.addEnumeration(unicode_value='Cu2Sb', tag='Cu2Sb')
prototypeType.Cu2Te = prototypeType._CF_enumeration.addEnumeration(unicode_value='Cu2Te', tag='Cu2Te')
prototypeType.Cu3P = prototypeType._CF_enumeration.addEnumeration(unicode_value='Cu3P', tag='Cu3P')
prototypeType.Cu3VS4_sulvanite = prototypeType._CF_enumeration.addEnumeration(unicode_value='Cu3VS4 (sulvanite)', tag='Cu3VS4_sulvanite')
prototypeType.Cu5Zn8_gamma_brass = prototypeType._CF_enumeration.addEnumeration(unicode_value='Cu5Zn8 (gamma-brass)', tag='Cu5Zn8_gamma_brass')
prototypeType.Cu9Al4_gamma_brass = prototypeType._CF_enumeration.addEnumeration(unicode_value='Cu9Al4 (gamma-brass)', tag='Cu9Al4_gamma_brass')
prototypeType.CuFe2S3_cubanite = prototypeType._CF_enumeration.addEnumeration(unicode_value='CuFe2S3 (cubanite)', tag='CuFe2S3_cubanite')
prototypeType.CuFeS2_chalcopyrite = prototypeType._CF_enumeration.addEnumeration(unicode_value='CuFeS2 (chalcopyrite)', tag='CuFeS2_chalcopyrite')
prototypeType.CuMg2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='CuMg2', tag='CuMg2')
prototypeType.CuO_tenorite = prototypeType._CF_enumeration.addEnumeration(unicode_value='CuO (tenorite)', tag='CuO_tenorite')
prototypeType.CuPt = prototypeType._CF_enumeration.addEnumeration(unicode_value='CuPt', tag='CuPt')
prototypeType.CuPt3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='CuPt3', tag='CuPt3')
prototypeType.CuS_rovelite = prototypeType._CF_enumeration.addEnumeration(unicode_value='CuS (rovelite)', tag='CuS_rovelite')
prototypeType.CuS2Sb_wolfsbergite = prototypeType._CF_enumeration.addEnumeration(unicode_value='CuS2Sb (wolfsbergite)', tag='CuS2Sb_wolfsbergite')
prototypeType.CuTi3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='CuTi3', tag='CuTi3')
prototypeType.Fe2N = prototypeType._CF_enumeration.addEnumeration(unicode_value='Fe2N', tag='Fe2N')
prototypeType.Fe2P = prototypeType._CF_enumeration.addEnumeration(unicode_value='Fe2P', tag='Fe2P')
prototypeType.Fe3C_cementite = prototypeType._CF_enumeration.addEnumeration(unicode_value='Fe3C (cementite)', tag='Fe3C_cementite')
prototypeType.Fe3Th7 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Fe3Th7', tag='Fe3Th7')
prototypeType.Fe3W3C_eta_carbide = prototypeType._CF_enumeration.addEnumeration(unicode_value='Fe3W3C (eta-carbide)', tag='Fe3W3C_eta_carbide')
prototypeType.Fe3Zn10_gamma_brass = prototypeType._CF_enumeration.addEnumeration(unicode_value='Fe3Zn10 (gamma-brass)', tag='Fe3Zn10_gamma_brass')
prototypeType.Fe4N = prototypeType._CF_enumeration.addEnumeration(unicode_value='Fe4N', tag='Fe4N')
prototypeType.Fe7W6_mu_phase = prototypeType._CF_enumeration.addEnumeration(unicode_value='Fe7W6 (mu-phase)', tag='Fe7W6_mu_phase')
prototypeType.Fe8N = prototypeType._CF_enumeration.addEnumeration(unicode_value='Fe8N', tag='Fe8N')
prototypeType.FeAsS = prototypeType._CF_enumeration.addEnumeration(unicode_value='FeAsS', tag='FeAsS')
prototypeType.FeB = prototypeType._CF_enumeration.addEnumeration(unicode_value='FeB', tag='FeB')
prototypeType.FeKS2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='FeKS2', tag='FeKS2')
prototypeType.FeS2_marcasite = prototypeType._CF_enumeration.addEnumeration(unicode_value='FeS2 (marcasite)', tag='FeS2_marcasite')
prototypeType.FeS2_pyrite = prototypeType._CF_enumeration.addEnumeration(unicode_value='FeS2 (pyrite)', tag='FeS2_pyrite')
prototypeType.FeSi = prototypeType._CF_enumeration.addEnumeration(unicode_value='FeSi', tag='FeSi')
prototypeType.Ga2Mg5 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Ga2Mg5', tag='Ga2Mg5')
prototypeType.Ge7Ir3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Ge7Ir3', tag='Ge7Ir3')
prototypeType.GeS = prototypeType._CF_enumeration.addEnumeration(unicode_value='GeS', tag='GeS')
prototypeType.GeS2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='GeS2', tag='GeS2')
prototypeType.HgCl2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='HgCl2', tag='HgCl2')
prototypeType.HgS_cinnabar = prototypeType._CF_enumeration.addEnumeration(unicode_value='HgS (cinnabar)', tag='HgS_cinnabar')
prototypeType.HgSn6_10 = prototypeType._CF_enumeration.addEnumeration(unicode_value='HgSn6-10', tag='HgSn6_10')
prototypeType.I2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='I2', tag='I2')
prototypeType.In = prototypeType._CF_enumeration.addEnumeration(unicode_value='In', tag='In')
prototypeType.InTh = prototypeType._CF_enumeration.addEnumeration(unicode_value='InTh', tag='InTh')
prototypeType.Ir3Si = prototypeType._CF_enumeration.addEnumeration(unicode_value='Ir3Si', tag='Ir3Si')
prototypeType.La2O3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='La2O3', tag='La2O3')
prototypeType.LiZn2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='LiZn2', tag='LiZn2')
prototypeType.Mg = prototypeType._CF_enumeration.addEnumeration(unicode_value='Mg', tag='Mg')
prototypeType.Mg2Ni = prototypeType._CF_enumeration.addEnumeration(unicode_value='Mg2Ni', tag='Mg2Ni')
prototypeType.Mg2Z11 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Mg2Z11', tag='Mg2Z11')
prototypeType.Mg32AlZn49 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Mg32(Al,Zn)49', tag='Mg32AlZn49')
prototypeType.MgAgAs = prototypeType._CF_enumeration.addEnumeration(unicode_value='MgAgAs', tag='MgAgAs')
prototypeType.MgCuAl2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='MgCuAl2', tag='MgCuAl2')
prototypeType.MgNi2_Laves = prototypeType._CF_enumeration.addEnumeration(unicode_value='MgNi2 (Laves)', tag='MgNi2_Laves')
prototypeType.MgZn2_Laves = prototypeType._CF_enumeration.addEnumeration(unicode_value='MgZn2 (Laves)', tag='MgZn2_Laves')
prototypeType.Mn12Th = prototypeType._CF_enumeration.addEnumeration(unicode_value='Mn12Th', tag='Mn12Th')
prototypeType.Mn23Th6_Cu16Mg6Si7_G_phase = prototypeType._CF_enumeration.addEnumeration(unicode_value='Mn23Th6, Cu16Mg6Si7 (G-phase)', tag='Mn23Th6_Cu16Mg6Si7_G_phase')
prototypeType.Mn2O3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Mn2O3', tag='Mn2O3')
prototypeType.Mn3Al9Si = prototypeType._CF_enumeration.addEnumeration(unicode_value='Mn3Al9Si', tag='Mn3Al9Si')
prototypeType.Mn4B = prototypeType._CF_enumeration.addEnumeration(unicode_value='Mn4B', tag='Mn4B')
prototypeType.Mn5Si3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Mn5Si3', tag='Mn5Si3')
prototypeType.MnP = prototypeType._CF_enumeration.addEnumeration(unicode_value='MnP', tag='MnP')
prototypeType.MnU6 = prototypeType._CF_enumeration.addEnumeration(unicode_value='MnU6', tag='MnU6')
prototypeType.Mo2B5 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Mo2B5', tag='Mo2B5')
prototypeType.MoB = prototypeType._CF_enumeration.addEnumeration(unicode_value='MoB', tag='MoB')
prototypeType.MoNi4 = prototypeType._CF_enumeration.addEnumeration(unicode_value='MoNi4', tag='MoNi4')
prototypeType.MoS2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='MoS2', tag='MoS2')
prototypeType.MoSi2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='MoSi2', tag='MoSi2')
prototypeType.Na3As = prototypeType._CF_enumeration.addEnumeration(unicode_value='Na3As', tag='Na3As')
prototypeType.NaCI_rocksalt = prototypeType._CF_enumeration.addEnumeration(unicode_value='NaCI (rocksalt)', tag='NaCI_rocksalt')
prototypeType.NaCrS2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='NaCrS2', tag='NaCrS2')
prototypeType.NaTl = prototypeType._CF_enumeration.addEnumeration(unicode_value='NaTl', tag='NaTl')
prototypeType.NaZn13 = prototypeType._CF_enumeration.addEnumeration(unicode_value='NaZn13', tag='NaZn13')
prototypeType.Ni17Th2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Ni17Th2', tag='Ni17Th2')
prototypeType.Ni2Al3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Ni2Al3', tag='Ni2Al3')
prototypeType.Ni2In = prototypeType._CF_enumeration.addEnumeration(unicode_value='Ni2In', tag='Ni2In')
prototypeType.Ni3P = prototypeType._CF_enumeration.addEnumeration(unicode_value='Ni3P', tag='Ni3P')
prototypeType.Ni3S2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Ni3S2', tag='Ni3S2')
prototypeType.Ni3Sn = prototypeType._CF_enumeration.addEnumeration(unicode_value='Ni3Sn', tag='Ni3Sn')
prototypeType.Ni3Ti = prototypeType._CF_enumeration.addEnumeration(unicode_value='Ni3Ti', tag='Ni3Ti')
prototypeType.NiAs = prototypeType._CF_enumeration.addEnumeration(unicode_value='NiAs', tag='NiAs')
prototypeType.NiS_millerite = prototypeType._CF_enumeration.addEnumeration(unicode_value='NiS (millerite)', tag='NiS_millerite')
prototypeType.NiSbS_ullmanite = prototypeType._CF_enumeration.addEnumeration(unicode_value='NiSbS (ullmanite)', tag='NiSbS_ullmanite')
prototypeType.P_black = prototypeType._CF_enumeration.addEnumeration(unicode_value='P (black)', tag='P_black')
prototypeType.Pb4Pt = prototypeType._CF_enumeration.addEnumeration(unicode_value='Pb4Pt', tag='Pb4Pt')
prototypeType.PbFCl = prototypeType._CF_enumeration.addEnumeration(unicode_value='PbFCl', tag='PbFCl')
prototypeType.PbO = prototypeType._CF_enumeration.addEnumeration(unicode_value='PbO', tag='PbO')
prototypeType.PdS = prototypeType._CF_enumeration.addEnumeration(unicode_value='PdS', tag='PdS')
prototypeType.PdSn2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='PdSn2', tag='PdSn2')
prototypeType.PdSn4 = prototypeType._CF_enumeration.addEnumeration(unicode_value='PdSn4', tag='PdSn4')
prototypeType.Pt2Sn3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Pt2Sn3', tag='Pt2Sn3')
prototypeType.PtS_cooperite = prototypeType._CF_enumeration.addEnumeration(unicode_value='PtS (cooperite)', tag='PtS_cooperite')
prototypeType.Pu2C3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Pu2C3', tag='Pu2C3')
prototypeType.ReO3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='ReO3', tag='ReO3')
prototypeType.Sb2O3_senarmontite = prototypeType._CF_enumeration.addEnumeration(unicode_value='Sb2O3 (senarmontite)', tag='Sb2O3_senarmontite')
prototypeType.Sb2O3_valentinite = prototypeType._CF_enumeration.addEnumeration(unicode_value='Sb2O3 (valentinite)', tag='Sb2O3_valentinite')
prototypeType.Sb2S3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Sb2S3', tag='Sb2S3')
prototypeType.Sb2Tl7 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Sb2Tl7', tag='Sb2Tl7')
prototypeType.Si2U3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Si2U3', tag='Si2U3')
prototypeType.SiO2_beta_cristobalite = prototypeType._CF_enumeration.addEnumeration(unicode_value='SiO2 (beta cristobalite)', tag='SiO2_beta_cristobalite')
prototypeType.SiO2_beta_tridymite = prototypeType._CF_enumeration.addEnumeration(unicode_value='SiO2 (beta tridymite)', tag='SiO2_beta_tridymite')
prototypeType.SiO2_high_quartz = prototypeType._CF_enumeration.addEnumeration(unicode_value='SiO2 (high quartz)', tag='SiO2_high_quartz')
prototypeType.SiS2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='SiS2', tag='SiS2')
prototypeType.SiU3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='SiU3', tag='SiU3')
prototypeType.SnS = prototypeType._CF_enumeration.addEnumeration(unicode_value='SnS', tag='SnS')
prototypeType.Ta3B4 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Ta3B4', tag='Ta3B4')
prototypeType.Th3P4 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Th3P4', tag='Th3P4')
prototypeType.Th7S12 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Th7S12', tag='Th7S12')
prototypeType.ThC2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='ThC2', tag='ThC2')
prototypeType.ThH2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='ThH2', tag='ThH2')
prototypeType.ThSi2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='ThSi2', tag='ThSi2')
prototypeType.TiAs = prototypeType._CF_enumeration.addEnumeration(unicode_value='TiAs', tag='TiAs')
prototypeType.TiB = prototypeType._CF_enumeration.addEnumeration(unicode_value='TiB', tag='TiB')
prototypeType.TiO2_brookite = prototypeType._CF_enumeration.addEnumeration(unicode_value='TiO2 (brookite)', tag='TiO2_brookite')
prototypeType.TiO2_rutile = prototypeType._CF_enumeration.addEnumeration(unicode_value='TiO2 (rutile)', tag='TiO2_rutile')
prototypeType.TiSi2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='TiSi2', tag='TiSi2')
prototypeType.TlSe = prototypeType._CF_enumeration.addEnumeration(unicode_value='TlSe', tag='TlSe')
prototypeType.UB12 = prototypeType._CF_enumeration.addEnumeration(unicode_value='UB12', tag='UB12')
prototypeType.W = prototypeType._CF_enumeration.addEnumeration(unicode_value='W', tag='W')
prototypeType.W2B5 = prototypeType._CF_enumeration.addEnumeration(unicode_value='W2B5', tag='W2B5')
prototypeType.W3Si3 = prototypeType._CF_enumeration.addEnumeration(unicode_value='W3Si3', tag='W3Si3')
prototypeType.WC = prototypeType._CF_enumeration.addEnumeration(unicode_value='WC', tag='WC')
prototypeType.Zn3P2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='Zn3P2', tag='Zn3P2')
prototypeType.ZnS_sphalerite = prototypeType._CF_enumeration.addEnumeration(unicode_value='ZnS (sphalerite)', tag='ZnS_sphalerite')
prototypeType.ZnS_wurtzite = prototypeType._CF_enumeration.addEnumeration(unicode_value='ZnS (wurtzite)', tag='ZnS_wurtzite')
prototypeType.ZrO2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='ZrO2', tag='ZrO2')
prototypeType.ZrSi2 = prototypeType._CF_enumeration.addEnumeration(unicode_value='ZrSi2', tag='ZrSi2')
prototypeType.alpha_Al2O3_corundum = prototypeType._CF_enumeration.addEnumeration(unicode_value='alpha-Al2O3 (corundum)', tag='alpha_Al2O3_corundum')
prototypeType.alpha_As = prototypeType._CF_enumeration.addEnumeration(unicode_value='alpha-As', tag='alpha_As')
prototypeType.alpha_Ga = prototypeType._CF_enumeration.addEnumeration(unicode_value='alpha-Ga', tag='alpha_Ga')
prototypeType.alpha_Hg = prototypeType._CF_enumeration.addEnumeration(unicode_value='alpha-Hg', tag='alpha_Hg')
prototypeType.alpha_La = prototypeType._CF_enumeration.addEnumeration(unicode_value='alpha-La', tag='alpha_La')
prototypeType.alpha_Mn_chi_phase = prototypeType._CF_enumeration.addEnumeration(unicode_value='alpha-Mn (chi-phase)', tag='alpha_Mn_chi_phase')
prototypeType.alpha_Np = prototypeType._CF_enumeration.addEnumeration(unicode_value='alpha-Np', tag='alpha_Np')
prototypeType.alpha_Pa = prototypeType._CF_enumeration.addEnumeration(unicode_value='alpha-Pa', tag='alpha_Pa')
prototypeType.alpha_Po = prototypeType._CF_enumeration.addEnumeration(unicode_value='alpha-Po', tag='alpha_Po')
prototypeType.alpha_S = prototypeType._CF_enumeration.addEnumeration(unicode_value='alpha-S', tag='alpha_S')
prototypeType.alpha_Se = prototypeType._CF_enumeration.addEnumeration(unicode_value='alpha-Se', tag='alpha_Se')
prototypeType.alpha_Sm = prototypeType._CF_enumeration.addEnumeration(unicode_value='alpha-Sm', tag='alpha_Sm')
prototypeType.alpha_U = prototypeType._CF_enumeration.addEnumeration(unicode_value='alpha-U', tag='alpha_U')
prototypeType.beta_Cu3Ti = prototypeType._CF_enumeration.addEnumeration(unicode_value='beta-Cu3Ti', tag='beta_Cu3Ti')
prototypeType.beta_Mn = prototypeType._CF_enumeration.addEnumeration(unicode_value='beta-Mn', tag='beta_Mn')
prototypeType.beta_Np = prototypeType._CF_enumeration.addEnumeration(unicode_value='beta-Np', tag='beta_Np')
prototypeType.beta_Po = prototypeType._CF_enumeration.addEnumeration(unicode_value='beta-Po', tag='beta_Po')
prototypeType.beta_Se = prototypeType._CF_enumeration.addEnumeration(unicode_value='beta-Se', tag='beta_Se')
prototypeType.beta_Sn = prototypeType._CF_enumeration.addEnumeration(unicode_value='beta-Sn', tag='beta_Sn')
prototypeType.beta_U = prototypeType._CF_enumeration.addEnumeration(unicode_value='beta-U', tag='beta_U')
prototypeType.delta_CuTi = prototypeType._CF_enumeration.addEnumeration(unicode_value='delta-CuTi', tag='delta_CuTi')
prototypeType.delta_Ni3Sn4 = prototypeType._CF_enumeration.addEnumeration(unicode_value='delta-Ni3Sn4', tag='delta_Ni3Sn4')
prototypeType.eta_NiSi = prototypeType._CF_enumeration.addEnumeration(unicode_value='eta-NiSi', tag='eta_NiSi')
prototypeType._InitializeFacetMap(prototypeType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'prototypeType', prototypeType)
_module_typeBindings.prototypeType = prototypeType

# Atomic simple type: pearsonSymbolType
class pearsonSymbolType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'pearsonSymbolType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 505, 2)
    _Documentation = None
pearsonSymbolType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=pearsonSymbolType, enum_prefix=None)
pearsonSymbolType.cF112 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cF112', tag='cF112')
pearsonSymbolType.cF116 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cF116', tag='cF116')
pearsonSymbolType.cF12 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cF12', tag='cF12')
pearsonSymbolType.cF16 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cF16', tag='cF16')
pearsonSymbolType.cF1832 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cF1832', tag='cF1832')
pearsonSymbolType.cF24 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cF24', tag='cF24')
pearsonSymbolType.cF32 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cF32', tag='cF32')
pearsonSymbolType.cF4 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cF4', tag='cF4')
pearsonSymbolType.cF52 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cF52', tag='cF52')
pearsonSymbolType.cF56 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cF56', tag='cF56')
pearsonSymbolType.cF68 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cF68', tag='cF68')
pearsonSymbolType.cF8 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cF8', tag='cF8')
pearsonSymbolType.cF80 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cF80', tag='cF80')
pearsonSymbolType.cI16 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cI16', tag='cI16')
pearsonSymbolType.cI162 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cI162', tag='cI162')
pearsonSymbolType.cI2 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cI2', tag='cI2')
pearsonSymbolType.cI28 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cI28', tag='cI28')
pearsonSymbolType.cI32 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cI32', tag='cI32')
pearsonSymbolType.cI40 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cI40', tag='cI40')
pearsonSymbolType.cI52 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cI52', tag='cI52')
pearsonSymbolType.cI54 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cI54', tag='cI54')
pearsonSymbolType.cI58 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cI58', tag='cI58')
pearsonSymbolType.cI76 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cI76', tag='cI76')
pearsonSymbolType.cI80 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cI80', tag='cI80')
pearsonSymbolType.cI96 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cI96', tag='cI96')
pearsonSymbolType.cP1 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cP1', tag='cP1')
pearsonSymbolType.cP12 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cP12', tag='cP12')
pearsonSymbolType.cP2 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cP2', tag='cP2')
pearsonSymbolType.cP20 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cP20', tag='cP20')
pearsonSymbolType.cP36 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cP36', tag='cP36')
pearsonSymbolType.cP39 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cP39', tag='cP39')
pearsonSymbolType.cP4 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cP4', tag='cP4')
pearsonSymbolType.cP5 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cP5', tag='cP5')
pearsonSymbolType.cP52 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cP52', tag='cP52')
pearsonSymbolType.cP6 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cP6', tag='cP6')
pearsonSymbolType.cP7 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cP7', tag='cP7')
pearsonSymbolType.cP8 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='cP8', tag='cP8')
pearsonSymbolType.hP1 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP1', tag='hP1')
pearsonSymbolType.hP10 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP10', tag='hP10')
pearsonSymbolType.hP12 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP12', tag='hP12')
pearsonSymbolType.hP14 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP14', tag='hP14')
pearsonSymbolType.hP16 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP16', tag='hP16')
pearsonSymbolType.hP18 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP18', tag='hP18')
pearsonSymbolType.hP2 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP2', tag='hP2')
pearsonSymbolType.hP20 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP20', tag='hP20')
pearsonSymbolType.hP24 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP24', tag='hP24')
pearsonSymbolType.hP26 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP26', tag='hP26')
pearsonSymbolType.hP28 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP28', tag='hP28')
pearsonSymbolType.hP3 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP3', tag='hP3')
pearsonSymbolType.hP38 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP38', tag='hP38')
pearsonSymbolType.hP4 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP4', tag='hP4')
pearsonSymbolType.hP5 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP5', tag='hP5')
pearsonSymbolType.hP6 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP6', tag='hP6')
pearsonSymbolType.hP8 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP8', tag='hP8')
pearsonSymbolType.hP9 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hP9', tag='hP9')
pearsonSymbolType.hR1 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hR1', tag='hR1')
pearsonSymbolType.hR10 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hR10', tag='hR10')
pearsonSymbolType.hR13 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hR13', tag='hR13')
pearsonSymbolType.hR15 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hR15', tag='hR15')
pearsonSymbolType.hR22 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hR22', tag='hR22')
pearsonSymbolType.hR26 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hR26', tag='hR26')
pearsonSymbolType.hR3 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hR3', tag='hR3')
pearsonSymbolType.hR32 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hR32', tag='hR32')
pearsonSymbolType.hR4 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hR4', tag='hR4')
pearsonSymbolType.hR5 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hR5', tag='hR5')
pearsonSymbolType.hR53 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hR53', tag='hR53')
pearsonSymbolType.hR6 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hR6', tag='hR6')
pearsonSymbolType.hR7 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='hR7', tag='hR7')
pearsonSymbolType.mC12 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='mC12', tag='mC12')
pearsonSymbolType.mC14 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='mC14', tag='mC14')
pearsonSymbolType.mC16 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='mC16', tag='mC16')
pearsonSymbolType.mC6 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='mC6', tag='mC6')
pearsonSymbolType.mC8 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='mC8', tag='mC8')
pearsonSymbolType.mP12 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='mP12', tag='mP12')
pearsonSymbolType.mP20 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='mP20', tag='mP20')
pearsonSymbolType.mP22 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='mP22', tag='mP22')
pearsonSymbolType.mP24 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='mP24', tag='mP24')
pearsonSymbolType.mP32 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='mP32', tag='mP32')
pearsonSymbolType.mP64 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='mP64', tag='mP64')
pearsonSymbolType.oC12 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oC12', tag='oC12')
pearsonSymbolType.oC20 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oC20', tag='oC20')
pearsonSymbolType.oC24 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oC24', tag='oC24')
pearsonSymbolType.oC28 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oC28', tag='oC28')
pearsonSymbolType.oC4 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oC4', tag='oC4')
pearsonSymbolType.oC8 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oC8', tag='oC8')
pearsonSymbolType.oCl6 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oCl6', tag='oCl6')
pearsonSymbolType.oF128 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oF128', tag='oF128')
pearsonSymbolType.oF24 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oF24', tag='oF24')
pearsonSymbolType.oF40 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oF40', tag='oF40')
pearsonSymbolType.oF48 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oF48', tag='oF48')
pearsonSymbolType.oF72 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oF72', tag='oF72')
pearsonSymbolType.oI12 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oI12', tag='oI12')
pearsonSymbolType.oI14 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oI14', tag='oI14')
pearsonSymbolType.oI20 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oI20', tag='oI20')
pearsonSymbolType.oI28 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oI28', tag='oI28')
pearsonSymbolType.oI338 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oI338', tag='oI338')
pearsonSymbolType.oI40 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oI40', tag='oI40')
pearsonSymbolType.oP12 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oP12', tag='oP12')
pearsonSymbolType.oP16 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oP16', tag='oP16')
pearsonSymbolType.oP20 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oP20', tag='oP20')
pearsonSymbolType.oP24 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oP24', tag='oP24')
pearsonSymbolType.oP4 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oP4', tag='oP4')
pearsonSymbolType.oP40 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oP40', tag='oP40')
pearsonSymbolType.oP6 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oP6', tag='oP6')
pearsonSymbolType.oP8 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='oP8', tag='oP8')
pearsonSymbolType.t16 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='t16', tag='t16')
pearsonSymbolType.tI10 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tI10', tag='tI10')
pearsonSymbolType.tI12 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tI12', tag='tI12')
pearsonSymbolType.tI14 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tI14', tag='tI14')
pearsonSymbolType.tI16 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tI16', tag='tI16')
pearsonSymbolType.tI18 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tI18', tag='tI18')
pearsonSymbolType.tI2 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tI2', tag='tI2')
pearsonSymbolType.tI26 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tI26', tag='tI26')
pearsonSymbolType.tI28 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tI28', tag='tI28')
pearsonSymbolType.tI32 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tI32', tag='tI32')
pearsonSymbolType.tI4 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tI4', tag='tI4')
pearsonSymbolType.tI6 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tI6', tag='tI6')
pearsonSymbolType.tI8 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tI8', tag='tI8')
pearsonSymbolType.tI92 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tI92', tag='tI92')
pearsonSymbolType.tP10 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tP10', tag='tP10')
pearsonSymbolType.tP16 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tP16', tag='tP16')
pearsonSymbolType.tP2 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tP2', tag='tP2')
pearsonSymbolType.tP20 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tP20', tag='tP20')
pearsonSymbolType.tP30 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tP30', tag='tP30')
pearsonSymbolType.tP4 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tP4', tag='tP4')
pearsonSymbolType.tP40 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tP40', tag='tP40')
pearsonSymbolType.tP50 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tP50', tag='tP50')
pearsonSymbolType.tP6 = pearsonSymbolType._CF_enumeration.addEnumeration(unicode_value='tP6', tag='tP6')
pearsonSymbolType._InitializeFacetMap(pearsonSymbolType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'pearsonSymbolType', pearsonSymbolType)
_module_typeBindings.pearsonSymbolType = pearsonSymbolType

# Atomic simple type: strukturberichtType
class strukturberichtType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'strukturberichtType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 638, 2)
    _Documentation = None
strukturberichtType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=strukturberichtType, enum_prefix=None)
strukturberichtType.emptyString = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='', tag='emptyString')
strukturberichtType.A1 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A1', tag='A1')
strukturberichtType.A10 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A10', tag='A10')
strukturberichtType.A11 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A11', tag='A11')
strukturberichtType.A12 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A12', tag='A12')
strukturberichtType.A13 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A13', tag='A13')
strukturberichtType.A14 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A14', tag='A14')
strukturberichtType.A15 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A15', tag='A15')
strukturberichtType.A16 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A16', tag='A16')
strukturberichtType.A17 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A17', tag='A17')
strukturberichtType.A2 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A2', tag='A2')
strukturberichtType.A20 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A20', tag='A20')
strukturberichtType.A3 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A3', tag='A3')
strukturberichtType.A3_prime = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A3 prime', tag='A3_prime')
strukturberichtType.A4 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A4', tag='A4')
strukturberichtType.A5 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A5', tag='A5')
strukturberichtType.A6 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A6', tag='A6')
strukturberichtType.A7 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A7', tag='A7')
strukturberichtType.A8 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A8', tag='A8')
strukturberichtType.A9 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='A9', tag='A9')
strukturberichtType.Aa = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Aa', tag='Aa')
strukturberichtType.Ab = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Ab', tag='Ab')
strukturberichtType.Ac = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Ac', tag='Ac')
strukturberichtType.Ad = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Ad', tag='Ad')
strukturberichtType.Af = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Af', tag='Af')
strukturberichtType.Ag = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Ag', tag='Ag')
strukturberichtType.Ah = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Ah', tag='Ah')
strukturberichtType.Ai = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Ai', tag='Ai')
strukturberichtType.Ak = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Ak', tag='Ak')
strukturberichtType.Al = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Al', tag='Al')
strukturberichtType.B1 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B1', tag='B1')
strukturberichtType.B10 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B10', tag='B10')
strukturberichtType.B11 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B11', tag='B11')
strukturberichtType.B13 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B13', tag='B13')
strukturberichtType.B16 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B16', tag='B16')
strukturberichtType.B17 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B17', tag='B17')
strukturberichtType.B18 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B18', tag='B18')
strukturberichtType.B19 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B19', tag='B19')
strukturberichtType.B2 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B2', tag='B2')
strukturberichtType.B20 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B20', tag='B20')
strukturberichtType.B26 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B26', tag='B26')
strukturberichtType.B27 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B27', tag='B27')
strukturberichtType.B29 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B29', tag='B29')
strukturberichtType.B3 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B3', tag='B3')
strukturberichtType.B31 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B31', tag='B31')
strukturberichtType.B32 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B32', tag='B32')
strukturberichtType.B33_Bf = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B33 (=Bf)', tag='B33_Bf')
strukturberichtType.B34 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B34', tag='B34')
strukturberichtType.B35 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B35', tag='B35')
strukturberichtType.B37 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B37', tag='B37')
strukturberichtType.B4 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B4', tag='B4')
strukturberichtType.B81 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B81', tag='B81')
strukturberichtType.B82 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B82', tag='B82')
strukturberichtType.B9 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='B9', tag='B9')
strukturberichtType.Ba = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Ba', tag='Ba')
strukturberichtType.Bb = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Bb', tag='Bb')
strukturberichtType.Bc = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Bc', tag='Bc')
strukturberichtType.Bd = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Bd', tag='Bd')
strukturberichtType.Be = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Be', tag='Be')
strukturberichtType.Bf_B33 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Bf (=B33)', tag='Bf_B33')
strukturberichtType.Bg = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Bg', tag='Bg')
strukturberichtType.Bh = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Bh', tag='Bh')
strukturberichtType.Bj = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Bj', tag='Bj')
strukturberichtType.Bk = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Bk', tag='Bk')
strukturberichtType.Bl = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Bl', tag='Bl')
strukturberichtType.Bm = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Bm', tag='Bm')
strukturberichtType.C1 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C1', tag='C1')
strukturberichtType.C10 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C10', tag='C10')
strukturberichtType.C11a = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C11a', tag='C11a')
strukturberichtType.C11b = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C11b', tag='C11b')
strukturberichtType.C12 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C12', tag='C12')
strukturberichtType.C14 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C14', tag='C14')
strukturberichtType.C15 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C15', tag='C15')
strukturberichtType.C15b = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C15b', tag='C15b')
strukturberichtType.C16 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C16', tag='C16')
strukturberichtType.C18 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C18', tag='C18')
strukturberichtType.C19 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C19', tag='C19')
strukturberichtType.C1b = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C1b', tag='C1b')
strukturberichtType.C2 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C2', tag='C2')
strukturberichtType.C21 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C21', tag='C21')
strukturberichtType.C22 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C22', tag='C22')
strukturberichtType.C23 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C23', tag='C23')
strukturberichtType.C28 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C28', tag='C28')
strukturberichtType.C3 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C3', tag='C3')
strukturberichtType.C32 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C32', tag='C32')
strukturberichtType.C33 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C33', tag='C33')
strukturberichtType.C34 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C34', tag='C34')
strukturberichtType.C35 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C35', tag='C35')
strukturberichtType.C36 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C36', tag='C36')
strukturberichtType.C37 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C37', tag='C37')
strukturberichtType.C38 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C38', tag='C38')
strukturberichtType.C4 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C4', tag='C4')
strukturberichtType.C40 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C40', tag='C40')
strukturberichtType.C42 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C42', tag='C42')
strukturberichtType.C43 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C43', tag='C43')
strukturberichtType.C44 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C44', tag='C44')
strukturberichtType.C46 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C46', tag='C46')
strukturberichtType.C49 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C49', tag='C49')
strukturberichtType.C54 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C54', tag='C54')
strukturberichtType.C6 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C6', tag='C6')
strukturberichtType.C7 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C7', tag='C7')
strukturberichtType.C8 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C8', tag='C8')
strukturberichtType.C9 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='C9', tag='C9')
strukturberichtType.Ca = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Ca', tag='Ca')
strukturberichtType.Cb = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Cb', tag='Cb')
strukturberichtType.Cc = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Cc', tag='Cc')
strukturberichtType.Ce = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Ce', tag='Ce')
strukturberichtType.Cg = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Cg', tag='Cg')
strukturberichtType.Ch = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Ch', tag='Ch')
strukturberichtType.Ck = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Ck', tag='Ck')
strukturberichtType.D011 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D011', tag='D011')
strukturberichtType.D017 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D017', tag='D017')
strukturberichtType.D018 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D018', tag='D018')
strukturberichtType.D019 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D019', tag='D019')
strukturberichtType.D02 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D02', tag='D02')
strukturberichtType.D020 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D020', tag='D020')
strukturberichtType.D021 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D021', tag='D021')
strukturberichtType.D022 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D022', tag='D022')
strukturberichtType.D023 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D023', tag='D023')
strukturberichtType.D024 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D024', tag='D024')
strukturberichtType.D03 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D03', tag='D03')
strukturberichtType.D09 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D09', tag='D09')
strukturberichtType.D0a = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D0a', tag='D0a')
strukturberichtType.D0c = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D0c', tag='D0c')
strukturberichtType.D0c_prime = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D0c prime', tag='D0c_prime')
strukturberichtType.D0d = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D0d', tag='D0d')
strukturberichtType.D0e = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D0e', tag='D0e')
strukturberichtType.D101 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D101', tag='D101')
strukturberichtType.D102 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D102', tag='D102')
strukturberichtType.D13 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D13', tag='D13')
strukturberichtType.D1a = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D1a', tag='D1a')
strukturberichtType.D1b = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D1b', tag='D1b')
strukturberichtType.D1c = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D1c', tag='D1c')
strukturberichtType.D1d = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D1d', tag='D1d')
strukturberichtType.D1e = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D1e', tag='D1e')
strukturberichtType.D1f = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D1f', tag='D1f')
strukturberichtType.D1g = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D1g', tag='D1g')
strukturberichtType.D21 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D21', tag='D21')
strukturberichtType.D23 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D23', tag='D23')
strukturberichtType.D2b = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D2b', tag='D2b')
strukturberichtType.D2c = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D2c', tag='D2c')
strukturberichtType.D2d = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D2d', tag='D2d')
strukturberichtType.D2e = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D2e', tag='D2e')
strukturberichtType.D2f = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D2f', tag='D2f')
strukturberichtType.D2g = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D2g', tag='D2g')
strukturberichtType.D2h = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D2h', tag='D2h')
strukturberichtType.D51 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D51', tag='D51')
strukturberichtType.D510 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D510', tag='D510')
strukturberichtType.D511 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D511', tag='D511')
strukturberichtType.D513 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D513', tag='D513')
strukturberichtType.D52 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D52', tag='D52')
strukturberichtType.D53 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D53', tag='D53')
strukturberichtType.D54 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D54', tag='D54')
strukturberichtType.D58 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D58', tag='D58')
strukturberichtType.D59 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D59', tag='D59')
strukturberichtType.D5a = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D5a', tag='D5a')
strukturberichtType.D5b = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D5b', tag='D5b')
strukturberichtType.D5c = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D5c', tag='D5c')
strukturberichtType.D5e = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D5e', tag='D5e')
strukturberichtType.D5f = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D5f', tag='D5f')
strukturberichtType.D71 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D71', tag='D71')
strukturberichtType.D72 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D72', tag='D72')
strukturberichtType.D73 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D73', tag='D73')
strukturberichtType.D7a = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D7a', tag='D7a')
strukturberichtType.D7b = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D7b', tag='D7b')
strukturberichtType.D81 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D81', tag='D81')
strukturberichtType.D810 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D810', tag='D810')
strukturberichtType.D811 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D811', tag='D811')
strukturberichtType.D82 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D82', tag='D82')
strukturberichtType.D83 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D83', tag='D83')
strukturberichtType.D84 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D84', tag='D84')
strukturberichtType.D85 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D85', tag='D85')
strukturberichtType.D86 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D86', tag='D86')
strukturberichtType.D88 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D88', tag='D88')
strukturberichtType.D89 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D89', tag='D89')
strukturberichtType.D8a = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D8a', tag='D8a')
strukturberichtType.D8b = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D8b', tag='D8b')
strukturberichtType.D8c = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D8c', tag='D8c')
strukturberichtType.D8d = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D8d', tag='D8d')
strukturberichtType.D8e = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D8e', tag='D8e')
strukturberichtType.D8f = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D8f', tag='D8f')
strukturberichtType.D8g = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D8g', tag='D8g')
strukturberichtType.D8h = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D8h', tag='D8h')
strukturberichtType.D8i = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D8i', tag='D8i')
strukturberichtType.D8k = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D8k', tag='D8k')
strukturberichtType.D8l = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D8l', tag='D8l')
strukturberichtType.D8m = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='D8m', tag='D8m')
strukturberichtType.E01 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='E01', tag='E01')
strukturberichtType.E07 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='E07', tag='E07')
strukturberichtType.E1b = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='E1b', tag='E1b')
strukturberichtType.E21 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='E21', tag='E21')
strukturberichtType.E3 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='E3', tag='E3')
strukturberichtType.E93 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='E93', tag='E93')
strukturberichtType.E94 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='E94', tag='E94')
strukturberichtType.E9a = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='E9a', tag='E9a')
strukturberichtType.E9b = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='E9b', tag='E9b')
strukturberichtType.E9c = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='E9c', tag='E9c')
strukturberichtType.E9d = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='E9d', tag='E9d')
strukturberichtType.E9e = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='E9e', tag='E9e')
strukturberichtType.El1 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='El1', tag='El1')
strukturberichtType.Ela = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Ela', tag='Ela')
strukturberichtType.F01 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='F01', tag='F01')
strukturberichtType.F51 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='F51', tag='F51')
strukturberichtType.F56 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='F56', tag='F56')
strukturberichtType.F5a = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='F5a', tag='F5a')
strukturberichtType.H11 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='H11', tag='H11')
strukturberichtType.H24 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='H24', tag='H24')
strukturberichtType.H26 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='H26', tag='H26')
strukturberichtType.L1_prime = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='L1 prime', tag='L1_prime')
strukturberichtType.L10 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='L10', tag='L10')
strukturberichtType.L10M = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='L10(M)', tag='L10M')
strukturberichtType.L11 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='L11', tag='L11')
strukturberichtType.L12_prime = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='L12 prime', tag='L12_prime')
strukturberichtType.L1a = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='L1a', tag='L1a')
strukturberichtType.L21 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='L21', tag='L21')
strukturberichtType.L22 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='L22', tag='L22')
strukturberichtType.L2a = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='L2a', tag='L2a')
strukturberichtType.L2b_prime = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='L2b prime', tag='L2b_prime')
strukturberichtType.L3_prime = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='L3 prime', tag='L3_prime')
strukturberichtType.L60 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='L60', tag='L60')
strukturberichtType.Ll2 = strukturberichtType._CF_enumeration.addEnumeration(unicode_value='Ll2', tag='Ll2')
strukturberichtType._InitializeFacetMap(strukturberichtType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'strukturberichtType', strukturberichtType)
_module_typeBindings.strukturberichtType = strukturberichtType

# Atomic simple type: ChemicalElement
class ChemicalElement (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ChemicalElement')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 864, 2)
    _Documentation = ''
ChemicalElement._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ChemicalElement, enum_prefix=None)
ChemicalElement.Ac = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Ac', tag='Ac')
ChemicalElement.Al = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Al', tag='Al')
ChemicalElement.Ag = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Ag', tag='Ag')
ChemicalElement.Am = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Am', tag='Am')
ChemicalElement.Ar = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Ar', tag='Ar')
ChemicalElement.As = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='As', tag='As')
ChemicalElement.At = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='At', tag='At')
ChemicalElement.Au = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Au', tag='Au')
ChemicalElement.B = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='B', tag='B')
ChemicalElement.Ba = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Ba', tag='Ba')
ChemicalElement.Bh = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Bh', tag='Bh')
ChemicalElement.Bi = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Bi', tag='Bi')
ChemicalElement.Be = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Be', tag='Be')
ChemicalElement.Bk = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Bk', tag='Bk')
ChemicalElement.Br = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Br', tag='Br')
ChemicalElement.C = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='C', tag='C')
ChemicalElement.Ca = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Ca', tag='Ca')
ChemicalElement.Cd = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Cd', tag='Cd')
ChemicalElement.Ce = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Ce', tag='Ce')
ChemicalElement.Cf = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Cf', tag='Cf')
ChemicalElement.Cl = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Cl', tag='Cl')
ChemicalElement.Cm = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Cm', tag='Cm')
ChemicalElement.Co = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Co', tag='Co')
ChemicalElement.Cr = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Cr', tag='Cr')
ChemicalElement.Cs = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Cs', tag='Cs')
ChemicalElement.Cu = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Cu', tag='Cu')
ChemicalElement.Db = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Db', tag='Db')
ChemicalElement.Dy = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Dy', tag='Dy')
ChemicalElement.Er = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Er', tag='Er')
ChemicalElement.Es = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Es', tag='Es')
ChemicalElement.Eu = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Eu', tag='Eu')
ChemicalElement.F = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='F', tag='F')
ChemicalElement.Fe = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Fe', tag='Fe')
ChemicalElement.Fm = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Fm', tag='Fm')
ChemicalElement.Fr = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Fr', tag='Fr')
ChemicalElement.Ga = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Ga', tag='Ga')
ChemicalElement.Gd = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Gd', tag='Gd')
ChemicalElement.Ge = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Ge', tag='Ge')
ChemicalElement.H = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='H', tag='H')
ChemicalElement.He = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='He', tag='He')
ChemicalElement.Hf = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Hf', tag='Hf')
ChemicalElement.Hg = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Hg', tag='Hg')
ChemicalElement.Ho = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Ho', tag='Ho')
ChemicalElement.Hs = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Hs', tag='Hs')
ChemicalElement.I = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='I', tag='I')
ChemicalElement.In = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='In', tag='In')
ChemicalElement.Ir = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Ir', tag='Ir')
ChemicalElement.K = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='K', tag='K')
ChemicalElement.Kr = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Kr', tag='Kr')
ChemicalElement.La = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='La', tag='La')
ChemicalElement.Li = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Li', tag='Li')
ChemicalElement.Lr = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Lr', tag='Lr')
ChemicalElement.Lu = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Lu', tag='Lu')
ChemicalElement.Md = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Md', tag='Md')
ChemicalElement.Mg = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Mg', tag='Mg')
ChemicalElement.Mn = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Mn', tag='Mn')
ChemicalElement.Mo = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Mo', tag='Mo')
ChemicalElement.Mt = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Mt', tag='Mt')
ChemicalElement.N = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='N', tag='N')
ChemicalElement.Na = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Na', tag='Na')
ChemicalElement.Nb = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Nb', tag='Nb')
ChemicalElement.Nd = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Nd', tag='Nd')
ChemicalElement.Ne = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Ne', tag='Ne')
ChemicalElement.Ni = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Ni', tag='Ni')
ChemicalElement.No = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='No', tag='No')
ChemicalElement.Np = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Np', tag='Np')
ChemicalElement.O = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='O', tag='O')
ChemicalElement.Os = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Os', tag='Os')
ChemicalElement.P = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='P', tag='P')
ChemicalElement.Pa = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Pa', tag='Pa')
ChemicalElement.Pb = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Pb', tag='Pb')
ChemicalElement.Pd = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Pd', tag='Pd')
ChemicalElement.Pm = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Pm', tag='Pm')
ChemicalElement.Po = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Po', tag='Po')
ChemicalElement.Pr = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Pr', tag='Pr')
ChemicalElement.Pt = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Pt', tag='Pt')
ChemicalElement.Pu = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Pu', tag='Pu')
ChemicalElement.Ra = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Ra', tag='Ra')
ChemicalElement.Rb = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Rb', tag='Rb')
ChemicalElement.Re = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Re', tag='Re')
ChemicalElement.Rf = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Rf', tag='Rf')
ChemicalElement.Rh = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Rh', tag='Rh')
ChemicalElement.Rn = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Rn', tag='Rn')
ChemicalElement.Ru = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Ru', tag='Ru')
ChemicalElement.S = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='S', tag='S')
ChemicalElement.Sb = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Sb', tag='Sb')
ChemicalElement.Sc = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Sc', tag='Sc')
ChemicalElement.Se = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Se', tag='Se')
ChemicalElement.Sg = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Sg', tag='Sg')
ChemicalElement.Si = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Si', tag='Si')
ChemicalElement.Sm = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Sm', tag='Sm')
ChemicalElement.Sn = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Sn', tag='Sn')
ChemicalElement.Sr = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Sr', tag='Sr')
ChemicalElement.Ta = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Ta', tag='Ta')
ChemicalElement.Tb = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Tb', tag='Tb')
ChemicalElement.Tc = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Tc', tag='Tc')
ChemicalElement.Te = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Te', tag='Te')
ChemicalElement.Th = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Th', tag='Th')
ChemicalElement.Ti = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Ti', tag='Ti')
ChemicalElement.Tl = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Tl', tag='Tl')
ChemicalElement.Tm = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Tm', tag='Tm')
ChemicalElement.U = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='U', tag='U')
ChemicalElement.V = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='V', tag='V')
ChemicalElement.W = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='W', tag='W')
ChemicalElement.Xe = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Xe', tag='Xe')
ChemicalElement.Y = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Y', tag='Y')
ChemicalElement.Yb = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Yb', tag='Yb')
ChemicalElement.Zn = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Zn', tag='Zn')
ChemicalElement.Zr = ChemicalElement._CF_enumeration.addEnumeration(unicode_value='Zr', tag='Zr')
ChemicalElement._InitializeFacetMap(ChemicalElement._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ChemicalElement', ChemicalElement)
_module_typeBindings.ChemicalElement = ChemicalElement

# Atomic simple type: CrystalLatticeType
class CrystalLatticeType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CrystalLatticeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 981, 2)
    _Documentation = None
CrystalLatticeType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=CrystalLatticeType, enum_prefix=None)
CrystalLatticeType.Cubic = CrystalLatticeType._CF_enumeration.addEnumeration(unicode_value='Cubic', tag='Cubic')
CrystalLatticeType.Tetragonal = CrystalLatticeType._CF_enumeration.addEnumeration(unicode_value='Tetragonal', tag='Tetragonal')
CrystalLatticeType.Hexagonal = CrystalLatticeType._CF_enumeration.addEnumeration(unicode_value='Hexagonal', tag='Hexagonal')
CrystalLatticeType.Rhombohedral = CrystalLatticeType._CF_enumeration.addEnumeration(unicode_value='Rhombohedral', tag='Rhombohedral')
CrystalLatticeType.Orthorhombic = CrystalLatticeType._CF_enumeration.addEnumeration(unicode_value='Orthorhombic', tag='Orthorhombic')
CrystalLatticeType.Monoclinic = CrystalLatticeType._CF_enumeration.addEnumeration(unicode_value='Monoclinic', tag='Monoclinic')
CrystalLatticeType.Triclinic = CrystalLatticeType._CF_enumeration.addEnumeration(unicode_value='Triclinic', tag='Triclinic')
CrystalLatticeType._InitializeFacetMap(CrystalLatticeType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'CrystalLatticeType', CrystalLatticeType)
_module_typeBindings.CrystalLatticeType = CrystalLatticeType

# Atomic simple type: magneticStateType
class magneticStateType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'magneticStateType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 993, 2)
    _Documentation = None
magneticStateType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=magneticStateType, enum_prefix=None)
magneticStateType.Non_magnetic = magneticStateType._CF_enumeration.addEnumeration(unicode_value='Non-magnetic', tag='Non_magnetic')
magneticStateType.Paramagnetic = magneticStateType._CF_enumeration.addEnumeration(unicode_value='Paramagnetic', tag='Paramagnetic')
magneticStateType.Ferromagnetic = magneticStateType._CF_enumeration.addEnumeration(unicode_value='Ferromagnetic', tag='Ferromagnetic')
magneticStateType.Antiferromagnetic = magneticStateType._CF_enumeration.addEnumeration(unicode_value='Antiferromagnetic', tag='Antiferromagnetic')
magneticStateType.Complex_magnetism = magneticStateType._CF_enumeration.addEnumeration(unicode_value='Complex magnetism', tag='Complex_magnetism')
magneticStateType._InitializeFacetMap(magneticStateType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'magneticStateType', magneticStateType)
_module_typeBindings.magneticStateType = magneticStateType

# Atomic simple type: AlloyDesignation
class AlloyDesignation (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AlloyDesignation')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1003, 2)
    _Documentation = None
AlloyDesignation._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AlloyDesignation, enum_prefix=None)
AlloyDesignation.IN625 = AlloyDesignation._CF_enumeration.addEnumeration(unicode_value='IN625', tag='IN625')
AlloyDesignation.IN718 = AlloyDesignation._CF_enumeration.addEnumeration(unicode_value='IN718', tag='IN718')
AlloyDesignation.n17_4_PH_N2_atomized = AlloyDesignation._CF_enumeration.addEnumeration(unicode_value='17-4 PH N2 atomized', tag='n17_4_PH_N2_atomized')
AlloyDesignation.n17_4_PH_Ar_atomized = AlloyDesignation._CF_enumeration.addEnumeration(unicode_value='17-4 PH Ar atomized', tag='n17_4_PH_Ar_atomized')
AlloyDesignation.n15_5__N2_atomized = AlloyDesignation._CF_enumeration.addEnumeration(unicode_value='15-5  N2 atomized ', tag='n15_5__N2_atomized')
AlloyDesignation.n15_5_N2_atomized = AlloyDesignation._CF_enumeration.addEnumeration(unicode_value='15-5 N2 atomized', tag='n15_5_N2_atomized')
AlloyDesignation.n316L = AlloyDesignation._CF_enumeration.addEnumeration(unicode_value='316L', tag='n316L')
AlloyDesignation.Ti6_4 = AlloyDesignation._CF_enumeration.addEnumeration(unicode_value='Ti6-4', tag='Ti6_4')
AlloyDesignation.Unknown = AlloyDesignation._CF_enumeration.addEnumeration(unicode_value='Unknown', tag='Unknown')
AlloyDesignation._InitializeFacetMap(AlloyDesignation._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AlloyDesignation', AlloyDesignation)
_module_typeBindings.AlloyDesignation = AlloyDesignation

# Atomic simple type: PowderAtomizationType
class PowderAtomizationType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowderAtomizationType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1017, 2)
    _Documentation = None
PowderAtomizationType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PowderAtomizationType, enum_prefix=None)
PowderAtomizationType.Nitrogen = PowderAtomizationType._CF_enumeration.addEnumeration(unicode_value='Nitrogen', tag='Nitrogen')
PowderAtomizationType.Argon = PowderAtomizationType._CF_enumeration.addEnumeration(unicode_value='Argon', tag='Argon')
PowderAtomizationType.Water = PowderAtomizationType._CF_enumeration.addEnumeration(unicode_value='Water', tag='Water')
PowderAtomizationType.Other = PowderAtomizationType._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
PowderAtomizationType.Unknown = PowderAtomizationType._CF_enumeration.addEnumeration(unicode_value='Unknown', tag='Unknown')
PowderAtomizationType._InitializeFacetMap(PowderAtomizationType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PowderAtomizationType', PowderAtomizationType)
_module_typeBindings.PowderAtomizationType = PowderAtomizationType

# Atomic simple type: AtmosphereType
class AtmosphereType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AtmosphereType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1027, 2)
    _Documentation = None
AtmosphereType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AtmosphereType, enum_prefix=None)
AtmosphereType.air = AtmosphereType._CF_enumeration.addEnumeration(unicode_value='air', tag='air')
AtmosphereType.argon = AtmosphereType._CF_enumeration.addEnumeration(unicode_value='argon', tag='argon')
AtmosphereType.nitrogen = AtmosphereType._CF_enumeration.addEnumeration(unicode_value='nitrogen', tag='nitrogen')
AtmosphereType.hellium = AtmosphereType._CF_enumeration.addEnumeration(unicode_value='hellium', tag='hellium')
AtmosphereType.vacuum = AtmosphereType._CF_enumeration.addEnumeration(unicode_value='vacuum', tag='vacuum')
AtmosphereType.Molten_salt = AtmosphereType._CF_enumeration.addEnumeration(unicode_value='Molten salt', tag='Molten_salt')
AtmosphereType.water = AtmosphereType._CF_enumeration.addEnumeration(unicode_value='water', tag='water')
AtmosphereType.oil = AtmosphereType._CF_enumeration.addEnumeration(unicode_value='oil', tag='oil')
AtmosphereType.mixture = AtmosphereType._CF_enumeration.addEnumeration(unicode_value='mixture', tag='mixture')
AtmosphereType.emptyString = AtmosphereType._CF_enumeration.addEnumeration(unicode_value='', tag='emptyString')
AtmosphereType._InitializeFacetMap(AtmosphereType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AtmosphereType', AtmosphereType)
_module_typeBindings.AtmosphereType = AtmosphereType

# Atomic simple type: ReCoaterType
class ReCoaterType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReCoaterType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1042, 2)
    _Documentation = None
ReCoaterType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReCoaterType, enum_prefix=None)
ReCoaterType.Blade = ReCoaterType._CF_enumeration.addEnumeration(unicode_value='Blade', tag='Blade')
ReCoaterType.Roller = ReCoaterType._CF_enumeration.addEnumeration(unicode_value='Roller', tag='Roller')
ReCoaterType.Wiper = ReCoaterType._CF_enumeration.addEnumeration(unicode_value='Wiper', tag='Wiper')
ReCoaterType.Other = ReCoaterType._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
ReCoaterType._InitializeFacetMap(ReCoaterType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReCoaterType', ReCoaterType)
_module_typeBindings.ReCoaterType = ReCoaterType

# Atomic simple type: ReCoaterMaterialType
class ReCoaterMaterialType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReCoaterMaterialType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1051, 2)
    _Documentation = None
ReCoaterMaterialType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ReCoaterMaterialType, enum_prefix=None)
ReCoaterMaterialType.Tool_Steel = ReCoaterMaterialType._CF_enumeration.addEnumeration(unicode_value='Tool Steel', tag='Tool_Steel')
ReCoaterMaterialType.Ceramic = ReCoaterMaterialType._CF_enumeration.addEnumeration(unicode_value='Ceramic', tag='Ceramic')
ReCoaterMaterialType.Rubber = ReCoaterMaterialType._CF_enumeration.addEnumeration(unicode_value='Rubber', tag='Rubber')
ReCoaterMaterialType.Other = ReCoaterMaterialType._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
ReCoaterMaterialType._InitializeFacetMap(ReCoaterMaterialType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ReCoaterMaterialType', ReCoaterMaterialType)
_module_typeBindings.ReCoaterMaterialType = ReCoaterMaterialType

# Atomic simple type: [anonymous]
class STD_ANON_4 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1075, 8)
    _Documentation = None
STD_ANON_4._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_4, enum_prefix=None)
STD_ANON_4.ppm = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='ppm', tag='ppm')
STD_ANON_4.emptyString = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='%', tag='emptyString')
STD_ANON_4.other = STD_ANON_4._CF_enumeration.addEnumeration(unicode_value='other', tag='other')
STD_ANON_4._InitializeFacetMap(STD_ANON_4._CF_enumeration)
_module_typeBindings.STD_ANON_4 = STD_ANON_4

# Atomic simple type: [anonymous]
class STD_ANON_5 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1088, 8)
    _Documentation = None
STD_ANON_5._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_5, enum_prefix=None)
STD_ANON_5.Laminar = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Laminar', tag='Laminar')
STD_ANON_5.Static = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Static', tag='Static')
STD_ANON_5.Mixed = STD_ANON_5._CF_enumeration.addEnumeration(unicode_value='Mixed', tag='Mixed')
STD_ANON_5._InitializeFacetMap(STD_ANON_5._CF_enumeration)
_module_typeBindings.STD_ANON_5 = STD_ANON_5

# Atomic simple type: PowderUsageType
class PowderUsageType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowderUsageType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1101, 2)
    _Documentation = None
PowderUsageType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PowderUsageType, enum_prefix=None)
PowderUsageType.Recycle = PowderUsageType._CF_enumeration.addEnumeration(unicode_value='Recycle', tag='Recycle')
PowderUsageType.Virgin = PowderUsageType._CF_enumeration.addEnumeration(unicode_value='Virgin', tag='Virgin')
PowderUsageType._InitializeFacetMap(PowderUsageType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PowderUsageType', PowderUsageType)
_module_typeBindings.PowderUsageType = PowderUsageType

# Atomic simple type: ScanType
class ScanType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ScanType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1122, 2)
    _Documentation = None
ScanType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=ScanType, enum_prefix=None)
ScanType.Stripe = ScanType._CF_enumeration.addEnumeration(unicode_value='Stripe', tag='Stripe')
ScanType.Filled = ScanType._CF_enumeration.addEnumeration(unicode_value='Filled', tag='Filled')
ScanType.Checkerboard = ScanType._CF_enumeration.addEnumeration(unicode_value='Checkerboard', tag='Checkerboard')
ScanType.Concentric = ScanType._CF_enumeration.addEnumeration(unicode_value=' Concentric', tag='Concentric')
ScanType.Custom = ScanType._CF_enumeration.addEnumeration(unicode_value='Custom', tag='Custom')
ScanType._InitializeFacetMap(ScanType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'ScanType', ScanType)
_module_typeBindings.ScanType = ScanType

# Atomic simple type: NominalLaserSpotSize_MeasureDefinitionType
class NominalLaserSpotSize_MeasureDefinitionType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'NominalLaserSpotSize_MeasureDefinitionType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1131, 2)
    _Documentation = None
NominalLaserSpotSize_MeasureDefinitionType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=NominalLaserSpotSize_MeasureDefinitionType, enum_prefix=None)
NominalLaserSpotSize_MeasureDefinitionType.D4sigma = NominalLaserSpotSize_MeasureDefinitionType._CF_enumeration.addEnumeration(unicode_value='D4sigma', tag='D4sigma')
NominalLaserSpotSize_MeasureDefinitionType.n1e2 = NominalLaserSpotSize_MeasureDefinitionType._CF_enumeration.addEnumeration(unicode_value='1/e^2', tag='n1e2')
NominalLaserSpotSize_MeasureDefinitionType._InitializeFacetMap(NominalLaserSpotSize_MeasureDefinitionType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'NominalLaserSpotSize_MeasureDefinitionType', NominalLaserSpotSize_MeasureDefinitionType)
_module_typeBindings.NominalLaserSpotSize_MeasureDefinitionType = NominalLaserSpotSize_MeasureDefinitionType

# Atomic simple type: AnnealingType
class AnnealingType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AnnealingType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1137, 2)
    _Documentation = None
AnnealingType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=AnnealingType, enum_prefix=None)
AnnealingType.Homogenization = AnnealingType._CF_enumeration.addEnumeration(unicode_value='Homogenization', tag='Homogenization')
AnnealingType.Solutionization = AnnealingType._CF_enumeration.addEnumeration(unicode_value='Solutionization', tag='Solutionization')
AnnealingType.Annealing = AnnealingType._CF_enumeration.addEnumeration(unicode_value='Annealing', tag='Annealing')
AnnealingType.Aging = AnnealingType._CF_enumeration.addEnumeration(unicode_value='Aging', tag='Aging')
AnnealingType.Recrystallization = AnnealingType._CF_enumeration.addEnumeration(unicode_value='Recrystallization', tag='Recrystallization')
AnnealingType.Tempering = AnnealingType._CF_enumeration.addEnumeration(unicode_value='Tempering', tag='Tempering')
AnnealingType.Normalizing = AnnealingType._CF_enumeration.addEnumeration(unicode_value='Normalizing', tag='Normalizing')
AnnealingType.Stress_Relief_Annealing = AnnealingType._CF_enumeration.addEnumeration(unicode_value='Stress-Relief Annealing', tag='Stress_Relief_Annealing')
AnnealingType.Other = AnnealingType._CF_enumeration.addEnumeration(unicode_value='Other', tag='Other')
AnnealingType.None_ = AnnealingType._CF_enumeration.addEnumeration(unicode_value='None', tag='None_')
AnnealingType._InitializeFacetMap(AnnealingType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'AnnealingType', AnnealingType)
_module_typeBindings.AnnealingType = AnnealingType

# Atomic simple type: quenchingType
class quenchingType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'quenchingType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1151, 2)
    _Documentation = None
quenchingType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=quenchingType, enum_prefix=None)
quenchingType.emptyString = quenchingType._CF_enumeration.addEnumeration(unicode_value='', tag='emptyString')
quenchingType.Ice_Quenching = quenchingType._CF_enumeration.addEnumeration(unicode_value='Ice Quenching', tag='Ice_Quenching')
quenchingType.Water_Quenching = quenchingType._CF_enumeration.addEnumeration(unicode_value='Water Quenching', tag='Water_Quenching')
quenchingType.Air_Cooling = quenchingType._CF_enumeration.addEnumeration(unicode_value='Air Cooling', tag='Air_Cooling')
quenchingType.Gas_Cooling = quenchingType._CF_enumeration.addEnumeration(unicode_value='Gas Cooling', tag='Gas_Cooling')
quenchingType.Brine_Quenching = quenchingType._CF_enumeration.addEnumeration(unicode_value='Brine Quenching', tag='Brine_Quenching')
quenchingType.Lqiuid_Nitrogen_Quenching = quenchingType._CF_enumeration.addEnumeration(unicode_value='Lqiuid Nitrogen Quenching', tag='Lqiuid_Nitrogen_Quenching')
quenchingType.Furnace_Cooling = quenchingType._CF_enumeration.addEnumeration(unicode_value='Furnace Cooling', tag='Furnace_Cooling')
quenchingType.Oil_Quenching = quenchingType._CF_enumeration.addEnumeration(unicode_value='Oil Quenching', tag='Oil_Quenching')
quenchingType._InitializeFacetMap(quenchingType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'quenchingType', quenchingType)
_module_typeBindings.quenchingType = quenchingType

# Atomic simple type: [anonymous]
class STD_ANON_6 (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1228, 8)
    _Documentation = None
STD_ANON_6._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=STD_ANON_6, enum_prefix=None)
STD_ANON_6.amount = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='amount', tag='amount')
STD_ANON_6.fraction = STD_ANON_6._CF_enumeration.addEnumeration(unicode_value='fraction', tag='fraction')
STD_ANON_6._InitializeFacetMap(STD_ANON_6._CF_enumeration)
_module_typeBindings.STD_ANON_6 = STD_ANON_6

# Atomic simple type: PhaseFractiontype
class PhaseFractiontype (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PhaseFractiontype')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1238, 2)
    _Documentation = None
PhaseFractiontype._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=PhaseFractiontype, enum_prefix=None)
PhaseFractiontype.Mole_Fraction = PhaseFractiontype._CF_enumeration.addEnumeration(unicode_value='Mole Fraction', tag='Mole_Fraction')
PhaseFractiontype.Volume_Fraction = PhaseFractiontype._CF_enumeration.addEnumeration(unicode_value='Volume Fraction', tag='Volume_Fraction')
PhaseFractiontype._InitializeFacetMap(PhaseFractiontype._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'PhaseFractiontype', PhaseFractiontype)
_module_typeBindings.PhaseFractiontype = PhaseFractiontype

# Atomic simple type: DigitalArtifactType
class DigitalArtifactType (pyxb.binding.datatypes.string, pyxb.binding.basis.enumeration_mixin):

    """An atomic simple type."""

    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DigitalArtifactType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1284, 2)
    _Documentation = None
DigitalArtifactType._CF_enumeration = pyxb.binding.facets.CF_enumeration(value_datatype=DigitalArtifactType, enum_prefix=None)
DigitalArtifactType.file = DigitalArtifactType._CF_enumeration.addEnumeration(unicode_value='file', tag='file')
DigitalArtifactType.folder = DigitalArtifactType._CF_enumeration.addEnumeration(unicode_value='folder', tag='folder')
DigitalArtifactType.database = DigitalArtifactType._CF_enumeration.addEnumeration(unicode_value='database', tag='database')
DigitalArtifactType._InitializeFacetMap(DigitalArtifactType._CF_enumeration)
Namespace.addCategoryObject('typeBinding', 'DigitalArtifactType', DigitalArtifactType)
_module_typeBindings.DigitalArtifactType = DigitalArtifactType

# Complex type DesignDiagramRef with content type ELEMENT_ONLY
class DesignDiagramRef (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DesignDiagramRef with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DesignDiagramRef')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 94, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element designDiagram uses Python identifier designDiagram
    __designDiagram = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'designDiagram'), 'designDiagram', '__AbsentNamespace0_DesignDiagramRef_designDiagram', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 96, 6), )

    
    designDiagram = property(__designDiagram.value, __designDiagram.set, None, '')

    
    # Element label uses Python identifier label
    __label = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'label'), 'label', '__AbsentNamespace0_DesignDiagramRef_label', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 103, 6), )

    
    label = property(__label.value, __label.set, None, None)

    _ElementMap.update({
        __designDiagram.name() : __designDiagram,
        __label.name() : __label
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DesignDiagramRef = DesignDiagramRef
Namespace.addCategoryObject('typeBinding', 'DesignDiagramRef', DesignDiagramRef)


# Complex type PartDefinition with content type ELEMENT_ONLY
class PartDefinition (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PartDefinition with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PartDefinition')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 121, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__AbsentNamespace0_PartDefinition_name', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 123, 6), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element partType uses Python identifier partType
    __partType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'partType'), 'partType', '__AbsentNamespace0_PartDefinition_partType', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 124, 6), )

    
    partType = property(__partType.value, __partType.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __partType.name() : __partType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PartDefinition = PartDefinition
Namespace.addCategoryObject('typeBinding', 'PartDefinition', PartDefinition)


# Complex type ProcessingStep with content type ELEMENT_ONLY
class ProcessingStep (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ProcessingStep with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProcessingStep')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 229, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element id uses Python identifier id
    __id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__AbsentNamespace0_ProcessingStep_id', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 231, 6), )

    
    id = property(__id.value, __id.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__AbsentNamespace0_ProcessingStep_description', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 232, 6), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element processingIllustration uses Python identifier processingIllustration
    __processingIllustration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'processingIllustration'), 'processingIllustration', '__AbsentNamespace0_ProcessingStep_processingIllustration', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 233, 6), )

    
    processingIllustration = property(__processingIllustration.value, __processingIllustration.set, None, None)

    
    # Element completeDate uses Python identifier completeDate
    __completeDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'completeDate'), 'completeDate', '__AbsentNamespace0_ProcessingStep_completeDate', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 234, 6), )

    
    completeDate = property(__completeDate.value, __completeDate.set, None, None)

    
    # Element primaryContact uses Python identifier primaryContact
    __primaryContact = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'primaryContact'), 'primaryContact', '__AbsentNamespace0_ProcessingStep_primaryContact', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 235, 6), )

    
    primaryContact = property(__primaryContact.value, __primaryContact.set, None, None)

    
    # Element resultingCondition uses Python identifier resultingCondition
    __resultingCondition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'resultingCondition'), 'resultingCondition', '__AbsentNamespace0_ProcessingStep_resultingCondition', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 236, 6), )

    
    resultingCondition = property(__resultingCondition.value, __resultingCondition.set, None, None)

    _ElementMap.update({
        __id.name() : __id,
        __description.name() : __description,
        __processingIllustration.name() : __processingIllustration,
        __completeDate.name() : __completeDate,
        __primaryContact.name() : __primaryContact,
        __resultingCondition.name() : __resultingCondition
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ProcessingStep = ProcessingStep
Namespace.addCategoryObject('typeBinding', 'ProcessingStep', ProcessingStep)


# Complex type ProcessingSteps with content type ELEMENT_ONLY
class ProcessingSteps (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ProcessingSteps with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ProcessingSteps')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 240, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ProcessingStep uses Python identifier ProcessingStep
    __ProcessingStep = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ProcessingStep'), 'ProcessingStep', '__AbsentNamespace0_ProcessingSteps_ProcessingStep', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 242, 6), )

    
    ProcessingStep = property(__ProcessingStep.value, __ProcessingStep.set, None, None)

    _ElementMap.update({
        __ProcessingStep.name() : __ProcessingStep
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ProcessingSteps = ProcessingSteps
Namespace.addCategoryObject('typeBinding', 'ProcessingSteps', ProcessingSteps)


# Complex type AM-Process with content type ELEMENT_ONLY
class AM_Process (pyxb.binding.basis.complexTypeDefinition):
    """Complex type AM-Process with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AM-Process')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 252, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LaserPowderBedFusion uses Python identifier LaserPowderBedFusion
    __LaserPowderBedFusion = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LaserPowderBedFusion'), 'LaserPowderBedFusion', '__AbsentNamespace0_AM_Process_LaserPowderBedFusion', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 254, 6), )

    
    LaserPowderBedFusion = property(__LaserPowderBedFusion.value, __LaserPowderBedFusion.set, None, None)

    _ElementMap.update({
        __LaserPowderBedFusion.name() : __LaserPowderBedFusion
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AM_Process = AM_Process
Namespace.addCategoryObject('typeBinding', 'AM-Process', AM_Process)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 255, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PowderBedFusion-instrument uses Python identifier PowderBedFusion_instrument
    __PowderBedFusion_instrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PowderBedFusion-instrument'), 'PowderBedFusion_instrument', '__AbsentNamespace0_CTD_ANON_PowderBedFusion_instrument', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 257, 12), )

    
    PowderBedFusion_instrument = property(__PowderBedFusion_instrument.value, __PowderBedFusion_instrument.set, None, None)

    
    # Element BuildEnviroment uses Python identifier BuildEnviroment
    __BuildEnviroment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BuildEnviroment'), 'BuildEnviroment', '__AbsentNamespace0_CTD_ANON_BuildEnviroment', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 258, 12), )

    
    BuildEnviroment = property(__BuildEnviroment.value, __BuildEnviroment.set, None, None)

    
    # Element BuildParameters uses Python identifier BuildParameters
    __BuildParameters = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BuildParameters'), 'BuildParameters', '__AbsentNamespace0_CTD_ANON_BuildParameters', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 259, 12), )

    
    BuildParameters = property(__BuildParameters.value, __BuildParameters.set, None, None)

    
    # Element OtherProcessingFiles uses Python identifier OtherProcessingFiles
    __OtherProcessingFiles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OtherProcessingFiles'), 'OtherProcessingFiles', '__AbsentNamespace0_CTD_ANON_OtherProcessingFiles', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 260, 12), )

    
    OtherProcessingFiles = property(__OtherProcessingFiles.value, __OtherProcessingFiles.set, None, None)

    _ElementMap.update({
        __PowderBedFusion_instrument.name() : __PowderBedFusion_instrument,
        __BuildEnviroment.name() : __BuildEnviroment,
        __BuildParameters.name() : __BuildParameters,
        __OtherProcessingFiles.name() : __OtherProcessingFiles
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON = CTD_ANON


# Complex type BuildEnvironmentType with content type ELEMENT_ONLY
class BuildEnvironmentType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type BuildEnvironmentType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BuildEnvironmentType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 267, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element BuildAtmosphere uses Python identifier BuildAtmosphere
    __BuildAtmosphere = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BuildAtmosphere'), 'BuildAtmosphere', '__AbsentNamespace0_BuildEnvironmentType_BuildAtmosphere', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 269, 6), )

    
    BuildAtmosphere = property(__BuildAtmosphere.value, __BuildAtmosphere.set, None, None)

    
    # Element OxygenContent uses Python identifier OxygenContent
    __OxygenContent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'OxygenContent'), 'OxygenContent', '__AbsentNamespace0_BuildEnvironmentType_OxygenContent', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 270, 6), )

    
    OxygenContent = property(__OxygenContent.value, __OxygenContent.set, None, None)

    
    # Element GasFlow uses Python identifier GasFlow
    __GasFlow = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'GasFlow'), 'GasFlow', '__AbsentNamespace0_BuildEnvironmentType_GasFlow', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 271, 6), )

    
    GasFlow = property(__GasFlow.value, __GasFlow.set, None, None)

    
    # Element ReCoating uses Python identifier ReCoating
    __ReCoating = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReCoating'), 'ReCoating', '__AbsentNamespace0_BuildEnvironmentType_ReCoating', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 272, 6), )

    
    ReCoating = property(__ReCoating.value, __ReCoating.set, None, None)

    
    # Element BuildEnvironmentNotes uses Python identifier BuildEnvironmentNotes
    __BuildEnvironmentNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BuildEnvironmentNotes'), 'BuildEnvironmentNotes', '__AbsentNamespace0_BuildEnvironmentType_BuildEnvironmentNotes', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 273, 6), )

    
    BuildEnvironmentNotes = property(__BuildEnvironmentNotes.value, __BuildEnvironmentNotes.set, None, None)

    _ElementMap.update({
        __BuildAtmosphere.name() : __BuildAtmosphere,
        __OxygenContent.name() : __OxygenContent,
        __GasFlow.name() : __GasFlow,
        __ReCoating.name() : __ReCoating,
        __BuildEnvironmentNotes.name() : __BuildEnvironmentNotes
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BuildEnvironmentType = BuildEnvironmentType
Namespace.addCategoryObject('typeBinding', 'BuildEnvironmentType', BuildEnvironmentType)


# Complex type ReCoatingType with content type ELEMENT_ONLY
class ReCoatingType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ReCoatingType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ReCoatingType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 277, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ReCoaterType uses Python identifier ReCoaterType
    __ReCoaterType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReCoaterType'), 'ReCoaterType', '__AbsentNamespace0_ReCoatingType_ReCoaterType', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 279, 6), )

    
    ReCoaterType = property(__ReCoaterType.value, __ReCoaterType.set, None, None)

    
    # Element ReCoaterMaterial uses Python identifier ReCoaterMaterial
    __ReCoaterMaterial = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ReCoaterMaterial'), 'ReCoaterMaterial', '__AbsentNamespace0_ReCoatingType_ReCoaterMaterial', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 280, 6), )

    
    ReCoaterMaterial = property(__ReCoaterMaterial.value, __ReCoaterMaterial.set, None, None)

    _ElementMap.update({
        __ReCoaterType.name() : __ReCoaterType,
        __ReCoaterMaterial.name() : __ReCoaterMaterial
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ReCoatingType = ReCoatingType
Namespace.addCategoryObject('typeBinding', 'ReCoatingType', ReCoatingType)


# Complex type BuildParametersType with content type ELEMENT_ONLY
class BuildParametersType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type BuildParametersType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BuildParametersType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 283, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Laser uses Python identifier Laser
    __Laser = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Laser'), 'Laser', '__AbsentNamespace0_BuildParametersType_Laser', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 285, 6), )

    
    Laser = property(__Laser.value, __Laser.set, None, None)

    
    # Element SolidLayers uses Python identifier SolidLayers
    __SolidLayers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SolidLayers'), 'SolidLayers', '__AbsentNamespace0_BuildParametersType_SolidLayers', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 286, 6), )

    
    SolidLayers = property(__SolidLayers.value, __SolidLayers.set, None, None)

    
    # Element ScanGeometry uses Python identifier ScanGeometry
    __ScanGeometry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ScanGeometry'), 'ScanGeometry', '__AbsentNamespace0_BuildParametersType_ScanGeometry', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 287, 6), )

    
    ScanGeometry = property(__ScanGeometry.value, __ScanGeometry.set, None, None)

    
    # Element DigitalScanCommandFileID uses Python identifier DigitalScanCommandFileID
    __DigitalScanCommandFileID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'DigitalScanCommandFileID'), 'DigitalScanCommandFileID', '__AbsentNamespace0_BuildParametersType_DigitalScanCommandFileID', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 288, 6), )

    
    DigitalScanCommandFileID = property(__DigitalScanCommandFileID.value, __DigitalScanCommandFileID.set, None, None)

    
    # Element note uses Python identifier note
    __note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'note'), 'note', '__AbsentNamespace0_BuildParametersType_note', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 289, 6), )

    
    note = property(__note.value, __note.set, None, None)

    _ElementMap.update({
        __Laser.name() : __Laser,
        __SolidLayers.name() : __SolidLayers,
        __ScanGeometry.name() : __ScanGeometry,
        __DigitalScanCommandFileID.name() : __DigitalScanCommandFileID,
        __note.name() : __note
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BuildParametersType = BuildParametersType
Namespace.addCategoryObject('typeBinding', 'BuildParametersType', BuildParametersType)


# Complex type LaserType with content type ELEMENT_ONLY
class LaserType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type LaserType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LaserType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 293, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LaserType uses Python identifier LaserType
    __LaserType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LaserType'), 'LaserType', '__AbsentNamespace0_LaserType_LaserType', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 295, 6), )

    
    LaserType = property(__LaserType.value, __LaserType.set, None, None)

    
    # Element NominalLaserPower uses Python identifier NominalLaserPower
    __NominalLaserPower = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NominalLaserPower'), 'NominalLaserPower', '__AbsentNamespace0_LaserType_NominalLaserPower', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 296, 6), )

    
    NominalLaserPower = property(__NominalLaserPower.value, __NominalLaserPower.set, None, None)

    
    # Element LaserPowerValueUnit uses Python identifier LaserPowerValueUnit
    __LaserPowerValueUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LaserPowerValueUnit'), 'LaserPowerValueUnit', '__AbsentNamespace0_LaserType_LaserPowerValueUnit', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 297, 6), )

    
    LaserPowerValueUnit = property(__LaserPowerValueUnit.value, __LaserPowerValueUnit.set, None, None)

    
    # Element NominalScanningSpeedValue uses Python identifier NominalScanningSpeedValue
    __NominalScanningSpeedValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NominalScanningSpeedValue'), 'NominalScanningSpeedValue', '__AbsentNamespace0_LaserType_NominalScanningSpeedValue', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 298, 6), )

    
    NominalScanningSpeedValue = property(__NominalScanningSpeedValue.value, __NominalScanningSpeedValue.set, None, None)

    
    # Element ScanningSpeedUnit uses Python identifier ScanningSpeedUnit
    __ScanningSpeedUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ScanningSpeedUnit'), 'ScanningSpeedUnit', '__AbsentNamespace0_LaserType_ScanningSpeedUnit', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 299, 6), )

    
    ScanningSpeedUnit = property(__ScanningSpeedUnit.value, __ScanningSpeedUnit.set, None, None)

    
    # Element NominalLaserSpotSize uses Python identifier NominalLaserSpotSize
    __NominalLaserSpotSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NominalLaserSpotSize'), 'NominalLaserSpotSize', '__AbsentNamespace0_LaserType_NominalLaserSpotSize', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 300, 6), )

    
    NominalLaserSpotSize = property(__NominalLaserSpotSize.value, __NominalLaserSpotSize.set, None, None)

    
    # Element NominalLaserSpotSize_MeasureDefinition uses Python identifier NominalLaserSpotSize_MeasureDefinition
    __NominalLaserSpotSize_MeasureDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NominalLaserSpotSize_MeasureDefinition'), 'NominalLaserSpotSize_MeasureDefinition', '__AbsentNamespace0_LaserType_NominalLaserSpotSize_MeasureDefinition', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 301, 6), )

    
    NominalLaserSpotSize_MeasureDefinition = property(__NominalLaserSpotSize_MeasureDefinition.value, __NominalLaserSpotSize_MeasureDefinition.set, None, None)

    
    # Element SpotSizeUnit uses Python identifier SpotSizeUnit
    __SpotSizeUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SpotSizeUnit'), 'SpotSizeUnit', '__AbsentNamespace0_LaserType_SpotSizeUnit', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 302, 6), )

    
    SpotSizeUnit = property(__SpotSizeUnit.value, __SpotSizeUnit.set, None, None)

    _ElementMap.update({
        __LaserType.name() : __LaserType,
        __NominalLaserPower.name() : __NominalLaserPower,
        __LaserPowerValueUnit.name() : __LaserPowerValueUnit,
        __NominalScanningSpeedValue.name() : __NominalScanningSpeedValue,
        __ScanningSpeedUnit.name() : __ScanningSpeedUnit,
        __NominalLaserSpotSize.name() : __NominalLaserSpotSize,
        __NominalLaserSpotSize_MeasureDefinition.name() : __NominalLaserSpotSize_MeasureDefinition,
        __SpotSizeUnit.name() : __SpotSizeUnit
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LaserType = LaserType
Namespace.addCategoryObject('typeBinding', 'LaserType', LaserType)


# Complex type SolidLayerType with content type ELEMENT_ONLY
class SolidLayerType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SolidLayerType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SolidLayerType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 306, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element LayerThickness uses Python identifier LayerThickness
    __LayerThickness = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'LayerThickness'), 'LayerThickness', '__AbsentNamespace0_SolidLayerType_LayerThickness', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 308, 6), )

    
    LayerThickness = property(__LayerThickness.value, __LayerThickness.set, None, None)

    
    # Element ThicknessUnits uses Python identifier ThicknessUnits
    __ThicknessUnits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ThicknessUnits'), 'ThicknessUnits', '__AbsentNamespace0_SolidLayerType_ThicknessUnits', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 309, 6), )

    
    ThicknessUnits = property(__ThicknessUnits.value, __ThicknessUnits.set, None, None)

    
    # Element TotalNumberLayers uses Python identifier TotalNumberLayers
    __TotalNumberLayers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'TotalNumberLayers'), 'TotalNumberLayers', '__AbsentNamespace0_SolidLayerType_TotalNumberLayers', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 310, 6), )

    
    TotalNumberLayers = property(__TotalNumberLayers.value, __TotalNumberLayers.set, None, None)

    _ElementMap.update({
        __LayerThickness.name() : __LayerThickness,
        __ThicknessUnits.name() : __ThicknessUnits,
        __TotalNumberLayers.name() : __TotalNumberLayers
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SolidLayerType = SolidLayerType
Namespace.addCategoryObject('typeBinding', 'SolidLayerType', SolidLayerType)


# Complex type ScanGeometryType with content type ELEMENT_ONLY
class ScanGeometryType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ScanGeometryType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ScanGeometryType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 314, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element ScanType uses Python identifier ScanType
    __ScanType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ScanType'), 'ScanType', '__AbsentNamespace0_ScanGeometryType_ScanType', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 316, 6), )

    
    ScanType = property(__ScanType.value, __ScanType.set, None, None)

    
    # Element StripeWidth uses Python identifier StripeWidth
    __StripeWidth = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'StripeWidth'), 'StripeWidth', '__AbsentNamespace0_ScanGeometryType_StripeWidth', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 317, 6), )

    
    StripeWidth = property(__StripeWidth.value, __StripeWidth.set, None, None)

    
    # Element HatchingSpacing uses Python identifier HatchingSpacing
    __HatchingSpacing = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HatchingSpacing'), 'HatchingSpacing', '__AbsentNamespace0_ScanGeometryType_HatchingSpacing', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 318, 6), )

    
    HatchingSpacing = property(__HatchingSpacing.value, __HatchingSpacing.set, None, None)

    
    # Element RotationBetweenLayers uses Python identifier RotationBetweenLayers
    __RotationBetweenLayers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RotationBetweenLayers'), 'RotationBetweenLayers', '__AbsentNamespace0_ScanGeometryType_RotationBetweenLayers', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 319, 6), )

    
    RotationBetweenLayers = property(__RotationBetweenLayers.value, __RotationBetweenLayers.set, None, None)

    
    # Element ScanGeometryNotes uses Python identifier ScanGeometryNotes
    __ScanGeometryNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ScanGeometryNotes'), 'ScanGeometryNotes', '__AbsentNamespace0_ScanGeometryType_ScanGeometryNotes', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 320, 6), )

    
    ScanGeometryNotes = property(__ScanGeometryNotes.value, __ScanGeometryNotes.set, None, None)

    _ElementMap.update({
        __ScanType.name() : __ScanType,
        __StripeWidth.name() : __StripeWidth,
        __HatchingSpacing.name() : __HatchingSpacing,
        __RotationBetweenLayers.name() : __RotationBetweenLayers,
        __ScanGeometryNotes.name() : __ScanGeometryNotes
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ScanGeometryType = ScanGeometryType
Namespace.addCategoryObject('typeBinding', 'ScanGeometryType', ScanGeometryType)


# Complex type StripeWidthType with content type ELEMENT_ONLY
class StripeWidthType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type StripeWidthType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'StripeWidthType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 324, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element StripeWidthValue uses Python identifier StripeWidthValue
    __StripeWidthValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'StripeWidthValue'), 'StripeWidthValue', '__AbsentNamespace0_StripeWidthType_StripeWidthValue', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 326, 6), )

    
    StripeWidthValue = property(__StripeWidthValue.value, __StripeWidthValue.set, None, None)

    
    # Element StripeWidthUnits uses Python identifier StripeWidthUnits
    __StripeWidthUnits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'StripeWidthUnits'), 'StripeWidthUnits', '__AbsentNamespace0_StripeWidthType_StripeWidthUnits', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 327, 6), )

    
    StripeWidthUnits = property(__StripeWidthUnits.value, __StripeWidthUnits.set, None, None)

    _ElementMap.update({
        __StripeWidthValue.name() : __StripeWidthValue,
        __StripeWidthUnits.name() : __StripeWidthUnits
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.StripeWidthType = StripeWidthType
Namespace.addCategoryObject('typeBinding', 'StripeWidthType', StripeWidthType)


# Complex type HatchSpacingType with content type ELEMENT_ONLY
class HatchSpacingType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type HatchSpacingType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'HatchSpacingType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 331, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element HatchSpacingValue uses Python identifier HatchSpacingValue
    __HatchSpacingValue = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HatchSpacingValue'), 'HatchSpacingValue', '__AbsentNamespace0_HatchSpacingType_HatchSpacingValue', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 333, 6), )

    
    HatchSpacingValue = property(__HatchSpacingValue.value, __HatchSpacingValue.set, None, None)

    
    # Element HatchSpacingUnit uses Python identifier HatchSpacingUnit
    __HatchSpacingUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'HatchSpacingUnit'), 'HatchSpacingUnit', '__AbsentNamespace0_HatchSpacingType_HatchSpacingUnit', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 334, 6), )

    
    HatchSpacingUnit = property(__HatchSpacingUnit.value, __HatchSpacingUnit.set, None, None)

    _ElementMap.update({
        __HatchSpacingValue.name() : __HatchSpacingValue,
        __HatchSpacingUnit.name() : __HatchSpacingUnit
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.HatchSpacingType = HatchSpacingType
Namespace.addCategoryObject('typeBinding', 'HatchSpacingType', HatchSpacingType)


# Complex type RotationLayersType with content type ELEMENT_ONLY
class RotationLayersType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type RotationLayersType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RotationLayersType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 338, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element RotationAngleBetweenLayers uses Python identifier RotationAngleBetweenLayers
    __RotationAngleBetweenLayers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RotationAngleBetweenLayers'), 'RotationAngleBetweenLayers', '__AbsentNamespace0_RotationLayersType_RotationAngleBetweenLayers', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 340, 6), )

    
    RotationAngleBetweenLayers = property(__RotationAngleBetweenLayers.value, __RotationAngleBetweenLayers.set, None, None)

    
    # Element RotationAngleUnit uses Python identifier RotationAngleUnit
    __RotationAngleUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RotationAngleUnit'), 'RotationAngleUnit', '__AbsentNamespace0_RotationLayersType_RotationAngleUnit', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 342, 6), )

    
    RotationAngleUnit = property(__RotationAngleUnit.value, __RotationAngleUnit.set, None, None)

    _ElementMap.update({
        __RotationAngleBetweenLayers.name() : __RotationAngleBetweenLayers,
        __RotationAngleUnit.name() : __RotationAngleUnit
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.RotationLayersType = RotationLayersType
Namespace.addCategoryObject('typeBinding', 'RotationLayersType', RotationLayersType)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_ (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 352, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element BuildID uses Python identifier BuildID
    __BuildID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BuildID'), 'BuildID', '__AbsentNamespace0_CTD_ANON__BuildID', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 354, 12), )

    
    BuildID = property(__BuildID.value, __BuildID.set, None, None)

    
    # Element BuildPID uses Python identifier BuildPID
    __BuildPID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BuildPID'), 'BuildPID', '__AbsentNamespace0_CTD_ANON__BuildPID', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 355, 12), )

    
    BuildPID = property(__BuildPID.value, __BuildPID.set, None, None)

    _ElementMap.update({
        __BuildID.name() : __BuildID,
        __BuildPID.name() : __BuildPID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_ = CTD_ANON_


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_2 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 360, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SampleName uses Python identifier SampleName
    __SampleName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SampleName'), 'SampleName', '__AbsentNamespace0_CTD_ANON_2_SampleName', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 362, 12), )

    
    SampleName = property(__SampleName.value, __SampleName.set, None, None)

    
    # Element SamplePID uses Python identifier SamplePID
    __SamplePID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SamplePID'), 'SamplePID', '__AbsentNamespace0_CTD_ANON_2_SamplePID', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 363, 12), )

    
    SamplePID = property(__SamplePID.value, __SamplePID.set, None, None)

    _ElementMap.update({
        __SampleName.name() : __SampleName,
        __SamplePID.name() : __SamplePID
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_2 = CTD_ANON_2


# Complex type SamplePreparationMethods with content type ELEMENT_ONLY
class SamplePreparationMethods (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SamplePreparationMethods with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SamplePreparationMethods')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 403, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Sectioning uses Python identifier Sectioning
    __Sectioning = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Sectioning'), 'Sectioning', '__AbsentNamespace0_SamplePreparationMethods_Sectioning', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 405, 6), )

    
    Sectioning = property(__Sectioning.value, __Sectioning.set, None, None)

    
    # Element Mounting uses Python identifier Mounting
    __Mounting = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Mounting'), 'Mounting', '__AbsentNamespace0_SamplePreparationMethods_Mounting', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 412, 6), )

    
    Mounting = property(__Mounting.value, __Mounting.set, None, None)

    
    # Element SampleOrientation uses Python identifier SampleOrientation
    __SampleOrientation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SampleOrientation'), 'SampleOrientation', '__AbsentNamespace0_SamplePreparationMethods_SampleOrientation', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 421, 6), )

    
    SampleOrientation = property(__SampleOrientation.value, __SampleOrientation.set, None, None)

    
    # Element Polishing-Etching uses Python identifier Polishing_Etching
    __Polishing_Etching = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Polishing-Etching'), 'Polishing_Etching', '__AbsentNamespace0_SamplePreparationMethods_Polishing_Etching', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 422, 6), )

    
    Polishing_Etching = property(__Polishing_Etching.value, __Polishing_Etching.set, None, None)

    _ElementMap.update({
        __Sectioning.name() : __Sectioning,
        __Mounting.name() : __Mounting,
        __SampleOrientation.name() : __SampleOrientation,
        __Polishing_Etching.name() : __Polishing_Etching
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SamplePreparationMethods = SamplePreparationMethods
Namespace.addCategoryObject('typeBinding', 'SamplePreparationMethods', SamplePreparationMethods)


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_3 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 406, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SectioningInstrument uses Python identifier SectioningInstrument
    __SectioningInstrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SectioningInstrument'), 'SectioningInstrument', '__AbsentNamespace0_CTD_ANON_3_SectioningInstrument', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 408, 12), )

    
    SectioningInstrument = property(__SectioningInstrument.value, __SectioningInstrument.set, None, None)

    _ElementMap.update({
        __SectioningInstrument.name() : __SectioningInstrument
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_3 = CTD_ANON_3


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_4 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 423, 8)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element NotEtched uses Python identifier NotEtched
    __NotEtched = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'NotEtched'), 'NotEtched', '__AbsentNamespace0_CTD_ANON_4_NotEtched', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 425, 12), )

    
    NotEtched = property(__NotEtched.value, __NotEtched.set, None, None)

    
    # Element Etched uses Python identifier Etched
    __Etched = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Etched'), 'Etched', '__AbsentNamespace0_CTD_ANON_4_Etched', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 426, 12), )

    
    Etched = property(__Etched.value, __Etched.set, None, None)

    _ElementMap.update({
        __NotEtched.name() : __NotEtched,
        __Etched.name() : __Etched
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_4 = CTD_ANON_4


# Complex type [anonymous] with content type ELEMENT_ONLY
class CTD_ANON_5 (pyxb.binding.basis.complexTypeDefinition):
    """Complex type [anonymous] with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = None
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 427, 14)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SurfaceFinish uses Python identifier SurfaceFinish
    __SurfaceFinish = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SurfaceFinish'), 'SurfaceFinish', '__AbsentNamespace0_CTD_ANON_5_SurfaceFinish', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 429, 18), )

    
    SurfaceFinish = property(__SurfaceFinish.value, __SurfaceFinish.set, None, None)

    
    # Element EtchType uses Python identifier EtchType
    __EtchType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EtchType'), 'EtchType', '__AbsentNamespace0_CTD_ANON_5_EtchType', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 430, 18), )

    
    EtchType = property(__EtchType.value, __EtchType.set, None, None)

    _ElementMap.update({
        __SurfaceFinish.name() : __SurfaceFinish,
        __EtchType.name() : __EtchType
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CTD_ANON_5 = CTD_ANON_5


# Complex type EtchedConditions with content type ELEMENT_ONLY
class EtchedConditions (pyxb.binding.basis.complexTypeDefinition):
    """Complex type EtchedConditions with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'EtchedConditions')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 440, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Etchant uses Python identifier Etchant
    __Etchant = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Etchant'), 'Etchant', '__AbsentNamespace0_EtchedConditions_Etchant', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 442, 6), )

    
    Etchant = property(__Etchant.value, __Etchant.set, None, None)

    
    # Element EtchTime uses Python identifier EtchTime
    __EtchTime = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EtchTime'), 'EtchTime', '__AbsentNamespace0_EtchedConditions_EtchTime', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 443, 6), )

    
    EtchTime = property(__EtchTime.value, __EtchTime.set, None, None)

    
    # Element EtchingNotes uses Python identifier EtchingNotes
    __EtchingNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'EtchingNotes'), 'EtchingNotes', '__AbsentNamespace0_EtchedConditions_EtchingNotes', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 444, 6), )

    
    EtchingNotes = property(__EtchingNotes.value, __EtchingNotes.set, None, None)

    _ElementMap.update({
        __Etchant.name() : __Etchant,
        __EtchTime.name() : __EtchTime,
        __EtchingNotes.name() : __EtchingNotes
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.EtchedConditions = EtchedConditions
Namespace.addCategoryObject('typeBinding', 'EtchedConditions', EtchedConditions)


# Complex type PolishingConditions with content type ELEMENT_ONLY
class PolishingConditions (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PolishingConditions with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PolishingConditions')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 448, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element PolishingMedia uses Python identifier PolishingMedia
    __PolishingMedia = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PolishingMedia'), 'PolishingMedia', '__AbsentNamespace0_PolishingConditions_PolishingMedia', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 450, 6), )

    
    PolishingMedia = property(__PolishingMedia.value, __PolishingMedia.set, None, None)

    
    # Element FinalPolish uses Python identifier FinalPolish
    __FinalPolish = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FinalPolish'), 'FinalPolish', '__AbsentNamespace0_PolishingConditions_FinalPolish', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 451, 6), )

    
    FinalPolish = property(__FinalPolish.value, __FinalPolish.set, None, None)

    
    # Element PolishingNote uses Python identifier PolishingNote
    __PolishingNote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PolishingNote'), 'PolishingNote', '__AbsentNamespace0_PolishingConditions_PolishingNote', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 452, 6), )

    
    PolishingNote = property(__PolishingNote.value, __PolishingNote.set, None, None)

    _ElementMap.update({
        __PolishingMedia.name() : __PolishingMedia,
        __FinalPolish.name() : __FinalPolish,
        __PolishingNote.name() : __PolishingNote
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PolishingConditions = PolishingConditions
Namespace.addCategoryObject('typeBinding', 'PolishingConditions', PolishingConditions)


# Complex type SampleIDType with content type ELEMENT_ONLY
class SampleIDType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SampleIDType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SampleIDType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 456, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__AbsentNamespace0_SampleIDType_name', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 458, 6), )

    
    name = property(__name.value, __name.set, None, '')

    
    # Element BenchMarkID uses Python identifier BenchMarkID
    __BenchMarkID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BenchMarkID'), 'BenchMarkID', '__AbsentNamespace0_SampleIDType_BenchMarkID', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 469, 6), )

    
    BenchMarkID = property(__BenchMarkID.value, __BenchMarkID.set, None, None)

    
    # Element BuildNumber uses Python identifier BuildNumber
    __BuildNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BuildNumber'), 'BuildNumber', '__AbsentNamespace0_SampleIDType_BuildNumber', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 480, 6), )

    
    BuildNumber = property(__BuildNumber.value, __BuildNumber.set, None, None)

    
    # Element PartType uses Python identifier PartType
    __PartType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PartType'), 'PartType', '__AbsentNamespace0_SampleIDType_PartType', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 481, 6), )

    
    PartType = property(__PartType.value, __PartType.set, None, None)

    
    # Element AltName uses Python identifier AltName
    __AltName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AltName'), 'AltName', '__AbsentNamespace0_SampleIDType_AltName', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 483, 6), )

    
    AltName = property(__AltName.value, __AltName.set, None, None)

    
    # Element Alt-ID uses Python identifier Alt_ID
    __Alt_ID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Alt-ID'), 'Alt_ID', '__AbsentNamespace0_SampleIDType_Alt_ID', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 484, 6), )

    
    Alt_ID = property(__Alt_ID.value, __Alt_ID.set, None, None)

    
    # Element CreationDate uses Python identifier CreationDate
    __CreationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CreationDate'), 'CreationDate', '__AbsentNamespace0_SampleIDType_CreationDate', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 485, 6), )

    
    CreationDate = property(__CreationDate.value, __CreationDate.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __BenchMarkID.name() : __BenchMarkID,
        __BuildNumber.name() : __BuildNumber,
        __PartType.name() : __PartType,
        __AltName.name() : __AltName,
        __Alt_ID.name() : __Alt_ID,
        __CreationDate.name() : __CreationDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SampleIDType = SampleIDType
Namespace.addCategoryObject('typeBinding', 'SampleIDType', SampleIDType)


# Complex type AMBuildProcess with content type ELEMENT_ONLY
class AMBuildProcess (pyxb.binding.basis.complexTypeDefinition):
    """Complex type AMBuildProcess with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AMBuildProcess')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 492, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element AMBuildProcessType uses Python identifier AMBuildProcessType
    __AMBuildProcessType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AMBuildProcessType'), 'AMBuildProcessType', '__AbsentNamespace0_AMBuildProcess_AMBuildProcessType', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 494, 6), )

    
    AMBuildProcessType = property(__AMBuildProcessType.value, __AMBuildProcessType.set, None, None)

    
    # Element powder uses Python identifier powder
    __powder = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'powder'), 'powder', '__AbsentNamespace0_AMBuildProcess_powder', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 495, 6), )

    
    powder = property(__powder.value, __powder.set, None, None)

    
    # Element buildPlateID uses Python identifier buildPlateID
    __buildPlateID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'buildPlateID'), 'buildPlateID', '__AbsentNamespace0_AMBuildProcess_buildPlateID', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 496, 6), )

    
    buildPlateID = property(__buildPlateID.value, __buildPlateID.set, None, '')

    
    # Element BuildPlateImage uses Python identifier BuildPlateImage
    __BuildPlateImage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'BuildPlateImage'), 'BuildPlateImage', '__AbsentNamespace0_AMBuildProcess_BuildPlateImage', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 503, 6), )

    
    BuildPlateImage = property(__BuildPlateImage.value, __BuildPlateImage.set, None, None)

    
    # Element buildNote uses Python identifier buildNote
    __buildNote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'buildNote'), 'buildNote', '__AbsentNamespace0_AMBuildProcess_buildNote', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 504, 6), )

    
    buildNote = property(__buildNote.value, __buildNote.set, None, None)

    
    # Element PrintingNotes uses Python identifier PrintingNotes
    __PrintingNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PrintingNotes'), 'PrintingNotes', '__AbsentNamespace0_AMBuildProcess_PrintingNotes', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 505, 6), )

    
    PrintingNotes = property(__PrintingNotes.value, __PrintingNotes.set, None, None)

    _ElementMap.update({
        __AMBuildProcessType.name() : __AMBuildProcessType,
        __powder.name() : __powder,
        __buildPlateID.name() : __buildPlateID,
        __BuildPlateImage.name() : __BuildPlateImage,
        __buildNote.name() : __buildNote,
        __PrintingNotes.name() : __PrintingNotes
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AMBuildProcess = AMBuildProcess
Namespace.addCategoryObject('typeBinding', 'AMBuildProcess', AMBuildProcess)


# Complex type BuildNote with content type ELEMENT_ONLY
class BuildNote (pyxb.binding.basis.complexTypeDefinition):
    """Complex type BuildNote with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BuildNote')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 509, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Note uses Python identifier Note
    __Note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Note'), 'Note', '__AbsentNamespace0_BuildNote_Note', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 511, 6), )

    
    Note = property(__Note.value, __Note.set, None, None)

    
    # Element Downloadfiles uses Python identifier Downloadfiles
    __Downloadfiles = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Downloadfiles'), 'Downloadfiles', '__AbsentNamespace0_BuildNote_Downloadfiles', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 512, 6), )

    
    Downloadfiles = property(__Downloadfiles.value, __Downloadfiles.set, None, None)

    _ElementMap.update({
        __Note.name() : __Note,
        __Downloadfiles.name() : __Downloadfiles
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BuildNote = BuildNote
Namespace.addCategoryObject('typeBinding', 'BuildNote', BuildNote)


# Complex type AMDocRoot with content type ELEMENT_ONLY
class AMDocRoot (pyxb.binding.basis.complexTypeDefinition):
    """Complex type AMDocRoot with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AMDocRoot')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 7, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element pid uses Python identifier pid
    __pid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pid'), 'pid', '__AbsentNamespace0_AMDocRoot_pid', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 9, 6), )

    
    pid = property(__pid.value, __pid.set, None, None)

    
    # Element AMBuildPlate uses Python identifier AMBuildPlate
    __AMBuildPlate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AMBuildPlate'), 'AMBuildPlate', '__AbsentNamespace0_AMDocRoot_AMBuildPlate', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 11, 8), )

    
    AMBuildPlate = property(__AMBuildPlate.value, __AMBuildPlate.set, None, None)

    
    # Element AMBuildPart uses Python identifier AMBuildPart
    __AMBuildPart = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AMBuildPart'), 'AMBuildPart', '__AbsentNamespace0_AMDocRoot_AMBuildPart', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 12, 8), )

    
    AMBuildPart = property(__AMBuildPart.value, __AMBuildPart.set, None, None)

    
    # Element AMBSpecimen uses Python identifier AMBSpecimen
    __AMBSpecimen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AMBSpecimen'), 'AMBSpecimen', '__AbsentNamespace0_AMDocRoot_AMBSpecimen', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 13, 8), )

    
    AMBSpecimen = property(__AMBSpecimen.value, __AMBSpecimen.set, None, None)

    
    # Element AMPowder uses Python identifier AMPowder
    __AMPowder = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AMPowder'), 'AMPowder', '__AbsentNamespace0_AMDocRoot_AMPowder', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 14, 8), )

    
    AMPowder = property(__AMPowder.value, __AMPowder.set, None, None)

    
    # Element Material uses Python identifier Material
    __Material = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Material'), 'Material', '__AbsentNamespace0_AMDocRoot_Material', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 15, 8), )

    
    Material = property(__Material.value, __Material.set, None, None)

    
    # Element AMBuildProcess uses Python identifier AMBuildProcess
    __AMBuildProcess = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AMBuildProcess'), 'AMBuildProcess', '__AbsentNamespace0_AMDocRoot_AMBuildProcess', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 16, 8), )

    
    AMBuildProcess = property(__AMBuildProcess.value, __AMBuildProcess.set, None, None)

    
    # Element AMDigitalImageCorrelationMeasurement uses Python identifier AMDigitalImageCorrelationMeasurement
    __AMDigitalImageCorrelationMeasurement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AMDigitalImageCorrelationMeasurement'), 'AMDigitalImageCorrelationMeasurement', '__AbsentNamespace0_AMDocRoot_AMDigitalImageCorrelationMeasurement', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 17, 8), )

    
    AMDigitalImageCorrelationMeasurement = property(__AMDigitalImageCorrelationMeasurement.value, __AMDigitalImageCorrelationMeasurement.set, None, None)

    
    # Element AMMechanicalTesting uses Python identifier AMMechanicalTesting
    __AMMechanicalTesting = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AMMechanicalTesting'), 'AMMechanicalTesting', '__AbsentNamespace0_AMDocRoot_AMMechanicalTesting', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 18, 8), )

    
    AMMechanicalTesting = property(__AMMechanicalTesting.value, __AMMechanicalTesting.set, None, None)

    
    # Element AMLaserAbsorptivity uses Python identifier AMLaserAbsorptivity
    __AMLaserAbsorptivity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AMLaserAbsorptivity'), 'AMLaserAbsorptivity', '__AbsentNamespace0_AMDocRoot_AMLaserAbsorptivity', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 19, 8), )

    
    AMLaserAbsorptivity = property(__AMLaserAbsorptivity.value, __AMLaserAbsorptivity.set, None, None)

    
    # Element AMRadiography uses Python identifier AMRadiography
    __AMRadiography = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AMRadiography'), 'AMRadiography', '__AbsentNamespace0_AMDocRoot_AMRadiography', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 20, 8), )

    
    AMRadiography = property(__AMRadiography.value, __AMRadiography.set, None, None)

    
    # Element AMRSSynchrotronED uses Python identifier AMRSSynchrotronED
    __AMRSSynchrotronED = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AMRSSynchrotronED'), 'AMRSSynchrotronED', '__AbsentNamespace0_AMDocRoot_AMRSSynchrotronED', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 21, 8), )

    
    AMRSSynchrotronED = property(__AMRSSynchrotronED.value, __AMRSSynchrotronED.set, None, None)

    
    # Element AMThermography uses Python identifier AMThermography
    __AMThermography = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AMThermography'), 'AMThermography', '__AbsentNamespace0_AMDocRoot_AMThermography', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 22, 8), )

    
    AMThermography = property(__AMThermography.value, __AMThermography.set, None, None)

    
    # Element AMComposition uses Python identifier AMComposition
    __AMComposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AMComposition'), 'AMComposition', '__AbsentNamespace0_AMDocRoot_AMComposition', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 23, 8), )

    
    AMComposition = property(__AMComposition.value, __AMComposition.set, None, None)

    
    # Element AMPowderSizeDistribution uses Python identifier AMPowderSizeDistribution
    __AMPowderSizeDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AMPowderSizeDistribution'), 'AMPowderSizeDistribution', '__AbsentNamespace0_AMDocRoot_AMPowderSizeDistribution', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 24, 8), )

    
    AMPowderSizeDistribution = property(__AMPowderSizeDistribution.value, __AMPowderSizeDistribution.set, None, None)

    _ElementMap.update({
        __pid.name() : __pid,
        __AMBuildPlate.name() : __AMBuildPlate,
        __AMBuildPart.name() : __AMBuildPart,
        __AMBSpecimen.name() : __AMBSpecimen,
        __AMPowder.name() : __AMPowder,
        __Material.name() : __Material,
        __AMBuildProcess.name() : __AMBuildProcess,
        __AMDigitalImageCorrelationMeasurement.name() : __AMDigitalImageCorrelationMeasurement,
        __AMMechanicalTesting.name() : __AMMechanicalTesting,
        __AMLaserAbsorptivity.name() : __AMLaserAbsorptivity,
        __AMRadiography.name() : __AMRadiography,
        __AMRSSynchrotronED.name() : __AMRSSynchrotronED,
        __AMThermography.name() : __AMThermography,
        __AMComposition.name() : __AMComposition,
        __AMPowderSizeDistribution.name() : __AMPowderSizeDistribution
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AMDocRoot = AMDocRoot
Namespace.addCategoryObject('typeBinding', 'AMDocRoot', AMDocRoot)


# Complex type RelatedMeasurement with content type ELEMENT_ONLY
class RelatedMeasurement (pyxb.binding.basis.complexTypeDefinition):
    """Complex type RelatedMeasurement with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RelatedMeasurement')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 24, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_RelatedMeasurement_type', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 26, 6), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element measurementIdentifier uses Python identifier measurementIdentifier
    __measurementIdentifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'measurementIdentifier'), 'measurementIdentifier', '__AbsentNamespace0_RelatedMeasurement_measurementIdentifier', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 27, 6), )

    
    measurementIdentifier = property(__measurementIdentifier.value, __measurementIdentifier.set, None, None)

    
    # Element data uses Python identifier data
    __data = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'data'), 'data', '__AbsentNamespace0_RelatedMeasurement_data', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 28, 6), )

    
    data = property(__data.value, __data.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__AbsentNamespace0_RelatedMeasurement_description', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 29, 6), )

    
    description = property(__description.value, __description.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __measurementIdentifier.name() : __measurementIdentifier,
        __data.name() : __data,
        __description.name() : __description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.RelatedMeasurement = RelatedMeasurement
Namespace.addCategoryObject('typeBinding', 'RelatedMeasurement', RelatedMeasurement)


# Complex type MeasurementInput with content type ELEMENT_ONLY
class MeasurementInput (pyxb.binding.basis.complexTypeDefinition):
    """Complex type MeasurementInput with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MeasurementInput')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 32, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element specimenID uses Python identifier specimenID
    __specimenID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'specimenID'), 'specimenID', '__AbsentNamespace0_MeasurementInput_specimenID', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 34, 6), )

    
    specimenID = property(__specimenID.value, __specimenID.set, None, None)

    
    # Element specimenPID uses Python identifier specimenPID
    __specimenPID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'specimenPID'), 'specimenPID', '__AbsentNamespace0_MeasurementInput_specimenPID', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 36, 6), )

    
    specimenPID = property(__specimenPID.value, __specimenPID.set, None, '\n            PID identifying a PhysicalArtefact, i.e. more generic than a Specimen.\n          ')

    
    # Element specimenType uses Python identifier specimenType
    __specimenType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'specimenType'), 'specimenType', '__AbsentNamespace0_MeasurementInput_specimenType', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 43, 6), )

    
    specimenType = property(__specimenType.value, __specimenType.set, None, None)

    
    # Element specimenMeasurementGeometry uses Python identifier specimenMeasurementGeometry
    __specimenMeasurementGeometry = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'specimenMeasurementGeometry'), 'specimenMeasurementGeometry', '__AbsentNamespace0_MeasurementInput_specimenMeasurementGeometry', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 44, 6), )

    
    specimenMeasurementGeometry = property(__specimenMeasurementGeometry.value, __specimenMeasurementGeometry.set, None, None)

    
    # Element specimenMetadata uses Python identifier specimenMetadata
    __specimenMetadata = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'specimenMetadata'), 'specimenMetadata', '__AbsentNamespace0_MeasurementInput_specimenMetadata', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 46, 6), )

    
    specimenMetadata = property(__specimenMetadata.value, __specimenMetadata.set, None, None)

    _ElementMap.update({
        __specimenID.name() : __specimenID,
        __specimenPID.name() : __specimenPID,
        __specimenType.name() : __specimenType,
        __specimenMeasurementGeometry.name() : __specimenMeasurementGeometry,
        __specimenMetadata.name() : __specimenMetadata
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MeasurementInput = MeasurementInput
Namespace.addCategoryObject('typeBinding', 'MeasurementInput', MeasurementInput)


# Complex type SpecimenMeasurementGeometry with content type ELEMENT_ONLY
class SpecimenMeasurementGeometry (pyxb.binding.basis.complexTypeDefinition):
    """Complex type SpecimenMeasurementGeometry with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'SpecimenMeasurementGeometry')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 50, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element document uses Python identifier document
    __document = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'document'), 'document', '__AbsentNamespace0_SpecimenMeasurementGeometry_document', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 52, 6), )

    
    document = property(__document.value, __document.set, None, None)

    
    # Element imageRef uses Python identifier imageRef
    __imageRef = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'imageRef'), 'imageRef', '__AbsentNamespace0_SpecimenMeasurementGeometry_imageRef', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 53, 6), )

    
    imageRef = property(__imageRef.value, __imageRef.set, None, None)

    _ElementMap.update({
        __document.name() : __document,
        __imageRef.name() : __imageRef
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.SpecimenMeasurementGeometry = SpecimenMeasurementGeometry
Namespace.addCategoryObject('typeBinding', 'SpecimenMeasurementGeometry', SpecimenMeasurementGeometry)


# Complex type MeasurementMethod with content type ELEMENT_ONLY
class MeasurementMethod (pyxb.binding.basis.complexTypeDefinition):
    """Complex type MeasurementMethod with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MeasurementMethod')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 57, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element instrumentConfiguration uses Python identifier instrumentConfiguration
    __instrumentConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'instrumentConfiguration'), 'instrumentConfiguration', '__AbsentNamespace0_MeasurementMethod_instrumentConfiguration', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 59, 6), )

    
    instrumentConfiguration = property(__instrumentConfiguration.value, __instrumentConfiguration.set, None, None)

    
    # Element experimentConfiguration uses Python identifier experimentConfiguration
    __experimentConfiguration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'experimentConfiguration'), 'experimentConfiguration', '__AbsentNamespace0_MeasurementMethod_experimentConfiguration', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 60, 6), )

    
    experimentConfiguration = property(__experimentConfiguration.value, __experimentConfiguration.set, None, None)

    _ElementMap.update({
        __instrumentConfiguration.name() : __instrumentConfiguration,
        __experimentConfiguration.name() : __experimentConfiguration
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MeasurementMethod = MeasurementMethod
Namespace.addCategoryObject('typeBinding', 'MeasurementMethod', MeasurementMethod)


# Complex type InstrumentConfiguration with content type ELEMENT_ONLY
class InstrumentConfiguration (pyxb.binding.basis.complexTypeDefinition):
    """Complex type InstrumentConfiguration with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InstrumentConfiguration')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 64, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element mainInstrument uses Python identifier mainInstrument
    __mainInstrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'mainInstrument'), 'mainInstrument', '__AbsentNamespace0_InstrumentConfiguration_mainInstrument', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 66, 6), )

    
    mainInstrument = property(__mainInstrument.value, __mainInstrument.set, None, None)

    
    # Element ancillaryInstrument uses Python identifier ancillaryInstrument
    __ancillaryInstrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'ancillaryInstrument'), 'ancillaryInstrument', '__AbsentNamespace0_InstrumentConfiguration_ancillaryInstrument', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 67, 6), )

    
    ancillaryInstrument = property(__ancillaryInstrument.value, __ancillaryInstrument.set, None, None)

    _ElementMap.update({
        __mainInstrument.name() : __mainInstrument,
        __ancillaryInstrument.name() : __ancillaryInstrument
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InstrumentConfiguration = InstrumentConfiguration
Namespace.addCategoryObject('typeBinding', 'InstrumentConfiguration', InstrumentConfiguration)


# Complex type ExperimentConfiguration with content type ELEMENT_ONLY
class ExperimentConfiguration (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ExperimentConfiguration with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ExperimentConfiguration')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 71, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element component uses Python identifier component
    __component = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'component'), 'component', '__AbsentNamespace0_ExperimentConfiguration_component', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 73, 6), )

    
    component = property(__component.value, __component.set, None, None)

    _ElementMap.update({
        __component.name() : __component
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ExperimentConfiguration = ExperimentConfiguration
Namespace.addCategoryObject('typeBinding', 'ExperimentConfiguration', ExperimentConfiguration)


# Complex type MeasurementOutput with content type ELEMENT_ONLY
class MeasurementOutput (pyxb.binding.basis.complexTypeDefinition):
    """Complex type MeasurementOutput with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MeasurementOutput')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 86, 4)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element dataSet uses Python identifier dataSet
    __dataSet = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dataSet'), 'dataSet', '__AbsentNamespace0_MeasurementOutput_dataSet', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 88, 6), )

    
    dataSet = property(__dataSet.value, __dataSet.set, None, None)

    _ElementMap.update({
        __dataSet.name() : __dataSet
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MeasurementOutput = MeasurementOutput
Namespace.addCategoryObject('typeBinding', 'MeasurementOutput', MeasurementOutput)


# Complex type DataSet with content type ELEMENT_ONLY
class DataSet (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DataSet with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataSet')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 91, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_DataSet_type', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 94, 6), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element dataObject uses Python identifier dataObject
    __dataObject = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'dataObject'), 'dataObject', '__AbsentNamespace0_DataSet_dataObject', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 95, 6), )

    
    dataObject = property(__dataObject.value, __dataObject.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __dataObject.name() : __dataObject
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DataSet = DataSet
Namespace.addCategoryObject('typeBinding', 'DataSet', DataSet)


# Complex type InstrumentRef with content type ELEMENT_ONLY
class InstrumentRef (pyxb.binding.basis.complexTypeDefinition):
    """Complex type InstrumentRef with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'InstrumentRef')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 109, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element instrumentName uses Python identifier instrumentName
    __instrumentName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'instrumentName'), 'instrumentName', '__AbsentNamespace0_InstrumentRef_instrumentName', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 111, 6), )

    
    instrumentName = property(__instrumentName.value, __instrumentName.set, None, None)

    
    # Element detector uses Python identifier detector
    __detector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detector'), 'detector', '__AbsentNamespace0_InstrumentRef_detector', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 113, 8), )

    
    detector = property(__detector.value, __detector.set, None, None)

    
    # Element sensor uses Python identifier sensor
    __sensor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sensor'), 'sensor', '__AbsentNamespace0_InstrumentRef_sensor', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 114, 8), )

    
    sensor = property(__sensor.value, __sensor.set, None, None)

    _ElementMap.update({
        __instrumentName.name() : __instrumentName,
        __detector.name() : __detector,
        __sensor.name() : __sensor
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.InstrumentRef = InstrumentRef
Namespace.addCategoryObject('typeBinding', 'InstrumentRef', InstrumentRef)


# Complex type CompositionResult with content type ELEMENT_ONLY
class CompositionResult (pyxb.binding.basis.complexTypeDefinition):
    """Complex type CompositionResult with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CompositionResult')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 239, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element testReport uses Python identifier testReport
    __testReport = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'testReport'), 'testReport', '__AbsentNamespace0_CompositionResult_testReport', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 241, 6), )

    
    testReport = property(__testReport.value, __testReport.set, None, None)

    
    # Element composition uses Python identifier composition
    __composition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'composition'), 'composition', '__AbsentNamespace0_CompositionResult_composition', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 242, 6), )

    
    composition = property(__composition.value, __composition.set, None, None)

    _ElementMap.update({
        __testReport.name() : __testReport,
        __composition.name() : __composition
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CompositionResult = CompositionResult
Namespace.addCategoryObject('typeBinding', 'CompositionResult', CompositionResult)


# Complex type PowderSizeDistributionResult with content type ELEMENT_ONLY
class PowderSizeDistributionResult (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PowderSizeDistributionResult with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowderSizeDistributionResult')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 261, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element testReport uses Python identifier testReport
    __testReport = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'testReport'), 'testReport', '__AbsentNamespace0_PowderSizeDistributionResult_testReport', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 263, 6), )

    
    testReport = property(__testReport.value, __testReport.set, None, None)

    
    # Element powderSizeDistribution uses Python identifier powderSizeDistribution
    __powderSizeDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'powderSizeDistribution'), 'powderSizeDistribution', '__AbsentNamespace0_PowderSizeDistributionResult_powderSizeDistribution', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 264, 6), )

    
    powderSizeDistribution = property(__powderSizeDistribution.value, __powderSizeDistribution.set, None, None)

    _ElementMap.update({
        __testReport.name() : __testReport,
        __powderSizeDistribution.name() : __powderSizeDistribution
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PowderSizeDistributionResult = PowderSizeDistributionResult
Namespace.addCategoryObject('typeBinding', 'PowderSizeDistributionResult', PowderSizeDistributionResult)


# Complex type AMResource with content type ELEMENT_ONLY
class AMResource (pyxb.binding.basis.complexTypeDefinition):
    """Complex type AMResource with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AMResource')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 5, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__AbsentNamespace0_AMResource_name', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6), )

    
    name = property(__name.value, __name.set, None, '')

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__AbsentNamespace0_AMResource_description', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6), )

    
    description = property(__description.value, __description.set, None, '')

    
    # Element documentation uses Python identifier documentation
    __documentation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'documentation'), 'documentation', '__AbsentNamespace0_AMResource_documentation', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6), )

    
    documentation = property(__documentation.value, __documentation.set, None, None)

    
    # Element primaryContact uses Python identifier primaryContact
    __primaryContact = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'primaryContact'), 'primaryContact', '__AbsentNamespace0_AMResource_primaryContact', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6), )

    
    primaryContact = property(__primaryContact.value, __primaryContact.set, None, None)

    
    # Element contributor uses Python identifier contributor
    __contributor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'contributor'), 'contributor', '__AbsentNamespace0_AMResource_contributor', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6), )

    
    contributor = property(__contributor.value, __contributor.set, None, None)

    
    # Element note uses Python identifier note
    __note = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'note'), 'note', '__AbsentNamespace0_AMResource_note', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6), )

    
    note = property(__note.value, __note.set, None, None)

    
    # Element altName uses Python identifier altName
    __altName = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'altName'), 'altName', '__AbsentNamespace0_AMResource_altName', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6), )

    
    altName = property(__altName.value, __altName.set, None, '')

    
    # Element UUID uses Python identifier UUID
    __UUID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'UUID'), 'UUID', '__AbsentNamespace0_AMResource_UUID', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6), )

    
    UUID = property(__UUID.value, __UUID.set, None, '')

    
    # Element identifier uses Python identifier identifier
    __identifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'identifier'), 'identifier', '__AbsentNamespace0_AMResource_identifier', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6), )

    
    identifier = property(__identifier.value, __identifier.set, None, '')

    
    # Element journalPublication uses Python identifier journalPublication
    __journalPublication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'journalPublication'), 'journalPublication', '__AbsentNamespace0_AMResource_journalPublication', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6), )

    
    journalPublication = property(__journalPublication.value, __journalPublication.set, None, None)

    
    # Element referencePublication uses Python identifier referencePublication
    __referencePublication = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'referencePublication'), 'referencePublication', '__AbsentNamespace0_AMResource_referencePublication', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6), )

    
    referencePublication = property(__referencePublication.value, __referencePublication.set, None, None)

    
    # Element relatedStandard uses Python identifier relatedStandard
    __relatedStandard = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'relatedStandard'), 'relatedStandard', '__AbsentNamespace0_AMResource_relatedStandard', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6), )

    
    relatedStandard = property(__relatedStandard.value, __relatedStandard.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __description.name() : __description,
        __documentation.name() : __documentation,
        __primaryContact.name() : __primaryContact,
        __contributor.name() : __contributor,
        __note.name() : __note,
        __altName.name() : __altName,
        __UUID.name() : __UUID,
        __identifier.name() : __identifier,
        __journalPublication.name() : __journalPublication,
        __referencePublication.name() : __referencePublication,
        __relatedStandard.name() : __relatedStandard
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AMResource = AMResource
Namespace.addCategoryObject('typeBinding', 'AMResource', AMResource)


# Complex type identifier with content type ELEMENT_ONLY
class identifier (pyxb.binding.basis.complexTypeDefinition):
    """Complex type identifier with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'identifier')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 78, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element id uses Python identifier id
    __id = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__AbsentNamespace0_identifier_id', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 80, 6), )

    
    id = property(__id.value, __id.set, None, '')

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_identifier_type', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 90, 6), )

    
    type = property(__type.value, __type.set, None, '')

    _ElementMap.update({
        __id.name() : __id,
        __type.name() : __type
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.identifier = identifier
Namespace.addCategoryObject('typeBinding', 'identifier', identifier)


# Complex type PIDReference with content type ELEMENT_ONLY
class PIDReference (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PIDReference with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PIDReference')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 101, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element documentType uses Python identifier documentType
    __documentType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'documentType'), 'documentType', '__AbsentNamespace0_PIDReference_documentType', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 103, 6), )

    
    documentType = property(__documentType.value, __documentType.set, None, None)

    
    # Element pid uses Python identifier pid
    __pid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pid'), 'pid', '__AbsentNamespace0_PIDReference_pid', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 104, 6), )

    
    pid = property(__pid.value, __pid.set, None, None)

    _ElementMap.update({
        __documentType.name() : __documentType,
        __pid.name() : __pid
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PIDReference = PIDReference
Namespace.addCategoryObject('typeBinding', 'PIDReference', PIDReference)


# Complex type Field with content type ELEMENT_ONLY
class Field (pyxb.binding.basis.complexTypeDefinition):
    """Complex type Field with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Field')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 108, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__AbsentNamespace0_Field_name', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 110, 6), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__AbsentNamespace0_Field_value', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 112, 8), )

    
    value_ = property(__value.value, __value.set, None, None)

    
    # Element quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quantity'), 'quantity', '__AbsentNamespace0_Field_quantity', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 113, 8), )

    
    quantity = property(__quantity.value, __quantity.set, None, None)

    
    # Element object uses Python identifier object
    __object = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'object'), 'object', '__AbsentNamespace0_Field_object', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 114, 8), )

    
    object = property(__object.value, __object.set, None, None)

    
    # Element digitalArtifact uses Python identifier digitalArtifact
    __digitalArtifact = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'digitalArtifact'), 'digitalArtifact', '__AbsentNamespace0_Field_digitalArtifact', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 115, 8), )

    
    digitalArtifact = property(__digitalArtifact.value, __digitalArtifact.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__AbsentNamespace0_Field_description', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 117, 6), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element documentationLink uses Python identifier documentationLink
    __documentationLink = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'documentationLink'), 'documentationLink', '__AbsentNamespace0_Field_documentationLink', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 118, 6), )

    
    documentationLink = property(__documentationLink.value, __documentationLink.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __value.name() : __value,
        __quantity.name() : __quantity,
        __object.name() : __object,
        __digitalArtifact.name() : __digitalArtifact,
        __description.name() : __description,
        __documentationLink.name() : __documentationLink
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Field = Field
Namespace.addCategoryObject('typeBinding', 'Field', Field)


# Complex type ObjectType with content type ELEMENT_ONLY
class ObjectType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ObjectType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ObjectType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 122, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__AbsentNamespace0_ObjectType_name', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 124, 6), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__AbsentNamespace0_ObjectType_description', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 125, 6), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element field uses Python identifier field
    __field = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'field'), 'field', '__AbsentNamespace0_ObjectType_field', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 126, 6), )

    
    field = property(__field.value, __field.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __description.name() : __description,
        __field.name() : __field
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ObjectType = ObjectType
Namespace.addCategoryObject('typeBinding', 'ObjectType', ObjectType)


# Complex type CrystalStructure with content type ELEMENT_ONLY
class CrystalStructure (pyxb.binding.basis.complexTypeDefinition):
    """Complex type CrystalStructure with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CrystalStructure')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1060, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element CrystalLattice uses Python identifier CrystalLattice
    __CrystalLattice = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'CrystalLattice'), 'CrystalLattice', '__AbsentNamespace0_CrystalStructure_CrystalLattice', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1062, 6), )

    
    CrystalLattice = property(__CrystalLattice.value, __CrystalLattice.set, None, None)

    
    # Element SpaceGroup uses Python identifier SpaceGroup
    __SpaceGroup = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SpaceGroup'), 'SpaceGroup', '__AbsentNamespace0_CrystalStructure_SpaceGroup', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1063, 6), )

    
    SpaceGroup = property(__SpaceGroup.value, __SpaceGroup.set, None, None)

    
    # Element wyckoffSequence uses Python identifier wyckoffSequence
    __wyckoffSequence = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'wyckoffSequence'), 'wyckoffSequence', '__AbsentNamespace0_CrystalStructure_wyckoffSequence', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1064, 6), )

    
    wyckoffSequence = property(__wyckoffSequence.value, __wyckoffSequence.set, None, None)

    
    # Element prototype uses Python identifier prototype
    __prototype = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'prototype'), 'prototype', '__AbsentNamespace0_CrystalStructure_prototype', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1065, 6), )

    
    prototype = property(__prototype.value, __prototype.set, None, None)

    
    # Element pearsonSymbol uses Python identifier pearsonSymbol
    __pearsonSymbol = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'pearsonSymbol'), 'pearsonSymbol', '__AbsentNamespace0_CrystalStructure_pearsonSymbol', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1066, 6), )

    
    pearsonSymbol = property(__pearsonSymbol.value, __pearsonSymbol.set, None, None)

    
    # Element strukturbericht uses Python identifier strukturbericht
    __strukturbericht = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'strukturbericht'), 'strukturbericht', '__AbsentNamespace0_CrystalStructure_strukturbericht', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1067, 6), )

    
    strukturbericht = property(__strukturbericht.value, __strukturbericht.set, None, None)

    _ElementMap.update({
        __CrystalLattice.name() : __CrystalLattice,
        __SpaceGroup.name() : __SpaceGroup,
        __wyckoffSequence.name() : __wyckoffSequence,
        __prototype.name() : __prototype,
        __pearsonSymbol.name() : __pearsonSymbol,
        __strukturbericht.name() : __strukturbericht
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CrystalStructure = CrystalStructure
Namespace.addCategoryObject('typeBinding', 'CrystalStructure', CrystalStructure)


# Complex type OxygenContentType with content type ELEMENT_ONLY
class OxygenContentType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type OxygenContentType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'OxygenContentType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1071, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element MaxO2Content uses Python identifier MaxO2Content
    __MaxO2Content = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'MaxO2Content'), 'MaxO2Content', '__AbsentNamespace0_OxygenContentType_MaxO2Content', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1073, 6), )

    
    MaxO2Content = property(__MaxO2Content.value, __MaxO2Content.set, None, None)

    
    # Element O2ContentUnits uses Python identifier O2ContentUnits
    __O2ContentUnits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'O2ContentUnits'), 'O2ContentUnits', '__AbsentNamespace0_OxygenContentType_O2ContentUnits', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1074, 6), )

    
    O2ContentUnits = property(__O2ContentUnits.value, __O2ContentUnits.set, None, None)

    _ElementMap.update({
        __MaxO2Content.name() : __MaxO2Content,
        __O2ContentUnits.name() : __O2ContentUnits
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.OxygenContentType = OxygenContentType
Namespace.addCategoryObject('typeBinding', 'OxygenContentType', OxygenContentType)


# Complex type GasFlowType with content type ELEMENT_ONLY
class GasFlowType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type GasFlowType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'GasFlowType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1085, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element FlowType uses Python identifier FlowType
    __FlowType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FlowType'), 'FlowType', '__AbsentNamespace0_GasFlowType_FlowType', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1087, 6), )

    
    FlowType = property(__FlowType.value, __FlowType.set, None, None)

    
    # Element FlowSpeed uses Python identifier FlowSpeed
    __FlowSpeed = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FlowSpeed'), 'FlowSpeed', '__AbsentNamespace0_GasFlowType_FlowSpeed', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1096, 6), )

    
    FlowSpeed = property(__FlowSpeed.value, __FlowSpeed.set, None, None)

    
    # Element FlowSpeedUnits uses Python identifier FlowSpeedUnits
    __FlowSpeedUnits = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FlowSpeedUnits'), 'FlowSpeedUnits', '__AbsentNamespace0_GasFlowType_FlowSpeedUnits', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1097, 6), )

    
    FlowSpeedUnits = property(__FlowSpeedUnits.value, __FlowSpeedUnits.set, None, None)

    
    # Element FlowDirection uses Python identifier FlowDirection
    __FlowDirection = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'FlowDirection'), 'FlowDirection', '__AbsentNamespace0_GasFlowType_FlowDirection', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1098, 6), )

    
    FlowDirection = property(__FlowDirection.value, __FlowDirection.set, None, None)

    _ElementMap.update({
        __FlowType.name() : __FlowType,
        __FlowSpeed.name() : __FlowSpeed,
        __FlowSpeedUnits.name() : __FlowSpeedUnits,
        __FlowDirection.name() : __FlowDirection
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.GasFlowType = GasFlowType
Namespace.addCategoryObject('typeBinding', 'GasFlowType', GasFlowType)


# Complex type PowderSizeDistribution with content type ELEMENT_ONLY
class PowderSizeDistribution (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PowderSizeDistribution with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowderSizeDistribution')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1108, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element powderSize uses Python identifier powderSize
    __powderSize = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'powderSize'), 'powderSize', '__AbsentNamespace0_PowderSizeDistribution_powderSize', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1110, 6), )

    
    powderSize = property(__powderSize.value, __powderSize.set, None, None)

    _ElementMap.update({
        __powderSize.name() : __powderSize
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PowderSizeDistribution = PowderSizeDistribution
Namespace.addCategoryObject('typeBinding', 'PowderSizeDistribution', PowderSizeDistribution)


# Complex type PowderSize with content type ELEMENT_ONLY
class PowderSize (pyxb.binding.basis.complexTypeDefinition):
    """Complex type PowderSize with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowderSize')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1114, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element diameterQuantile uses Python identifier diameterQuantile
    __diameterQuantile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'diameterQuantile'), 'diameterQuantile', '__AbsentNamespace0_PowderSize_diameterQuantile', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1116, 6), )

    
    diameterQuantile = property(__diameterQuantile.value, __diameterQuantile.set, None, None)

    
    # Element diameter uses Python identifier diameter
    __diameter = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'diameter'), 'diameter', '__AbsentNamespace0_PowderSize_diameter', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1117, 6), )

    
    diameter = property(__diameter.value, __diameter.set, None, None)

    
    # Element diameterUnit uses Python identifier diameterUnit
    __diameterUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'diameterUnit'), 'diameterUnit', '__AbsentNamespace0_PowderSize_diameterUnit', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1118, 6), )

    
    diameterUnit = property(__diameterUnit.value, __diameterUnit.set, None, None)

    _ElementMap.update({
        __diameterQuantile.name() : __diameterQuantile,
        __diameter.name() : __diameter,
        __diameterUnit.name() : __diameterUnit
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PowderSize = PowderSize
Namespace.addCategoryObject('typeBinding', 'PowderSize', PowderSize)


# Complex type LengthType with content type ELEMENT_ONLY
class LengthType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type LengthType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LengthType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1169, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element lenghtQuanity uses Python identifier lenghtQuanity
    __lenghtQuanity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'lenghtQuanity'), 'lenghtQuanity', '__AbsentNamespace0_LengthType_lenghtQuanity', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1171, 6), )

    
    lenghtQuanity = property(__lenghtQuanity.value, __lenghtQuanity.set, None, None)

    
    # Element lengthUnit uses Python identifier lengthUnit
    __lengthUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'lengthUnit'), 'lengthUnit', '__AbsentNamespace0_LengthType_lengthUnit', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1172, 6), )

    
    lengthUnit = property(__lengthUnit.value, __lengthUnit.set, None, None)

    
    # Element uncertainty uses Python identifier uncertainty
    __uncertainty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uncertainty'), 'uncertainty', '__AbsentNamespace0_LengthType_uncertainty', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1173, 6), )

    
    uncertainty = property(__uncertainty.value, __uncertainty.set, None, None)

    _ElementMap.update({
        __lenghtQuanity.name() : __lenghtQuanity,
        __lengthUnit.name() : __lengthUnit,
        __uncertainty.name() : __uncertainty
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LengthType = LengthType
Namespace.addCategoryObject('typeBinding', 'LengthType', LengthType)


# Complex type TemperatureType with content type ELEMENT_ONLY
class TemperatureType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type TemperatureType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TemperatureType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1176, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element temperature uses Python identifier temperature
    __temperature = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'temperature'), 'temperature', '__AbsentNamespace0_TemperatureType_temperature', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1178, 6), )

    
    temperature = property(__temperature.value, __temperature.set, None, None)

    
    # Element unit uses Python identifier unit
    __unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'unit'), 'unit', '__AbsentNamespace0_TemperatureType_unit', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1179, 6), )

    
    unit = property(__unit.value, __unit.set, None, None)

    
    # Element uncertainty uses Python identifier uncertainty
    __uncertainty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uncertainty'), 'uncertainty', '__AbsentNamespace0_TemperatureType_uncertainty', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1180, 6), )

    
    uncertainty = property(__uncertainty.value, __uncertainty.set, None, None)

    _ElementMap.update({
        __temperature.name() : __temperature,
        __unit.name() : __unit,
        __uncertainty.name() : __uncertainty
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TemperatureType = TemperatureType
Namespace.addCategoryObject('typeBinding', 'TemperatureType', TemperatureType)


# Complex type TimeType with content type ELEMENT_ONLY
class TimeType (pyxb.binding.basis.complexTypeDefinition):
    """Complex type TimeType with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'TimeType')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1183, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element duration uses Python identifier duration
    __duration = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'duration'), 'duration', '__AbsentNamespace0_TimeType_duration', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1185, 6), )

    
    duration = property(__duration.value, __duration.set, None, None)

    
    # Element unit uses Python identifier unit
    __unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'unit'), 'unit', '__AbsentNamespace0_TimeType_unit', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1186, 6), )

    
    unit = property(__unit.value, __unit.set, None, None)

    
    # Element uncertainty uses Python identifier uncertainty
    __uncertainty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uncertainty'), 'uncertainty', '__AbsentNamespace0_TimeType_uncertainty', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1187, 6), )

    
    uncertainty = property(__uncertainty.value, __uncertainty.set, None, None)

    _ElementMap.update({
        __duration.name() : __duration,
        __unit.name() : __unit,
        __uncertainty.name() : __uncertainty
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.TimeType = TimeType
Namespace.addCategoryObject('typeBinding', 'TimeType', TimeType)


# Complex type Volume with content type ELEMENT_ONLY
class Volume (pyxb.binding.basis.complexTypeDefinition):
    """Complex type Volume with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Volume')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1191, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element length uses Python identifier length
    __length = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'length'), 'length', '__AbsentNamespace0_Volume_length', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1193, 6), )

    
    length = property(__length.value, __length.set, None, None)

    
    # Element width uses Python identifier width
    __width = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'width'), 'width', '__AbsentNamespace0_Volume_width', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1194, 6), )

    
    width = property(__width.value, __width.set, None, None)

    
    # Element height uses Python identifier height
    __height = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'height'), 'height', '__AbsentNamespace0_Volume_height', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1195, 6), )

    
    height = property(__height.value, __height.set, None, None)

    _ElementMap.update({
        __length.name() : __length,
        __width.name() : __width,
        __height.name() : __height
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Volume = Volume
Namespace.addCategoryObject('typeBinding', 'Volume', Volume)


# Complex type physical-quantity-type with content type ELEMENT_ONLY
class physical_quantity_type (pyxb.binding.basis.complexTypeDefinition):
    """Complex type physical-quantity-type with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'physical-quantity-type')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1209, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__AbsentNamespace0_physical_quantity_type_value', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1211, 6), )

    
    value_ = property(__value.value, __value.set, None, None)

    
    # Element unit uses Python identifier unit
    __unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'unit'), 'unit', '__AbsentNamespace0_physical_quantity_type_unit', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1212, 6), )

    
    unit = property(__unit.value, __unit.set, None, None)

    
    # Element uncertainty uses Python identifier uncertainty
    __uncertainty = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'uncertainty'), 'uncertainty', '__AbsentNamespace0_physical_quantity_type_uncertainty', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1213, 6), )

    
    uncertainty = property(__uncertainty.value, __uncertainty.set, None, None)

    _ElementMap.update({
        __value.name() : __value,
        __unit.name() : __unit,
        __uncertainty.name() : __uncertainty
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.physical_quantity_type = physical_quantity_type
Namespace.addCategoryObject('typeBinding', 'physical-quantity-type', physical_quantity_type)


# Complex type Range with content type ELEMENT_ONLY
class Range (pyxb.binding.basis.complexTypeDefinition):
    """Complex type Range with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Range')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1217, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element min uses Python identifier min
    __min = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'min'), 'min', '__AbsentNamespace0_Range_min', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1219, 6), )

    
    min = property(__min.value, __min.set, None, None)

    
    # Element max uses Python identifier max
    __max = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'max'), 'max', '__AbsentNamespace0_Range_max', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1220, 6), )

    
    max = property(__max.value, __max.set, None, None)

    
    # Element unit uses Python identifier unit
    __unit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'unit'), 'unit', '__AbsentNamespace0_Range_unit', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1221, 6), )

    
    unit = property(__unit.value, __unit.set, None, None)

    _ElementMap.update({
        __min.name() : __min,
        __max.name() : __max,
        __unit.name() : __unit
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Range = Range
Namespace.addCategoryObject('typeBinding', 'Range', Range)


# Complex type Uncertainty with content type ELEMENT_ONLY
class Uncertainty (pyxb.binding.basis.complexTypeDefinition):
    """Complex type Uncertainty with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Uncertainty')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1225, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_Uncertainty_type', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1227, 6), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element value uses Python identifier value_
    __value = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'value'), 'value_', '__AbsentNamespace0_Uncertainty_value', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1235, 6), )

    
    value_ = property(__value.value, __value.set, None, None)

    _ElementMap.update({
        __type.name() : __type,
        __value.name() : __value
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Uncertainty = Uncertainty
Namespace.addCategoryObject('typeBinding', 'Uncertainty', Uncertainty)


# Complex type Note with content type ELEMENT_ONLY
class Note (pyxb.binding.basis.complexTypeDefinition):
    """Complex type Note with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Note')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1248, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'title'), 'title', '__AbsentNamespace0_Note_title', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1250, 6), )

    
    title = property(__title.value, __title.set, None, None)

    
    # Element date uses Python identifier date
    __date = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'date'), 'date', '__AbsentNamespace0_Note_date', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1251, 6), )

    
    date = property(__date.value, __date.set, None, None)

    
    # Element text uses Python identifier text
    __text = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'text'), 'text', '__AbsentNamespace0_Note_text', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1252, 6), )

    
    text = property(__text.value, __text.set, None, None)

    
    # Element digitalArtifact uses Python identifier digitalArtifact
    __digitalArtifact = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'digitalArtifact'), 'digitalArtifact', '__AbsentNamespace0_Note_digitalArtifact', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1253, 6), )

    
    digitalArtifact = property(__digitalArtifact.value, __digitalArtifact.set, None, None)

    _ElementMap.update({
        __title.name() : __title,
        __date.name() : __date,
        __text.name() : __text,
        __digitalArtifact.name() : __digitalArtifact
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Note = Note
Namespace.addCategoryObject('typeBinding', 'Note', Note)


# Complex type DigitalArtifact with content type ELEMENT_ONLY
class DigitalArtifact (pyxb.binding.basis.complexTypeDefinition):
    """Complex type DigitalArtifact with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DigitalArtifact')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1257, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element identifier uses Python identifier identifier
    __identifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'identifier'), 'identifier', '__AbsentNamespace0_DigitalArtifact_identifier', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1259, 6), )

    
    identifier = property(__identifier.value, __identifier.set, None, None)

    
    # Element title uses Python identifier title
    __title = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'title'), 'title', '__AbsentNamespace0_DigitalArtifact_title', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1260, 6), )

    
    title = property(__title.value, __title.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__AbsentNamespace0_DigitalArtifact_description', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1261, 6), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_DigitalArtifact_type', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1262, 6), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element format uses Python identifier format
    __format = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'format'), 'format', '__AbsentNamespace0_DigitalArtifact_format', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1263, 6), )

    
    format = property(__format.value, __format.set, None, None)

    
    # Element comment uses Python identifier comment
    __comment = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'comment'), 'comment', '__AbsentNamespace0_DigitalArtifact_comment', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1264, 6), )

    
    comment = property(__comment.value, __comment.set, None, None)

    
    # Element accessURL uses Python identifier accessURL
    __accessURL = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'accessURL'), 'accessURL', '__AbsentNamespace0_DigitalArtifact_accessURL', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1265, 6), )

    
    accessURL = property(__accessURL.value, __accessURL.set, None, 'URL providing direct access to a downloadable file of a dataset.\n          ')

    _ElementMap.update({
        __identifier.name() : __identifier,
        __title.name() : __title,
        __description.name() : __description,
        __type.name() : __type,
        __format.name() : __format,
        __comment.name() : __comment,
        __accessURL.name() : __accessURL
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DigitalArtifact = DigitalArtifact
Namespace.addCategoryObject('typeBinding', 'DigitalArtifact', DigitalArtifact)


# Complex type AMBlobReference with content type ELEMENT_ONLY
class AMBlobReference (pyxb.binding.basis.complexTypeDefinition):
    """
        reference to an AMBlob document. Contains the handle and checksum of the actual blob.
        also informaiton about usage of the blob can be added here
      """
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AMBlobReference')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1292, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element handle uses Python identifier handle
    __handle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'handle'), 'handle', '__AbsentNamespace0_AMBlobReference_handle', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1300, 6), )

    
    handle = property(__handle.value, __handle.set, None, '\n            handle of the blob, also part of the AMDoc/AMBlob document.\n          ')

    
    # Element checksum uses Python identifier checksum
    __checksum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'checksum'), 'checksum', '__AbsentNamespace0_AMBlobReference_checksum', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1307, 6), )

    
    checksum = property(__checksum.value, __checksum.set, None, '\n            MD5 checksum of the referenced image.\n          ')

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__AbsentNamespace0_AMBlobReference_description', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1314, 6), )

    
    description = property(__description.value, __description.set, None, '\n            MD5 checksum of the referenced image.\n          ')

    _ElementMap.update({
        __handle.name() : __handle,
        __checksum.name() : __checksum,
        __description.name() : __description
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AMBlobReference = AMBlobReference
Namespace.addCategoryObject('typeBinding', 'AMBlobReference', AMBlobReference)


# Complex type Blob with content type ELEMENT_ONLY
class Blob (pyxb.binding.basis.complexTypeDefinition):
    """Complex type Blob with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Blob')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1324, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element handle uses Python identifier handle
    __handle = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'handle'), 'handle', '__AbsentNamespace0_Blob_handle', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1326, 6), )

    
    handle = property(__handle.value, __handle.set, None, 'Handle assigned by CDCS to retrieve the blob.')

    
    # Element checksum uses Python identifier checksum
    __checksum = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'checksum'), 'checksum', '__AbsentNamespace0_Blob_checksum', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1331, 6), )

    
    checksum = property(__checksum.value, __checksum.set, None, 'MD5 checksum of the blob bytes. Must be provided to be able to check whether this image was\n            already loaded.')

    
    # Element cdcsPID uses Python identifier cdcsPID
    __cdcsPID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'cdcsPID'), 'cdcsPID', '__AbsentNamespace0_Blob_cdcsPID', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1337, 6), )

    
    cdcsPID = property(__cdcsPID.value, __cdcsPID.set, None, None)

    
    # Element format uses Python identifier format
    __format = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'format'), 'format', '__AbsentNamespace0_Blob_format', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1338, 6), )

    
    format = property(__format.value, __format.set, None, None)

    _ElementMap.update({
        __handle.name() : __handle,
        __checksum.name() : __checksum,
        __cdcsPID.name() : __cdcsPID,
        __format.name() : __format
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Blob = Blob
Namespace.addCategoryObject('typeBinding', 'Blob', Blob)


# Complex type Table with content type ELEMENT_ONLY
class Table (pyxb.binding.basis.complexTypeDefinition):
    """Complex type Table with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Table')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1342, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element headers uses Python identifier headers
    __headers = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'headers'), 'headers', '__AbsentNamespace0_Table_headers', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1344, 6), )

    
    headers = property(__headers.value, __headers.set, None, None)

    
    # Element rows uses Python identifier rows
    __rows = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'rows'), 'rows', '__AbsentNamespace0_Table_rows', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1345, 6), )

    
    rows = property(__rows.value, __rows.set, None, None)

    
    # Attribute name uses Python identifier name
    __name = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__AbsentNamespace0_Table_name', pyxb.binding.datatypes.string)
    __name._DeclarationLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1347, 4)
    __name._UseLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1347, 4)
    
    name = property(__name.value, __name.set, None, None)

    _ElementMap.update({
        __headers.name() : __headers,
        __rows.name() : __rows
    })
    _AttributeMap.update({
        __name.name() : __name
    })
_module_typeBindings.Table = Table
Namespace.addCategoryObject('typeBinding', 'Table', Table)


# Complex type Headers with content type ELEMENT_ONLY
class Headers (pyxb.binding.basis.complexTypeDefinition):
    """Complex type Headers with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Headers')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1349, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element column uses Python identifier column
    __column = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'column'), 'column', '__AbsentNamespace0_Headers_column', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1351, 6), )

    
    column = property(__column.value, __column.set, None, None)

    _ElementMap.update({
        __column.name() : __column
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Headers = Headers
Namespace.addCategoryObject('typeBinding', 'Headers', Headers)


# Complex type Rows with content type ELEMENT_ONLY
class Rows (pyxb.binding.basis.complexTypeDefinition):
    """Complex type Rows with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Rows')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1354, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element row uses Python identifier row
    __row = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'row'), 'row', '__AbsentNamespace0_Rows_row', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1356, 6), )

    
    row = property(__row.value, __row.set, None, None)

    _ElementMap.update({
        __row.name() : __row
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Rows = Rows
Namespace.addCategoryObject('typeBinding', 'Rows', Rows)


# Complex type Row with content type ELEMENT_ONLY
class Row (pyxb.binding.basis.complexTypeDefinition):
    """Complex type Row with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Row')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1361, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element column uses Python identifier column
    __column = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'column'), 'column', '__AbsentNamespace0_Row_column', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1363, 6), )

    
    column = property(__column.value, __column.set, None, None)

    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__AbsentNamespace0_Row_id', pyxb.binding.datatypes.string, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1365, 4)
    __id._UseLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1365, 4)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        __column.name() : __column
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.Row = Row
Namespace.addCategoryObject('typeBinding', 'Row', Row)


# Complex type Column with content type SIMPLE
class Column (pyxb.binding.basis.complexTypeDefinition):
    """Complex type Column with content type SIMPLE"""
    _TypeDefinition = pyxb.binding.datatypes.string
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_SIMPLE
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Column')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1368, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.string
    
    # Attribute id uses Python identifier id
    __id = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'id'), 'id', '__AbsentNamespace0_Column_id', pyxb.binding.datatypes.string, required=True)
    __id._DeclarationLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1371, 8)
    __id._UseLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1371, 8)
    
    id = property(__id.value, __id.set, None, None)

    _ElementMap.update({
        
    })
    _AttributeMap.update({
        __id.name() : __id
    })
_module_typeBindings.Column = Column
Namespace.addCategoryObject('typeBinding', 'Column', Column)


# Complex type Person with content type ELEMENT_ONLY
class Person (pyxb.binding.basis.complexTypeDefinition):
    """Complex type Person with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Person')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1376, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__AbsentNamespace0_Person_name', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1378, 6), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element email uses Python identifier email
    __email = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'email'), 'email', '__AbsentNamespace0_Person_email', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1379, 6), )

    
    email = property(__email.value, __email.set, None, None)

    
    # Element orcid uses Python identifier orcid
    __orcid = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'orcid'), 'orcid', '__AbsentNamespace0_Person_orcid', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1380, 6), )

    
    orcid = property(__orcid.value, __orcid.set, None, None)

    
    # Element location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'location'), 'location', '__AbsentNamespace0_Person_location', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1381, 6), )

    
    location = property(__location.value, __location.set, None, None)

    
    # Element phone uses Python identifier phone
    __phone = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'phone'), 'phone', '__AbsentNamespace0_Person_phone', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1382, 6), )

    
    phone = property(__phone.value, __phone.set, None, None)

    
    # Element affiliation uses Python identifier affiliation
    __affiliation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'affiliation'), 'affiliation', '__AbsentNamespace0_Person_affiliation', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1383, 6), )

    
    affiliation = property(__affiliation.value, __affiliation.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __email.name() : __email,
        __orcid.name() : __orcid,
        __location.name() : __location,
        __phone.name() : __phone,
        __affiliation.name() : __affiliation
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Person = Person
Namespace.addCategoryObject('typeBinding', 'Person', Person)


# Complex type Contributor with content type ELEMENT_ONLY
class Contributor (pyxb.binding.basis.complexTypeDefinition):
    """Complex type Contributor with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Contributor')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1387, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element person uses Python identifier person
    __person = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'person'), 'person', '__AbsentNamespace0_Contributor_person', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1389, 6), )

    
    person = property(__person.value, __person.set, None, None)

    
    # Element role uses Python identifier role
    __role = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'role'), 'role', '__AbsentNamespace0_Contributor_role', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1390, 6), )

    
    role = property(__role.value, __role.set, None, '')

    _ElementMap.update({
        __person.name() : __person,
        __role.name() : __role
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Contributor = Contributor
Namespace.addCategoryObject('typeBinding', 'Contributor', Contributor)


# Complex type Sensor with content type ELEMENT_ONLY
class Sensor (pyxb.binding.basis.complexTypeDefinition):
    """Complex type Sensor with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Sensor')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1418, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__AbsentNamespace0_Sensor_name', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1420, 6), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element description uses Python identifier description
    __description = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'description'), 'description', '__AbsentNamespace0_Sensor_description', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1421, 6), )

    
    description = property(__description.value, __description.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_Sensor_type', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1422, 6), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element manufacturer uses Python identifier manufacturer
    __manufacturer = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'manufacturer'), 'manufacturer', '__AbsentNamespace0_Sensor_manufacturer', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1423, 6), )

    
    manufacturer = property(__manufacturer.value, __manufacturer.set, None, None)

    
    # Element model uses Python identifier model
    __model = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'model'), 'model', '__AbsentNamespace0_Sensor_model', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1424, 6), )

    
    model = property(__model.value, __model.set, None, None)

    
    # Element identifier uses Python identifier identifier
    __identifier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'identifier'), 'identifier', '__AbsentNamespace0_Sensor_identifier', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1425, 6), )

    
    identifier = property(__identifier.value, __identifier.set, None, None)

    
    # Element calibrationDate uses Python identifier calibrationDate
    __calibrationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'calibrationDate'), 'calibrationDate', '__AbsentNamespace0_Sensor_calibrationDate', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1426, 6), )

    
    calibrationDate = property(__calibrationDate.value, __calibrationDate.set, None, None)

    
    # Element range uses Python identifier range
    __range = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'range'), 'range', '__AbsentNamespace0_Sensor_range', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1427, 6), )

    
    range = property(__range.value, __range.set, None, None)

    
    # Element accuracy uses Python identifier accuracy
    __accuracy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'accuracy'), 'accuracy', '__AbsentNamespace0_Sensor_accuracy', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1428, 6), )

    
    accuracy = property(__accuracy.value, __accuracy.set, None, None)

    
    # Element accuracyClass uses Python identifier accuracyClass
    __accuracyClass = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'accuracyClass'), 'accuracyClass', '__AbsentNamespace0_Sensor_accuracyClass', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1429, 6), )

    
    accuracyClass = property(__accuracyClass.value, __accuracyClass.set, None, None)

    
    # Element specializedMetadata uses Python identifier specializedMetadata
    __specializedMetadata = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'specializedMetadata'), 'specializedMetadata', '__AbsentNamespace0_Sensor_specializedMetadata', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1430, 6), )

    
    specializedMetadata = property(__specializedMetadata.value, __specializedMetadata.set, None, None)

    _ElementMap.update({
        __name.name() : __name,
        __description.name() : __description,
        __type.name() : __type,
        __manufacturer.name() : __manufacturer,
        __model.name() : __model,
        __identifier.name() : __identifier,
        __calibrationDate.name() : __calibrationDate,
        __range.name() : __range,
        __accuracy.name() : __accuracy,
        __accuracyClass.name() : __accuracyClass,
        __specializedMetadata.name() : __specializedMetadata
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Sensor = Sensor
Namespace.addCategoryObject('typeBinding', 'Sensor', Sensor)


# Complex type Composition with content type ELEMENT_ONLY
class Composition (pyxb.binding.basis.complexTypeDefinition):
    """Complex type Composition with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Composition')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1436, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element Constituents uses Python identifier Constituents
    __Constituents = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'Constituents'), 'Constituents', '__AbsentNamespace0_Composition_Constituents', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1438, 6), )

    
    Constituents = property(__Constituents.value, __Constituents.set, None, None)

    
    # Element quantityUnit uses Python identifier quantityUnit
    __quantityUnit = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quantityUnit'), 'quantityUnit', '__AbsentNamespace0_Composition_quantityUnit', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1439, 6), )

    
    quantityUnit = property(__quantityUnit.value, __quantityUnit.set, None, None)

    _ElementMap.update({
        __Constituents.name() : __Constituents,
        __quantityUnit.name() : __quantityUnit
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Composition = Composition
Namespace.addCategoryObject('typeBinding', 'Composition', Composition)


# Complex type Constituents with content type ELEMENT_ONLY
class Constituents (pyxb.binding.basis.complexTypeDefinition):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Constituents')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1443, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element constituent uses Python identifier constituent
    __constituent = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'constituent'), 'constituent', '__AbsentNamespace0_Constituents_constituent', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1450, 6), )

    
    constituent = property(__constituent.value, __constituent.set, None, None)

    _ElementMap.update({
        __constituent.name() : __constituent
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Constituents = Constituents
Namespace.addCategoryObject('typeBinding', 'Constituents', Constituents)


# Complex type ConstituentMaterial with content type ELEMENT_ONLY
class ConstituentMaterial (pyxb.binding.basis.complexTypeDefinition):
    """Complex type ConstituentMaterial with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConstituentMaterial')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1454, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element element uses Python identifier element
    __element = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'element'), 'element', '__AbsentNamespace0_ConstituentMaterial_element', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1456, 6), )

    
    element = property(__element.value, __element.set, None, None)

    
    # Element quantity uses Python identifier quantity
    __quantity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'quantity'), 'quantity', '__AbsentNamespace0_ConstituentMaterial_quantity', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1457, 6), )

    
    quantity = property(__quantity.value, __quantity.set, None, None)

    
    # Element purity uses Python identifier purity
    __purity = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'purity'), 'purity', '__AbsentNamespace0_ConstituentMaterial_purity', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1458, 6), )

    
    purity = property(__purity.value, __purity.set, None, None)

    
    # Element error uses Python identifier error
    __error = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'error'), 'error', '__AbsentNamespace0_ConstituentMaterial_error', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1459, 6), )

    
    error = property(__error.value, __error.set, None, None)

    _ElementMap.update({
        __element.name() : __element,
        __quantity.name() : __quantity,
        __purity.name() : __purity,
        __error.name() : __error
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ConstituentMaterial = ConstituentMaterial
Namespace.addCategoryObject('typeBinding', 'ConstituentMaterial', ConstituentMaterial)


# Complex type PhysicalArtifact with content type ELEMENT_ONLY
class PhysicalArtifact (AMResource):
    """Complex type PhysicalArtifact with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PhysicalArtifact')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 6, 2)
    _ElementMap = AMResource._ElementMap.copy()
    _AttributeMap = AMResource._AttributeMap.copy()
    # Base type is AMResource
    
    # Element creationDate uses Python identifier creationDate
    __creationDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'creationDate'), 'creationDate', '__AbsentNamespace0_PhysicalArtifact_creationDate', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 10, 10), )

    
    creationDate = property(__creationDate.value, __creationDate.set, None, '')

    
    # Element location uses Python identifier location
    __location = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'location'), 'location', '__AbsentNamespace0_PhysicalArtifact_location', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 17, 10), )

    
    location = property(__location.value, __location.set, None, '')

    
    # Element processingSteps uses Python identifier processingSteps
    __processingSteps = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'processingSteps'), 'processingSteps', '__AbsentNamespace0_PhysicalArtifact_processingSteps', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 24, 10), )

    
    processingSteps = property(__processingSteps.value, __processingSteps.set, None, None)

    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    _ElementMap.update({
        __creationDate.name() : __creationDate,
        __location.name() : __location,
        __processingSteps.name() : __processingSteps
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PhysicalArtifact = PhysicalArtifact
Namespace.addCategoryObject('typeBinding', 'PhysicalArtifact', PhysicalArtifact)


# Complex type AMSample with content type ELEMENT_ONLY
class AMSample (pyxb.binding.basis.complexTypeDefinition):
    """Complex type AMSample with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AMSample')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 348, 2)
    _ElementMap = {}
    _AttributeMap = {}
    # Base type is pyxb.binding.datatypes.anyType
    
    # Element SampleID uses Python identifier SampleID
    __SampleID = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SampleID'), 'SampleID', '__AbsentNamespace0_AMSample_SampleID', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 350, 6), )

    
    SampleID = property(__SampleID.value, __SampleID.set, None, None)

    
    # Element AM2022BuildPlate uses Python identifier AM2022BuildPlate
    __AM2022BuildPlate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'AM2022BuildPlate'), 'AM2022BuildPlate', '__AbsentNamespace0_AMSample_AM2022BuildPlate', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 351, 6), )

    
    AM2022BuildPlate = property(__AM2022BuildPlate.value, __AM2022BuildPlate.set, None, None)

    
    # Element RelatedSamples uses Python identifier RelatedSamples
    __RelatedSamples = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'RelatedSamples'), 'RelatedSamples', '__AbsentNamespace0_AMSample_RelatedSamples', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 359, 6), )

    
    RelatedSamples = property(__RelatedSamples.value, __RelatedSamples.set, None, None)

    
    # Element SampleImage uses Python identifier SampleImage
    __SampleImage = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SampleImage'), 'SampleImage', '__AbsentNamespace0_AMSample_SampleImage', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 367, 6), )

    
    SampleImage = property(__SampleImage.value, __SampleImage.set, None, None)

    
    # Element SampleLocation uses Python identifier SampleLocation
    __SampleLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SampleLocation'), 'SampleLocation', '__AbsentNamespace0_AMSample_SampleLocation', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 369, 6), )

    
    SampleLocation = property(__SampleLocation.value, __SampleLocation.set, None, None)

    
    # Element SamplePreparation uses Python identifier SamplePreparation
    __SamplePreparation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SamplePreparation'), 'SamplePreparation', '__AbsentNamespace0_AMSample_SamplePreparation', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 371, 6), )

    
    SamplePreparation = property(__SamplePreparation.value, __SamplePreparation.set, None, None)

    
    # Element SamplePurpose uses Python identifier SamplePurpose
    __SamplePurpose = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SamplePurpose'), 'SamplePurpose', '__AbsentNamespace0_AMSample_SamplePurpose', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 372, 6), )

    
    SamplePurpose = property(__SamplePurpose.value, __SamplePurpose.set, None, None)

    
    # Element SampleNote uses Python identifier SampleNote
    __SampleNote = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'SampleNote'), 'SampleNote', '__AbsentNamespace0_AMSample_SampleNote', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 393, 6), )

    
    SampleNote = property(__SampleNote.value, __SampleNote.set, None, None)

    
    # Element PrintingNotes uses Python identifier PrintingNotes
    __PrintingNotes = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'PrintingNotes'), 'PrintingNotes', '__AbsentNamespace0_AMSample_PrintingNotes', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 394, 6), )

    
    PrintingNotes = property(__PrintingNotes.value, __PrintingNotes.set, None, None)

    
    # Attribute persistid uses Python identifier persistid
    __persistid = pyxb.binding.content.AttributeUse(pyxb.namespace.ExpandedName(None, 'persistid'), 'persistid', '__AbsentNamespace0_AMSample_persistid', _module_typeBindings.STD_ANON_)
    __persistid._DeclarationLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 396, 4)
    __persistid._UseLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 396, 4)
    
    persistid = property(__persistid.value, __persistid.set, None, None)

    _ElementMap.update({
        __SampleID.name() : __SampleID,
        __AM2022BuildPlate.name() : __AM2022BuildPlate,
        __RelatedSamples.name() : __RelatedSamples,
        __SampleImage.name() : __SampleImage,
        __SampleLocation.name() : __SampleLocation,
        __SamplePreparation.name() : __SamplePreparation,
        __SamplePurpose.name() : __SamplePurpose,
        __SampleNote.name() : __SampleNote,
        __PrintingNotes.name() : __PrintingNotes
    })
    _AttributeMap.update({
        __persistid.name() : __persistid
    })
_module_typeBindings.AMSample = AMSample
Namespace.addCategoryObject('typeBinding', 'AMSample', AMSample)


# Complex type ConfigurationObject with content type ELEMENT_ONLY
class ConfigurationObject (ObjectType):
    """Complex type ConfigurationObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ConfigurationObject')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 77, 2)
    _ElementMap = ObjectType._ElementMap.copy()
    _AttributeMap = ObjectType._AttributeMap.copy()
    # Base type is ObjectType
    
    # Element associatedInstrument uses Python identifier associatedInstrument
    __associatedInstrument = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'associatedInstrument'), 'associatedInstrument', '__AbsentNamespace0_ConfigurationObject_associatedInstrument', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 81, 10), )

    
    associatedInstrument = property(__associatedInstrument.value, __associatedInstrument.set, None, None)

    
    # Element name (name) inherited from ObjectType
    
    # Element description (description) inherited from ObjectType
    
    # Element field (field) inherited from ObjectType
    _ElementMap.update({
        __associatedInstrument.name() : __associatedInstrument
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ConfigurationObject = ConfigurationObject
Namespace.addCategoryObject('typeBinding', 'ConfigurationObject', ConfigurationObject)


# Complex type DataObject with content type ELEMENT_ONLY
class DataObject (ObjectType):
    """Complex type DataObject with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DataObject')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 99, 2)
    _ElementMap = ObjectType._ElementMap.copy()
    _AttributeMap = ObjectType._AttributeMap.copy()
    # Base type is ObjectType
    
    # Element measuredBy uses Python identifier measuredBy
    __measuredBy = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'measuredBy'), 'measuredBy', '__AbsentNamespace0_DataObject_measuredBy', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 103, 10), )

    
    measuredBy = property(__measuredBy.value, __measuredBy.set, None, None)

    
    # Element name (name) inherited from ObjectType
    
    # Element description (description) inherited from ObjectType
    
    # Element field (field) inherited from ObjectType
    _ElementMap.update({
        __measuredBy.name() : __measuredBy
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DataObject = DataObject
Namespace.addCategoryObject('typeBinding', 'DataObject', DataObject)


# Complex type AMActivity with content type ELEMENT_ONLY
class AMActivity (AMResource):
    """Complex type AMActivity with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AMActivity')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 67, 2)
    _ElementMap = AMResource._ElementMap.copy()
    _AttributeMap = AMResource._AttributeMap.copy()
    # Base type is AMResource
    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    
    # Element startDate uses Python identifier startDate
    __startDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'startDate'), 'startDate', '__AbsentNamespace0_AMActivity_startDate', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10), )

    
    startDate = property(__startDate.value, __startDate.set, None, None)

    
    # Element completeDate uses Python identifier completeDate
    __completeDate = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'completeDate'), 'completeDate', '__AbsentNamespace0_AMActivity_completeDate', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10), )

    
    completeDate = property(__completeDate.value, __completeDate.set, None, None)

    _ElementMap.update({
        __startDate.name() : __startDate,
        __completeDate.name() : __completeDate
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AMActivity = AMActivity
Namespace.addCategoryObject('typeBinding', 'AMActivity', AMActivity)


# Complex type parameter-type with content type ELEMENT_ONLY
class parameter_type (physical_quantity_type):
    """Complex type parameter-type with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'parameter-type')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1200, 2)
    _ElementMap = physical_quantity_type._ElementMap.copy()
    _AttributeMap = physical_quantity_type._AttributeMap.copy()
    # Base type is physical_quantity_type
    
    # Element name uses Python identifier name
    __name = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'name'), 'name', '__AbsentNamespace0_parameter_type_name', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1204, 10), )

    
    name = property(__name.value, __name.set, None, None)

    
    # Element value_ (value) inherited from physical-quantity-type
    
    # Element unit (unit) inherited from physical-quantity-type
    
    # Element uncertainty (uncertainty) inherited from physical-quantity-type
    _ElementMap.update({
        __name.name() : __name
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.parameter_type = parameter_type
Namespace.addCategoryObject('typeBinding', 'parameter-type', parameter_type)


# Complex type Instrument with content type ELEMENT_ONLY
class Instrument (AMResource):
    """Complex type Instrument with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Instrument')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1402, 2)
    _ElementMap = AMResource._ElementMap.copy()
    _AttributeMap = AMResource._AttributeMap.copy()
    # Base type is AMResource
    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    
    # Element model uses Python identifier model
    __model = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'model'), 'model', '__AbsentNamespace0_Instrument_model', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1407, 10), )

    
    model = property(__model.value, __model.set, None, None)

    
    # Element physicalLocation uses Python identifier physicalLocation
    __physicalLocation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'physicalLocation'), 'physicalLocation', '__AbsentNamespace0_Instrument_physicalLocation', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1408, 10), )

    
    physicalLocation = property(__physicalLocation.value, __physicalLocation.set, None, None)

    
    # Element instrumentMetadata uses Python identifier instrumentMetadata
    __instrumentMetadata = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'instrumentMetadata'), 'instrumentMetadata', '__AbsentNamespace0_Instrument_instrumentMetadata', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1409, 10), )

    
    instrumentMetadata = property(__instrumentMetadata.value, __instrumentMetadata.set, None, None)

    
    # Element detector uses Python identifier detector
    __detector = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'detector'), 'detector', '__AbsentNamespace0_Instrument_detector', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1410, 10), )

    
    detector = property(__detector.value, __detector.set, None, None)

    
    # Element sensor uses Python identifier sensor
    __sensor = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'sensor'), 'sensor', '__AbsentNamespace0_Instrument_sensor', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1411, 10), )

    
    sensor = property(__sensor.value, __sensor.set, None, None)

    
    # Element supportingFile uses Python identifier supportingFile
    __supportingFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supportingFile'), 'supportingFile', '__AbsentNamespace0_Instrument_supportingFile', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1412, 10), )

    
    supportingFile = property(__supportingFile.value, __supportingFile.set, None, None)

    _ElementMap.update({
        __model.name() : __model,
        __physicalLocation.name() : __physicalLocation,
        __instrumentMetadata.name() : __instrumentMetadata,
        __detector.name() : __detector,
        __sensor.name() : __sensor,
        __supportingFile.name() : __supportingFile
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Instrument = Instrument
Namespace.addCategoryObject('typeBinding', 'Instrument', Instrument)


# Complex type AMBuildProduct with content type ELEMENT_ONLY
class AMBuildProduct (PhysicalArtifact):
    """Complex type AMBuildProduct with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = True
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AMBuildProduct')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 35, 2)
    _ElementMap = PhysicalArtifact._ElementMap.copy()
    _AttributeMap = PhysicalArtifact._AttributeMap.copy()
    # Base type is PhysicalArtifact
    
    # Element creationDate (creationDate) inherited from PhysicalArtifact
    
    # Element location (location) inherited from PhysicalArtifact
    
    # Element processingSteps (processingSteps) inherited from PhysicalArtifact
    
    # Element benchmarkId uses Python identifier benchmarkId
    __benchmarkId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'benchmarkId'), 'benchmarkId', '__AbsentNamespace0_AMBuildProduct_benchmarkId', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 39, 10), )

    
    benchmarkId = property(__benchmarkId.value, __benchmarkId.set, None, '')

    
    # Element status uses Python identifier status
    __status = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'status'), 'status', '__AbsentNamespace0_AMBuildProduct_status', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 46, 10), )

    
    status = property(__status.value, __status.set, None, '')

    
    # Element purpose uses Python identifier purpose
    __purpose = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'purpose'), 'purpose', '__AbsentNamespace0_AMBuildProduct_purpose', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 53, 10), )

    
    purpose = property(__purpose.value, __purpose.set, None, '')

    
    # Element designDiagram uses Python identifier designDiagram
    __designDiagram = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'designDiagram'), 'designDiagram', '__AbsentNamespace0_AMBuildProduct_designDiagram', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 60, 10), )

    
    designDiagram = property(__designDiagram.value, __designDiagram.set, None, '')

    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    _ElementMap.update({
        __benchmarkId.name() : __benchmarkId,
        __status.name() : __status,
        __purpose.name() : __purpose,
        __designDiagram.name() : __designDiagram
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AMBuildProduct = AMBuildProduct
Namespace.addCategoryObject('typeBinding', 'AMBuildProduct', AMBuildProduct)


# Complex type Powder with content type ELEMENT_ONLY
class Powder (PhysicalArtifact):
    """Complex type Powder with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Powder')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 197, 2)
    _ElementMap = PhysicalArtifact._ElementMap.copy()
    _AttributeMap = PhysicalArtifact._AttributeMap.copy()
    # Base type is PhysicalArtifact
    
    # Element creationDate (creationDate) inherited from PhysicalArtifact
    
    # Element location (location) inherited from PhysicalArtifact
    
    # Element processingSteps (processingSteps) inherited from PhysicalArtifact
    
    # Element supplier uses Python identifier supplier
    __supplier = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'supplier'), 'supplier', '__AbsentNamespace0_Powder_supplier', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 201, 10), )

    
    supplier = property(__supplier.value, __supplier.set, None, None)

    
    # Element lotNumber uses Python identifier lotNumber
    __lotNumber = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'lotNumber'), 'lotNumber', '__AbsentNamespace0_Powder_lotNumber', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 202, 10), )

    
    lotNumber = property(__lotNumber.value, __lotNumber.set, None, None)

    
    # Element alloyPowderType uses Python identifier alloyPowderType
    __alloyPowderType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'alloyPowderType'), 'alloyPowderType', '__AbsentNamespace0_Powder_alloyPowderType', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 203, 10), )

    
    alloyPowderType = property(__alloyPowderType.value, __alloyPowderType.set, None, None)

    
    # Element usageType uses Python identifier usageType
    __usageType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'usageType'), 'usageType', '__AbsentNamespace0_Powder_usageType', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 204, 10), )

    
    usageType = property(__usageType.value, __usageType.set, None, None)

    
    # Element atomizationType uses Python identifier atomizationType
    __atomizationType = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'atomizationType'), 'atomizationType', '__AbsentNamespace0_Powder_atomizationType', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 205, 10), )

    
    atomizationType = property(__atomizationType.value, __atomizationType.set, None, None)

    
    # Element nominalComposition uses Python identifier nominalComposition
    __nominalComposition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nominalComposition'), 'nominalComposition', '__AbsentNamespace0_Powder_nominalComposition', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 206, 10), )

    
    nominalComposition = property(__nominalComposition.value, __nominalComposition.set, None, None)

    
    # Element nominalPowderSizeDistribution uses Python identifier nominalPowderSizeDistribution
    __nominalPowderSizeDistribution = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'nominalPowderSizeDistribution'), 'nominalPowderSizeDistribution', '__AbsentNamespace0_Powder_nominalPowderSizeDistribution', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 207, 10), )

    
    nominalPowderSizeDistribution = property(__nominalPowderSizeDistribution.value, __nominalPowderSizeDistribution.set, None, None)

    
    # Element powderSpecsFile uses Python identifier powderSpecsFile
    __powderSpecsFile = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'powderSpecsFile'), 'powderSpecsFile', '__AbsentNamespace0_Powder_powderSpecsFile', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 208, 10), )

    
    powderSpecsFile = property(__powderSpecsFile.value, __powderSpecsFile.set, None, None)

    
    # Element additionalSupplierInfo uses Python identifier additionalSupplierInfo
    __additionalSupplierInfo = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'additionalSupplierInfo'), 'additionalSupplierInfo', '__AbsentNamespace0_Powder_additionalSupplierInfo', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 209, 10), )

    
    additionalSupplierInfo = property(__additionalSupplierInfo.value, __additionalSupplierInfo.set, None, None)

    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    _ElementMap.update({
        __supplier.name() : __supplier,
        __lotNumber.name() : __lotNumber,
        __alloyPowderType.name() : __alloyPowderType,
        __usageType.name() : __usageType,
        __atomizationType.name() : __atomizationType,
        __nominalComposition.name() : __nominalComposition,
        __nominalPowderSizeDistribution.name() : __nominalPowderSizeDistribution,
        __powderSpecsFile.name() : __powderSpecsFile,
        __additionalSupplierInfo.name() : __additionalSupplierInfo
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Powder = Powder
Namespace.addCategoryObject('typeBinding', 'Powder', Powder)


# Complex type Material with content type ELEMENT_ONLY
class Material (PhysicalArtifact):
    """Complex type Material with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Material')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 215, 2)
    _ElementMap = PhysicalArtifact._ElementMap.copy()
    _AttributeMap = PhysicalArtifact._AttributeMap.copy()
    # Base type is PhysicalArtifact
    
    # Element creationDate (creationDate) inherited from PhysicalArtifact
    
    # Element location (location) inherited from PhysicalArtifact
    
    # Element processingSteps (processingSteps) inherited from PhysicalArtifact
    
    # Element source uses Python identifier source
    __source = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'source'), 'source', '__AbsentNamespace0_Material_source', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 219, 10), )

    
    source = property(__source.value, __source.set, None, None)

    
    # Element type uses Python identifier type
    __type = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'type'), 'type', '__AbsentNamespace0_Material_type', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 220, 10), )

    
    type = property(__type.value, __type.set, None, None)

    
    # Element specifications uses Python identifier specifications
    __specifications = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'specifications'), 'specifications', '__AbsentNamespace0_Material_specifications', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 221, 10), )

    
    specifications = property(__specifications.value, __specifications.set, None, None)

    
    # Element providedCharacterization uses Python identifier providedCharacterization
    __providedCharacterization = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'providedCharacterization'), 'providedCharacterization', '__AbsentNamespace0_Material_providedCharacterization', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 222, 10), )

    
    providedCharacterization = property(__providedCharacterization.value, __providedCharacterization.set, None, None)

    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    _ElementMap.update({
        __source.name() : __source,
        __type.name() : __type,
        __specifications.name() : __specifications,
        __providedCharacterization.name() : __providedCharacterization
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Material = Material
Namespace.addCategoryObject('typeBinding', 'Material', Material)


# Complex type Measurement with content type ELEMENT_ONLY
class Measurement (AMActivity):
    """Complex type Measurement with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Measurement')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 11, 2)
    _ElementMap = AMActivity._ElementMap.copy()
    _AttributeMap = AMActivity._AttributeMap.copy()
    # Base type is AMActivity
    
    # Element benchmarkId uses Python identifier benchmarkId
    __benchmarkId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'benchmarkId'), 'benchmarkId', '__AbsentNamespace0_Measurement_benchmarkId', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 15, 10), )

    
    benchmarkId = property(__benchmarkId.value, __benchmarkId.set, None, None)

    
    # Element challengeId uses Python identifier challengeId
    __challengeId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'challengeId'), 'challengeId', '__AbsentNamespace0_Measurement_challengeId', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 16, 10), )

    
    challengeId = property(__challengeId.value, __challengeId.set, None, None)

    
    # Element facility uses Python identifier facility
    __facility = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'facility'), 'facility', '__AbsentNamespace0_Measurement_facility', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 17, 10), )

    
    facility = property(__facility.value, __facility.set, None, None)

    
    # Element relatedMeasurement uses Python identifier relatedMeasurement
    __relatedMeasurement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'relatedMeasurement'), 'relatedMeasurement', '__AbsentNamespace0_Measurement_relatedMeasurement', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 18, 10), )

    
    relatedMeasurement = property(__relatedMeasurement.value, __relatedMeasurement.set, None, None)

    
    # Element isCalibrationMeasurement uses Python identifier isCalibrationMeasurement
    __isCalibrationMeasurement = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'isCalibrationMeasurement'), 'isCalibrationMeasurement', '__AbsentNamespace0_Measurement_isCalibrationMeasurement', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 19, 10), )

    
    isCalibrationMeasurement = property(__isCalibrationMeasurement.value, __isCalibrationMeasurement.set, None, None)

    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    
    # Element startDate (startDate) inherited from AMActivity
    
    # Element completeDate (completeDate) inherited from AMActivity
    _ElementMap.update({
        __benchmarkId.name() : __benchmarkId,
        __challengeId.name() : __challengeId,
        __facility.name() : __facility,
        __relatedMeasurement.name() : __relatedMeasurement,
        __isCalibrationMeasurement.name() : __isCalibrationMeasurement
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Measurement = Measurement
Namespace.addCategoryObject('typeBinding', 'Measurement', Measurement)


# Complex type CompositionMeasurement with content type ELEMENT_ONLY
class CompositionMeasurement (AMActivity):
    """Complex type CompositionMeasurement with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'CompositionMeasurement')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 226, 2)
    _ElementMap = AMActivity._ElementMap.copy()
    _AttributeMap = AMActivity._AttributeMap.copy()
    # Base type is AMActivity
    
    # Element materialDesignation uses Python identifier materialDesignation
    __materialDesignation = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'materialDesignation'), 'materialDesignation', '__AbsentNamespace0_CompositionMeasurement_materialDesignation', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 230, 10), )

    
    materialDesignation = property(__materialDesignation.value, __materialDesignation.set, None, None)

    
    # Element testingLab uses Python identifier testingLab
    __testingLab = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'testingLab'), 'testingLab', '__AbsentNamespace0_CompositionMeasurement_testingLab', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 231, 10), )

    
    testingLab = property(__testingLab.value, __testingLab.set, None, None)

    
    # Element specimen uses Python identifier specimen
    __specimen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'specimen'), 'specimen', '__AbsentNamespace0_CompositionMeasurement_specimen', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 232, 10), )

    
    specimen = property(__specimen.value, __specimen.set, None, None)

    
    # Element results uses Python identifier results
    __results = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'results'), 'results', '__AbsentNamespace0_CompositionMeasurement_results', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 233, 10), )

    
    results = property(__results.value, __results.set, None, None)

    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    
    # Element startDate (startDate) inherited from AMActivity
    
    # Element completeDate (completeDate) inherited from AMActivity
    _ElementMap.update({
        __materialDesignation.name() : __materialDesignation,
        __testingLab.name() : __testingLab,
        __specimen.name() : __specimen,
        __results.name() : __results
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.CompositionMeasurement = CompositionMeasurement
Namespace.addCategoryObject('typeBinding', 'CompositionMeasurement', CompositionMeasurement)


# Complex type PowderSizeMeasurement with content type ELEMENT_ONLY
class PowderSizeMeasurement (AMActivity):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'PowderSizeMeasurement')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 246, 2)
    _ElementMap = AMActivity._ElementMap.copy()
    _AttributeMap = AMActivity._AttributeMap.copy()
    # Base type is AMActivity
    
    # Element specimen uses Python identifier specimen
    __specimen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'specimen'), 'specimen', '__AbsentNamespace0_PowderSizeMeasurement_specimen', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 255, 10), )

    
    specimen = property(__specimen.value, __specimen.set, None, None)

    
    # Element results uses Python identifier results
    __results = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'results'), 'results', '__AbsentNamespace0_PowderSizeMeasurement_results', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 256, 10), )

    
    results = property(__results.value, __results.set, None, None)

    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    
    # Element startDate (startDate) inherited from AMActivity
    
    # Element completeDate (completeDate) inherited from AMActivity
    _ElementMap.update({
        __specimen.name() : __specimen,
        __results.name() : __results
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.PowderSizeMeasurement = PowderSizeMeasurement
Namespace.addCategoryObject('typeBinding', 'PowderSizeMeasurement', PowderSizeMeasurement)


# Complex type AMBuildPlate with content type ELEMENT_ONLY
class AMBuildPlate (AMBuildProduct):
    """Complex type AMBuildPlate with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'AMBuildPlate')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 111, 2)
    _ElementMap = AMBuildProduct._ElementMap.copy()
    _AttributeMap = AMBuildProduct._AttributeMap.copy()
    # Base type is AMBuildProduct
    
    # Element creationDate (creationDate) inherited from PhysicalArtifact
    
    # Element location (location) inherited from PhysicalArtifact
    
    # Element processingSteps (processingSteps) inherited from PhysicalArtifact
    
    # Element benchmarkId (benchmarkId) inherited from AMBuildProduct
    
    # Element status (status) inherited from AMBuildProduct
    
    # Element purpose (purpose) inherited from AMBuildProduct
    
    # Element designDiagram (designDiagram) inherited from AMBuildProduct
    
    # Element partDefinition uses Python identifier partDefinition
    __partDefinition = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'partDefinition'), 'partDefinition', '__AbsentNamespace0_AMBuildPlate_partDefinition', True, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 115, 10), )

    
    partDefinition = property(__partDefinition.value, __partDefinition.set, None, None)

    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    _ElementMap.update({
        __partDefinition.name() : __partDefinition
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.AMBuildPlate = AMBuildPlate
Namespace.addCategoryObject('typeBinding', 'AMBuildPlate', AMBuildPlate)


# Complex type BuildPart with content type ELEMENT_ONLY
class BuildPart (AMBuildProduct):
    """Complex type BuildPart with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'BuildPart')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 139, 2)
    _ElementMap = AMBuildProduct._ElementMap.copy()
    _AttributeMap = AMBuildProduct._AttributeMap.copy()
    # Base type is AMBuildProduct
    
    # Element creationDate (creationDate) inherited from PhysicalArtifact
    
    # Element location (location) inherited from PhysicalArtifact
    
    # Element processingSteps (processingSteps) inherited from PhysicalArtifact
    
    # Element benchmarkId (benchmarkId) inherited from AMBuildProduct
    
    # Element status (status) inherited from AMBuildProduct
    
    # Element purpose (purpose) inherited from AMBuildProduct
    
    # Element designDiagram (designDiagram) inherited from AMBuildProduct
    
    # Element buildPlateId uses Python identifier buildPlateId
    __buildPlateId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'buildPlateId'), 'buildPlateId', '__AbsentNamespace0_BuildPart_buildPlateId', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 143, 10), )

    
    buildPlateId = property(__buildPlateId.value, __buildPlateId.set, None, ' PID of the Build Plate this Part was extracted from.\n              ')

    
    # Element partLabel uses Python identifier partLabel
    __partLabel = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'partLabel'), 'partLabel', '__AbsentNamespace0_BuildPart_partLabel', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 149, 10), )

    
    partLabel = property(__partLabel.value, __partLabel.set, None, ' Label identifying the part in the build plate it was extracted from.\n              ')

    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    _ElementMap.update({
        __buildPlateId.name() : __buildPlateId,
        __partLabel.name() : __partLabel
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.BuildPart = BuildPart
Namespace.addCategoryObject('typeBinding', 'BuildPart', BuildPart)


# Complex type Specimen with content type ELEMENT_ONLY
class Specimen (AMBuildProduct):
    """Complex type Specimen with content type ELEMENT_ONLY"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'Specimen')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 163, 2)
    _ElementMap = AMBuildProduct._ElementMap.copy()
    _AttributeMap = AMBuildProduct._AttributeMap.copy()
    # Base type is AMBuildProduct
    
    # Element creationDate (creationDate) inherited from PhysicalArtifact
    
    # Element location (location) inherited from PhysicalArtifact
    
    # Element processingSteps (processingSteps) inherited from PhysicalArtifact
    
    # Element benchmarkId (benchmarkId) inherited from AMBuildProduct
    
    # Element status (status) inherited from AMBuildProduct
    
    # Element purpose (purpose) inherited from AMBuildProduct
    
    # Element designDiagram (designDiagram) inherited from AMBuildProduct
    
    # Element buildPlateId uses Python identifier buildPlateId
    __buildPlateId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'buildPlateId'), 'buildPlateId', '__AbsentNamespace0_Specimen_buildPlateId', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 168, 14), )

    
    buildPlateId = property(__buildPlateId.value, __buildPlateId.set, None, ' PID of the Build Plate this Specimen was ultimately extracted from.\n                  ')

    
    # Element buildPartId uses Python identifier buildPartId
    __buildPartId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'buildPartId'), 'buildPartId', '__AbsentNamespace0_Specimen_buildPartId', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 174, 14), )

    
    buildPartId = property(__buildPartId.value, __buildPartId.set, None, ' PID of the Build Part this Specimen was extracted from.\n                  ')

    
    # Element materialId uses Python identifier materialId
    __materialId = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'materialId'), 'materialId', '__AbsentNamespace0_Specimen_materialId', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 182, 14), )

    
    materialId = property(__materialId.value, __materialId.set, None, ' PID of the Material this Specimen was extracted from.\n                  ')

    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    _ElementMap.update({
        __buildPlateId.name() : __buildPlateId,
        __buildPartId.name() : __buildPartId,
        __materialId.name() : __materialId
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.Specimen = Specimen
Namespace.addCategoryObject('typeBinding', 'Specimen', Specimen)


# Complex type DigitalImageCorrelationMeasurement with content type ELEMENT_ONLY
class DigitalImageCorrelationMeasurement (Measurement):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'DigitalImageCorrelationMeasurement')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 120, 2)
    _ElementMap = Measurement._ElementMap.copy()
    _AttributeMap = Measurement._AttributeMap.copy()
    # Base type is Measurement
    
    # Element benchmarkId (benchmarkId) inherited from Measurement
    
    # Element challengeId (challengeId) inherited from Measurement
    
    # Element facility (facility) inherited from Measurement
    
    # Element relatedMeasurement (relatedMeasurement) inherited from Measurement
    
    # Element isCalibrationMeasurement (isCalibrationMeasurement) inherited from Measurement
    
    # Element measurementMethod uses Python identifier measurementMethod
    __measurementMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'measurementMethod'), 'measurementMethod', '__AbsentNamespace0_DigitalImageCorrelationMeasurement_measurementMethod', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 129, 10), )

    
    measurementMethod = property(__measurementMethod.value, __measurementMethod.set, None, None)

    
    # Element specimen uses Python identifier specimen
    __specimen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'specimen'), 'specimen', '__AbsentNamespace0_DigitalImageCorrelationMeasurement_specimen', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 130, 10), )

    
    specimen = property(__specimen.value, __specimen.set, None, None)

    
    # Element results uses Python identifier results
    __results = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'results'), 'results', '__AbsentNamespace0_DigitalImageCorrelationMeasurement_results', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 131, 10), )

    
    results = property(__results.value, __results.set, None, None)

    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    
    # Element startDate (startDate) inherited from AMActivity
    
    # Element completeDate (completeDate) inherited from AMActivity
    _ElementMap.update({
        __measurementMethod.name() : __measurementMethod,
        __specimen.name() : __specimen,
        __results.name() : __results
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.DigitalImageCorrelationMeasurement = DigitalImageCorrelationMeasurement
Namespace.addCategoryObject('typeBinding', 'DigitalImageCorrelationMeasurement', DigitalImageCorrelationMeasurement)


# Complex type LaserAbsorptivityMeasurement with content type ELEMENT_ONLY
class LaserAbsorptivityMeasurement (Measurement):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'LaserAbsorptivityMeasurement')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 138, 2)
    _ElementMap = Measurement._ElementMap.copy()
    _AttributeMap = Measurement._AttributeMap.copy()
    # Base type is Measurement
    
    # Element benchmarkId (benchmarkId) inherited from Measurement
    
    # Element challengeId (challengeId) inherited from Measurement
    
    # Element facility (facility) inherited from Measurement
    
    # Element relatedMeasurement (relatedMeasurement) inherited from Measurement
    
    # Element isCalibrationMeasurement (isCalibrationMeasurement) inherited from Measurement
    
    # Element measurementMethod uses Python identifier measurementMethod
    __measurementMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'measurementMethod'), 'measurementMethod', '__AbsentNamespace0_LaserAbsorptivityMeasurement_measurementMethod', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 147, 10), )

    
    measurementMethod = property(__measurementMethod.value, __measurementMethod.set, None, None)

    
    # Element specimen uses Python identifier specimen
    __specimen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'specimen'), 'specimen', '__AbsentNamespace0_LaserAbsorptivityMeasurement_specimen', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 148, 10), )

    
    specimen = property(__specimen.value, __specimen.set, None, None)

    
    # Element results uses Python identifier results
    __results = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'results'), 'results', '__AbsentNamespace0_LaserAbsorptivityMeasurement_results', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 149, 10), )

    
    results = property(__results.value, __results.set, None, None)

    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    
    # Element startDate (startDate) inherited from AMActivity
    
    # Element completeDate (completeDate) inherited from AMActivity
    _ElementMap.update({
        __measurementMethod.name() : __measurementMethod,
        __specimen.name() : __specimen,
        __results.name() : __results
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.LaserAbsorptivityMeasurement = LaserAbsorptivityMeasurement
Namespace.addCategoryObject('typeBinding', 'LaserAbsorptivityMeasurement', LaserAbsorptivityMeasurement)


# Complex type MechanicalTestingMeasurement with content type ELEMENT_ONLY
class MechanicalTestingMeasurement (Measurement):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'MechanicalTestingMeasurement')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 156, 2)
    _ElementMap = Measurement._ElementMap.copy()
    _AttributeMap = Measurement._AttributeMap.copy()
    # Base type is Measurement
    
    # Element benchmarkId (benchmarkId) inherited from Measurement
    
    # Element challengeId (challengeId) inherited from Measurement
    
    # Element facility (facility) inherited from Measurement
    
    # Element relatedMeasurement (relatedMeasurement) inherited from Measurement
    
    # Element isCalibrationMeasurement (isCalibrationMeasurement) inherited from Measurement
    
    # Element measurementMethod uses Python identifier measurementMethod
    __measurementMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'measurementMethod'), 'measurementMethod', '__AbsentNamespace0_MechanicalTestingMeasurement_measurementMethod', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 165, 10), )

    
    measurementMethod = property(__measurementMethod.value, __measurementMethod.set, None, None)

    
    # Element specimen uses Python identifier specimen
    __specimen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'specimen'), 'specimen', '__AbsentNamespace0_MechanicalTestingMeasurement_specimen', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 166, 10), )

    
    specimen = property(__specimen.value, __specimen.set, None, None)

    
    # Element results uses Python identifier results
    __results = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'results'), 'results', '__AbsentNamespace0_MechanicalTestingMeasurement_results', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 167, 10), )

    
    results = property(__results.value, __results.set, None, None)

    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    
    # Element startDate (startDate) inherited from AMActivity
    
    # Element completeDate (completeDate) inherited from AMActivity
    _ElementMap.update({
        __measurementMethod.name() : __measurementMethod,
        __specimen.name() : __specimen,
        __results.name() : __results
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.MechanicalTestingMeasurement = MechanicalTestingMeasurement
Namespace.addCategoryObject('typeBinding', 'MechanicalTestingMeasurement', MechanicalTestingMeasurement)


# Complex type RadiographyMeasurement with content type ELEMENT_ONLY
class RadiographyMeasurement (Measurement):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RadiographyMeasurement')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 174, 2)
    _ElementMap = Measurement._ElementMap.copy()
    _AttributeMap = Measurement._AttributeMap.copy()
    # Base type is Measurement
    
    # Element benchmarkId (benchmarkId) inherited from Measurement
    
    # Element challengeId (challengeId) inherited from Measurement
    
    # Element facility (facility) inherited from Measurement
    
    # Element relatedMeasurement (relatedMeasurement) inherited from Measurement
    
    # Element isCalibrationMeasurement (isCalibrationMeasurement) inherited from Measurement
    
    # Element measurementMethod uses Python identifier measurementMethod
    __measurementMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'measurementMethod'), 'measurementMethod', '__AbsentNamespace0_RadiographyMeasurement_measurementMethod', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 183, 10), )

    
    measurementMethod = property(__measurementMethod.value, __measurementMethod.set, None, None)

    
    # Element specimen uses Python identifier specimen
    __specimen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'specimen'), 'specimen', '__AbsentNamespace0_RadiographyMeasurement_specimen', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 184, 10), )

    
    specimen = property(__specimen.value, __specimen.set, None, None)

    
    # Element results uses Python identifier results
    __results = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'results'), 'results', '__AbsentNamespace0_RadiographyMeasurement_results', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 185, 10), )

    
    results = property(__results.value, __results.set, None, None)

    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    
    # Element startDate (startDate) inherited from AMActivity
    
    # Element completeDate (completeDate) inherited from AMActivity
    _ElementMap.update({
        __measurementMethod.name() : __measurementMethod,
        __specimen.name() : __specimen,
        __results.name() : __results
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.RadiographyMeasurement = RadiographyMeasurement
Namespace.addCategoryObject('typeBinding', 'RadiographyMeasurement', RadiographyMeasurement)


# Complex type RSSynchrotronEDMeasurement with content type ELEMENT_ONLY
class RSSynchrotronEDMeasurement (Measurement):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'RSSynchrotronEDMeasurement')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 192, 2)
    _ElementMap = Measurement._ElementMap.copy()
    _AttributeMap = Measurement._AttributeMap.copy()
    # Base type is Measurement
    
    # Element benchmarkId (benchmarkId) inherited from Measurement
    
    # Element challengeId (challengeId) inherited from Measurement
    
    # Element facility (facility) inherited from Measurement
    
    # Element relatedMeasurement (relatedMeasurement) inherited from Measurement
    
    # Element isCalibrationMeasurement (isCalibrationMeasurement) inherited from Measurement
    
    # Element measurementMethod uses Python identifier measurementMethod
    __measurementMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'measurementMethod'), 'measurementMethod', '__AbsentNamespace0_RSSynchrotronEDMeasurement_measurementMethod', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 201, 10), )

    
    measurementMethod = property(__measurementMethod.value, __measurementMethod.set, None, None)

    
    # Element specimen uses Python identifier specimen
    __specimen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'specimen'), 'specimen', '__AbsentNamespace0_RSSynchrotronEDMeasurement_specimen', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 202, 10), )

    
    specimen = property(__specimen.value, __specimen.set, None, None)

    
    # Element results uses Python identifier results
    __results = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'results'), 'results', '__AbsentNamespace0_RSSynchrotronEDMeasurement_results', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 203, 10), )

    
    results = property(__results.value, __results.set, None, None)

    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    
    # Element startDate (startDate) inherited from AMActivity
    
    # Element completeDate (completeDate) inherited from AMActivity
    _ElementMap.update({
        __measurementMethod.name() : __measurementMethod,
        __specimen.name() : __specimen,
        __results.name() : __results
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.RSSynchrotronEDMeasurement = RSSynchrotronEDMeasurement
Namespace.addCategoryObject('typeBinding', 'RSSynchrotronEDMeasurement', RSSynchrotronEDMeasurement)


# Complex type ThermographyMeasurement with content type ELEMENT_ONLY
class ThermographyMeasurement (Measurement):
    """"""
    _TypeDefinition = None
    _ContentTypeTag = pyxb.binding.basis.complexTypeDefinition._CT_ELEMENT_ONLY
    _Abstract = False
    _ExpandedName = pyxb.namespace.ExpandedName(Namespace, 'ThermographyMeasurement')
    _XSDLocation = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 209, 2)
    _ElementMap = Measurement._ElementMap.copy()
    _AttributeMap = Measurement._AttributeMap.copy()
    # Base type is Measurement
    
    # Element benchmarkId (benchmarkId) inherited from Measurement
    
    # Element challengeId (challengeId) inherited from Measurement
    
    # Element facility (facility) inherited from Measurement
    
    # Element relatedMeasurement (relatedMeasurement) inherited from Measurement
    
    # Element isCalibrationMeasurement (isCalibrationMeasurement) inherited from Measurement
    
    # Element measurementMethod uses Python identifier measurementMethod
    __measurementMethod = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'measurementMethod'), 'measurementMethod', '__AbsentNamespace0_ThermographyMeasurement_measurementMethod', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 218, 10), )

    
    measurementMethod = property(__measurementMethod.value, __measurementMethod.set, None, None)

    
    # Element specimen uses Python identifier specimen
    __specimen = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'specimen'), 'specimen', '__AbsentNamespace0_ThermographyMeasurement_specimen', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 219, 10), )

    
    specimen = property(__specimen.value, __specimen.set, None, None)

    
    # Element results uses Python identifier results
    __results = pyxb.binding.content.ElementDeclaration(pyxb.namespace.ExpandedName(None, 'results'), 'results', '__AbsentNamespace0_ThermographyMeasurement_results', False, pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 220, 10), )

    
    results = property(__results.value, __results.set, None, None)

    
    # Element name (name) inherited from AMResource
    
    # Element description (description) inherited from AMResource
    
    # Element documentation (documentation) inherited from AMResource
    
    # Element primaryContact (primaryContact) inherited from AMResource
    
    # Element contributor (contributor) inherited from AMResource
    
    # Element note (note) inherited from AMResource
    
    # Element altName (altName) inherited from AMResource
    
    # Element UUID (UUID) inherited from AMResource
    
    # Element identifier (identifier) inherited from AMResource
    
    # Element journalPublication (journalPublication) inherited from AMResource
    
    # Element referencePublication (referencePublication) inherited from AMResource
    
    # Element relatedStandard (relatedStandard) inherited from AMResource
    
    # Element startDate (startDate) inherited from AMActivity
    
    # Element completeDate (completeDate) inherited from AMActivity
    _ElementMap.update({
        __measurementMethod.name() : __measurementMethod,
        __specimen.name() : __specimen,
        __results.name() : __results
    })
    _AttributeMap.update({
        
    })
_module_typeBindings.ThermographyMeasurement = ThermographyMeasurement
Namespace.addCategoryObject('typeBinding', 'ThermographyMeasurement', ThermographyMeasurement)


AMDoc = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AMDoc'), AMDocRoot, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 29, 2))
Namespace.addCategoryObject('elementBinding', AMDoc.name().localName(), AMDoc)

AMBlob = pyxb.binding.basis.element(pyxb.namespace.ExpandedName(Namespace, 'AMBlob'), Blob, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 31, 2))
Namespace.addCategoryObject('elementBinding', AMBlob.name().localName(), AMBlob)



DesignDiagramRef._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'designDiagram'), pyxb.binding.datatypes.anyURI, scope=DesignDiagramRef, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 96, 6)))

DesignDiagramRef._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'label'), pyxb.binding.datatypes.string, scope=DesignDiagramRef, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 103, 6)))

def _BuildAutomaton ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton
    del _BuildAutomaton
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 103, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DesignDiagramRef._UseForTag(pyxb.namespace.ExpandedName(None, 'designDiagram')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 96, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DesignDiagramRef._UseForTag(pyxb.namespace.ExpandedName(None, 'label')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 103, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DesignDiagramRef._Automaton = _BuildAutomaton()




PartDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=PartDefinition, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 123, 6)))

PartDefinition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'partType'), PartType, scope=PartDefinition, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 124, 6)))

def _BuildAutomaton_ ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_
    del _BuildAutomaton_
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PartDefinition._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 123, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PartDefinition._UseForTag(pyxb.namespace.ExpandedName(None, 'partType')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 124, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PartDefinition._Automaton = _BuildAutomaton_()




ProcessingStep._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'id'), pyxb.binding.datatypes.string, scope=ProcessingStep, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 231, 6)))

ProcessingStep._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=ProcessingStep, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 232, 6)))

ProcessingStep._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'processingIllustration'), AMBlobReference, scope=ProcessingStep, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 233, 6)))

ProcessingStep._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'completeDate'), pyxb.binding.datatypes.dateTime, scope=ProcessingStep, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 234, 6)))

ProcessingStep._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'primaryContact'), Person, scope=ProcessingStep, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 235, 6)))

ProcessingStep._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'resultingCondition'), pyxb.binding.datatypes.string, scope=ProcessingStep, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 236, 6)))

def _BuildAutomaton_2 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_2
    del _BuildAutomaton_2
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 231, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 232, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 233, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 234, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 235, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 236, 6))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProcessingStep._UseForTag(pyxb.namespace.ExpandedName(None, 'id')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 231, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ProcessingStep._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 232, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ProcessingStep._UseForTag(pyxb.namespace.ExpandedName(None, 'processingIllustration')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 233, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ProcessingStep._UseForTag(pyxb.namespace.ExpandedName(None, 'completeDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 234, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ProcessingStep._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 235, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ProcessingStep._UseForTag(pyxb.namespace.ExpandedName(None, 'resultingCondition')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 236, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProcessingStep._Automaton = _BuildAutomaton_2()




ProcessingSteps._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ProcessingStep'), ProcessingStep, scope=ProcessingSteps, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 242, 6)))

def _BuildAutomaton_3 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_3
    del _BuildAutomaton_3
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 242, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ProcessingSteps._UseForTag(pyxb.namespace.ExpandedName(None, 'ProcessingStep')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 242, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ProcessingSteps._Automaton = _BuildAutomaton_3()




AM_Process._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LaserPowderBedFusion'), CTD_ANON, scope=AM_Process, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 254, 6)))

def _BuildAutomaton_4 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_4
    del _BuildAutomaton_4
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AM_Process._UseForTag(pyxb.namespace.ExpandedName(None, 'LaserPowderBedFusion')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 254, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AM_Process._Automaton = _BuildAutomaton_4()




CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PowderBedFusion-instrument'), Instrument, scope=CTD_ANON, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 257, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BuildEnviroment'), BuildEnvironmentType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 258, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BuildParameters'), BuildParametersType, scope=CTD_ANON, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 259, 12)))

CTD_ANON._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OtherProcessingFiles'), DigitalArtifact, scope=CTD_ANON, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 260, 12)))

def _BuildAutomaton_5 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_5
    del _BuildAutomaton_5
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 257, 12))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 259, 12))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 260, 12))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'PowderBedFusion-instrument')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 257, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'BuildEnviroment')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 258, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'BuildParameters')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 259, 12))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CTD_ANON._UseForTag(pyxb.namespace.ExpandedName(None, 'OtherProcessingFiles')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 260, 12))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON._Automaton = _BuildAutomaton_5()




BuildEnvironmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BuildAtmosphere'), AtmosphereType, scope=BuildEnvironmentType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 269, 6)))

BuildEnvironmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'OxygenContent'), OxygenContentType, scope=BuildEnvironmentType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 270, 6)))

BuildEnvironmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'GasFlow'), GasFlowType, scope=BuildEnvironmentType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 271, 6)))

BuildEnvironmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReCoating'), ReCoatingType, scope=BuildEnvironmentType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 272, 6)))

BuildEnvironmentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BuildEnvironmentNotes'), Note, scope=BuildEnvironmentType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 273, 6)))

def _BuildAutomaton_6 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_6
    del _BuildAutomaton_6
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 270, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 271, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 272, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 273, 6))
    counters.add(cc_3)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BuildEnvironmentType._UseForTag(pyxb.namespace.ExpandedName(None, 'BuildAtmosphere')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 269, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BuildEnvironmentType._UseForTag(pyxb.namespace.ExpandedName(None, 'OxygenContent')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 270, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BuildEnvironmentType._UseForTag(pyxb.namespace.ExpandedName(None, 'GasFlow')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 271, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BuildEnvironmentType._UseForTag(pyxb.namespace.ExpandedName(None, 'ReCoating')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 272, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(BuildEnvironmentType._UseForTag(pyxb.namespace.ExpandedName(None, 'BuildEnvironmentNotes')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 273, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BuildEnvironmentType._Automaton = _BuildAutomaton_6()




ReCoatingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReCoaterType'), ReCoaterType, scope=ReCoatingType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 279, 6)))

ReCoatingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ReCoaterMaterial'), ReCoaterMaterialType, scope=ReCoatingType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 280, 6)))

def _BuildAutomaton_7 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_7
    del _BuildAutomaton_7
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ReCoatingType._UseForTag(pyxb.namespace.ExpandedName(None, 'ReCoaterType')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 279, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ReCoatingType._UseForTag(pyxb.namespace.ExpandedName(None, 'ReCoaterMaterial')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 280, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ReCoatingType._Automaton = _BuildAutomaton_7()




BuildParametersType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Laser'), LaserType, scope=BuildParametersType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 285, 6)))

BuildParametersType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SolidLayers'), SolidLayerType, scope=BuildParametersType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 286, 6)))

BuildParametersType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ScanGeometry'), ScanGeometryType, scope=BuildParametersType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 287, 6)))

BuildParametersType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'DigitalScanCommandFileID'), DigitalArtifact, scope=BuildParametersType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 288, 6)))

BuildParametersType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'note'), Note, scope=BuildParametersType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 289, 6)))

def _BuildAutomaton_8 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_8
    del _BuildAutomaton_8
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 287, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 288, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 289, 6))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildParametersType._UseForTag(pyxb.namespace.ExpandedName(None, 'Laser')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 285, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BuildParametersType._UseForTag(pyxb.namespace.ExpandedName(None, 'SolidLayers')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 286, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(BuildParametersType._UseForTag(pyxb.namespace.ExpandedName(None, 'ScanGeometry')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 287, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(BuildParametersType._UseForTag(pyxb.namespace.ExpandedName(None, 'DigitalScanCommandFileID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 288, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(BuildParametersType._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 289, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BuildParametersType._Automaton = _BuildAutomaton_8()




LaserType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LaserType'), pyxb.binding.datatypes.string, scope=LaserType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 295, 6)))

LaserType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NominalLaserPower'), pyxb.binding.datatypes.float, scope=LaserType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 296, 6)))

LaserType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LaserPowerValueUnit'), pyxb.binding.datatypes.string, scope=LaserType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 297, 6)))

LaserType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NominalScanningSpeedValue'), pyxb.binding.datatypes.float, scope=LaserType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 298, 6)))

LaserType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ScanningSpeedUnit'), pyxb.binding.datatypes.string, scope=LaserType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 299, 6)))

LaserType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NominalLaserSpotSize'), pyxb.binding.datatypes.float, scope=LaserType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 300, 6)))

LaserType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NominalLaserSpotSize_MeasureDefinition'), NominalLaserSpotSize_MeasureDefinitionType, scope=LaserType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 301, 6)))

LaserType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SpotSizeUnit'), pyxb.binding.datatypes.string, scope=LaserType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 302, 6)))

def _BuildAutomaton_9 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_9
    del _BuildAutomaton_9
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 295, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LaserType._UseForTag(pyxb.namespace.ExpandedName(None, 'LaserType')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 295, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LaserType._UseForTag(pyxb.namespace.ExpandedName(None, 'NominalLaserPower')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 296, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LaserType._UseForTag(pyxb.namespace.ExpandedName(None, 'LaserPowerValueUnit')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 297, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LaserType._UseForTag(pyxb.namespace.ExpandedName(None, 'NominalScanningSpeedValue')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 298, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LaserType._UseForTag(pyxb.namespace.ExpandedName(None, 'ScanningSpeedUnit')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 299, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LaserType._UseForTag(pyxb.namespace.ExpandedName(None, 'NominalLaserSpotSize')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 300, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(LaserType._UseForTag(pyxb.namespace.ExpandedName(None, 'NominalLaserSpotSize_MeasureDefinition')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 301, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LaserType._UseForTag(pyxb.namespace.ExpandedName(None, 'SpotSizeUnit')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 302, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
         ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
         ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LaserType._Automaton = _BuildAutomaton_9()




SolidLayerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'LayerThickness'), pyxb.binding.datatypes.float, scope=SolidLayerType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 308, 6)))

SolidLayerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ThicknessUnits'), LengthUnit, scope=SolidLayerType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 309, 6)))

SolidLayerType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'TotalNumberLayers'), pyxb.binding.datatypes.integer, scope=SolidLayerType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 310, 6)))

def _BuildAutomaton_10 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_10
    del _BuildAutomaton_10
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 308, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 309, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 310, 6))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SolidLayerType._UseForTag(pyxb.namespace.ExpandedName(None, 'LayerThickness')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 308, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SolidLayerType._UseForTag(pyxb.namespace.ExpandedName(None, 'ThicknessUnits')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 309, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SolidLayerType._UseForTag(pyxb.namespace.ExpandedName(None, 'TotalNumberLayers')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 310, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SolidLayerType._Automaton = _BuildAutomaton_10()




ScanGeometryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ScanType'), ScanType, scope=ScanGeometryType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 316, 6)))

ScanGeometryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'StripeWidth'), StripeWidthType, scope=ScanGeometryType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 317, 6)))

ScanGeometryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HatchingSpacing'), HatchSpacingType, scope=ScanGeometryType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 318, 6)))

ScanGeometryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RotationBetweenLayers'), RotationLayersType, scope=ScanGeometryType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 319, 6)))

ScanGeometryType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ScanGeometryNotes'), Note, scope=ScanGeometryType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 320, 6)))

def _BuildAutomaton_11 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_11
    del _BuildAutomaton_11
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 317, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 318, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 320, 6))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ScanGeometryType._UseForTag(pyxb.namespace.ExpandedName(None, 'ScanType')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 316, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ScanGeometryType._UseForTag(pyxb.namespace.ExpandedName(None, 'StripeWidth')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 317, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ScanGeometryType._UseForTag(pyxb.namespace.ExpandedName(None, 'HatchingSpacing')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 318, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ScanGeometryType._UseForTag(pyxb.namespace.ExpandedName(None, 'RotationBetweenLayers')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 319, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ScanGeometryType._UseForTag(pyxb.namespace.ExpandedName(None, 'ScanGeometryNotes')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 320, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ScanGeometryType._Automaton = _BuildAutomaton_11()




StripeWidthType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'StripeWidthValue'), pyxb.binding.datatypes.float, scope=StripeWidthType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 326, 6)))

StripeWidthType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'StripeWidthUnits'), LengthUnit, scope=StripeWidthType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 327, 6)))

def _BuildAutomaton_12 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_12
    del _BuildAutomaton_12
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(StripeWidthType._UseForTag(pyxb.namespace.ExpandedName(None, 'StripeWidthValue')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 326, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(StripeWidthType._UseForTag(pyxb.namespace.ExpandedName(None, 'StripeWidthUnits')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 327, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
StripeWidthType._Automaton = _BuildAutomaton_12()




HatchSpacingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HatchSpacingValue'), pyxb.binding.datatypes.float, scope=HatchSpacingType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 333, 6)))

HatchSpacingType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'HatchSpacingUnit'), LengthUnit, scope=HatchSpacingType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 334, 6)))

def _BuildAutomaton_13 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_13
    del _BuildAutomaton_13
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(HatchSpacingType._UseForTag(pyxb.namespace.ExpandedName(None, 'HatchSpacingValue')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 333, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(HatchSpacingType._UseForTag(pyxb.namespace.ExpandedName(None, 'HatchSpacingUnit')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 334, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
HatchSpacingType._Automaton = _BuildAutomaton_13()




RotationLayersType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RotationAngleBetweenLayers'), pyxb.binding.datatypes.string, scope=RotationLayersType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 340, 6)))

RotationLayersType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RotationAngleUnit'), RotationAngleUnit, scope=RotationLayersType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 342, 6)))

def _BuildAutomaton_14 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_14
    del _BuildAutomaton_14
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 340, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 342, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RotationLayersType._UseForTag(pyxb.namespace.ExpandedName(None, 'RotationAngleBetweenLayers')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 340, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(RotationLayersType._UseForTag(pyxb.namespace.ExpandedName(None, 'RotationAngleUnit')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 342, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
RotationLayersType._Automaton = _BuildAutomaton_14()




CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BuildID'), pyxb.binding.datatypes.string, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 354, 12)))

CTD_ANON_._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BuildPID'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 355, 12)))

def _BuildAutomaton_15 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_15
    del _BuildAutomaton_15
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'BuildID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 354, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_._UseForTag(pyxb.namespace.ExpandedName(None, 'BuildPID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 355, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_._Automaton = _BuildAutomaton_15()




CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SampleName'), pyxb.binding.datatypes.string, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 362, 12)))

CTD_ANON_2._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SamplePID'), pyxb.binding.datatypes.anyURI, scope=CTD_ANON_2, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 363, 12)))

def _BuildAutomaton_16 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_16
    del _BuildAutomaton_16
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, 'SampleName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 362, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_2._UseForTag(pyxb.namespace.ExpandedName(None, 'SamplePID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 363, 12))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_2._Automaton = _BuildAutomaton_16()




SamplePreparationMethods._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Sectioning'), CTD_ANON_3, scope=SamplePreparationMethods, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 405, 6)))

SamplePreparationMethods._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Mounting'), STD_ANON_2, scope=SamplePreparationMethods, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 412, 6)))

SamplePreparationMethods._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SampleOrientation'), pyxb.binding.datatypes.string, scope=SamplePreparationMethods, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 421, 6)))

SamplePreparationMethods._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Polishing-Etching'), CTD_ANON_4, scope=SamplePreparationMethods, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 422, 6)))

def _BuildAutomaton_17 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_17
    del _BuildAutomaton_17
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 405, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 412, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 421, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 422, 6))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SamplePreparationMethods._UseForTag(pyxb.namespace.ExpandedName(None, 'Sectioning')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 405, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SamplePreparationMethods._UseForTag(pyxb.namespace.ExpandedName(None, 'Mounting')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 412, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SamplePreparationMethods._UseForTag(pyxb.namespace.ExpandedName(None, 'SampleOrientation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 421, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(SamplePreparationMethods._UseForTag(pyxb.namespace.ExpandedName(None, 'Polishing-Etching')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 422, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
SamplePreparationMethods._Automaton = _BuildAutomaton_17()




CTD_ANON_3._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SectioningInstrument'), Instrument, scope=CTD_ANON_3, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 408, 12)))

def _BuildAutomaton_18 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_18
    del _BuildAutomaton_18
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_3._UseForTag(pyxb.namespace.ExpandedName(None, 'SectioningInstrument')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 408, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_3._Automaton = _BuildAutomaton_18()




CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'NotEtched'), PolishingConditions, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 425, 12)))

CTD_ANON_4._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Etched'), CTD_ANON_5, scope=CTD_ANON_4, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 426, 12)))

def _BuildAutomaton_19 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_19
    del _BuildAutomaton_19
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, 'NotEtched')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 425, 12))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_4._UseForTag(pyxb.namespace.ExpandedName(None, 'Etched')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 426, 12))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_4._Automaton = _BuildAutomaton_19()




CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SurfaceFinish'), PolishingConditions, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 429, 18)))

CTD_ANON_5._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EtchType'), EtchedConditions, scope=CTD_ANON_5, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 430, 18)))

def _BuildAutomaton_21 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_21
    del _BuildAutomaton_21
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, 'SurfaceFinish')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 429, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_22 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_22
    del _BuildAutomaton_22
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CTD_ANON_5._UseForTag(pyxb.namespace.ExpandedName(None, 'EtchType')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 430, 18))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_20 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_20
    del _BuildAutomaton_20
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_21())
    sub_automata.append(_BuildAutomaton_22())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 428, 16)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CTD_ANON_5._Automaton = _BuildAutomaton_20()




EtchedConditions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Etchant'), pyxb.binding.datatypes.string, scope=EtchedConditions, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 442, 6)))

EtchedConditions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EtchTime'), TimeType, scope=EtchedConditions, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 443, 6)))

EtchedConditions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'EtchingNotes'), pyxb.binding.datatypes.string, scope=EtchedConditions, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 444, 6)))

def _BuildAutomaton_23 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_23
    del _BuildAutomaton_23
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EtchedConditions._UseForTag(pyxb.namespace.ExpandedName(None, 'Etchant')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 442, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(EtchedConditions._UseForTag(pyxb.namespace.ExpandedName(None, 'EtchTime')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 443, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(EtchedConditions._UseForTag(pyxb.namespace.ExpandedName(None, 'EtchingNotes')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 444, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
EtchedConditions._Automaton = _BuildAutomaton_23()




PolishingConditions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PolishingMedia'), pyxb.binding.datatypes.string, scope=PolishingConditions, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 450, 6)))

PolishingConditions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FinalPolish'), pyxb.binding.datatypes.string, scope=PolishingConditions, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 451, 6)))

PolishingConditions._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PolishingNote'), Note, scope=PolishingConditions, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 452, 6)))

def _BuildAutomaton_24 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_24
    del _BuildAutomaton_24
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolishingConditions._UseForTag(pyxb.namespace.ExpandedName(None, 'PolishingMedia')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 450, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PolishingConditions._UseForTag(pyxb.namespace.ExpandedName(None, 'FinalPolish')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 451, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PolishingConditions._UseForTag(pyxb.namespace.ExpandedName(None, 'PolishingNote')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 452, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PolishingConditions._Automaton = _BuildAutomaton_24()




SampleIDType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=SampleIDType, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 458, 6)))

SampleIDType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BenchMarkID'), STD_ANON_3, scope=SampleIDType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 469, 6)))

SampleIDType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BuildNumber'), pyxb.binding.datatypes.integer, scope=SampleIDType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 480, 6)))

SampleIDType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PartType'), BuildPart, scope=SampleIDType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 481, 6)))

SampleIDType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AltName'), pyxb.binding.datatypes.string, scope=SampleIDType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 483, 6)))

SampleIDType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Alt-ID'), pyxb.binding.datatypes.string, scope=SampleIDType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 484, 6)))

SampleIDType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CreationDate'), pyxb.binding.datatypes.date, scope=SampleIDType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 485, 6)))

def _BuildAutomaton_25 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_25
    del _BuildAutomaton_25
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 483, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 484, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 485, 6))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SampleIDType._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 458, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SampleIDType._UseForTag(pyxb.namespace.ExpandedName(None, 'BenchMarkID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 469, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(SampleIDType._UseForTag(pyxb.namespace.ExpandedName(None, 'BuildNumber')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 480, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SampleIDType._UseForTag(pyxb.namespace.ExpandedName(None, 'PartType')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 481, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(SampleIDType._UseForTag(pyxb.namespace.ExpandedName(None, 'AltName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 483, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(SampleIDType._UseForTag(pyxb.namespace.ExpandedName(None, 'Alt-ID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 484, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(SampleIDType._UseForTag(pyxb.namespace.ExpandedName(None, 'CreationDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 485, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SampleIDType._Automaton = _BuildAutomaton_25()




AMBuildProcess._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AMBuildProcessType'), AM_Process, scope=AMBuildProcess, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 494, 6)))

AMBuildProcess._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'powder'), pyxb.binding.datatypes.anyURI, scope=AMBuildProcess, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 495, 6)))

AMBuildProcess._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'buildPlateID'), pyxb.binding.datatypes.string, scope=AMBuildProcess, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 496, 6)))

AMBuildProcess._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'BuildPlateImage'), DigitalArtifact, scope=AMBuildProcess, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 503, 6)))

AMBuildProcess._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'buildNote'), BuildNote, scope=AMBuildProcess, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 504, 6)))

AMBuildProcess._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PrintingNotes'), Note, scope=AMBuildProcess, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 505, 6)))

def _BuildAutomaton_26 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_26
    del _BuildAutomaton_26
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 495, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 503, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 504, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 505, 6))
    counters.add(cc_3)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AMBuildProcess._UseForTag(pyxb.namespace.ExpandedName(None, 'AMBuildProcessType')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 494, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AMBuildProcess._UseForTag(pyxb.namespace.ExpandedName(None, 'powder')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 495, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMBuildProcess._UseForTag(pyxb.namespace.ExpandedName(None, 'buildPlateID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 496, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProcess._UseForTag(pyxb.namespace.ExpandedName(None, 'BuildPlateImage')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 503, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProcess._UseForTag(pyxb.namespace.ExpandedName(None, 'buildNote')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 504, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProcess._UseForTag(pyxb.namespace.ExpandedName(None, 'PrintingNotes')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 505, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AMBuildProcess._Automaton = _BuildAutomaton_26()




BuildNote._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Note'), Note, scope=BuildNote, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 511, 6)))

BuildNote._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Downloadfiles'), DigitalArtifact, scope=BuildNote, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 512, 6)))

def _BuildAutomaton_27 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_27
    del _BuildAutomaton_27
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildNote._UseForTag(pyxb.namespace.ExpandedName(None, 'Note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 511, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BuildNote._UseForTag(pyxb.namespace.ExpandedName(None, 'Downloadfiles')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 512, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BuildNote._Automaton = _BuildAutomaton_27()




AMDocRoot._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pid'), pyxb.binding.datatypes.anyURI, scope=AMDocRoot, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 9, 6)))

AMDocRoot._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AMBuildPlate'), AMBuildPlate, scope=AMDocRoot, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 11, 8)))

AMDocRoot._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AMBuildPart'), BuildPart, scope=AMDocRoot, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 12, 8)))

AMDocRoot._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AMBSpecimen'), Specimen, scope=AMDocRoot, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 13, 8)))

AMDocRoot._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AMPowder'), Powder, scope=AMDocRoot, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 14, 8)))

AMDocRoot._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Material'), Material, scope=AMDocRoot, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 15, 8)))

AMDocRoot._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AMBuildProcess'), AMBuildProcess, scope=AMDocRoot, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 16, 8)))

AMDocRoot._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AMDigitalImageCorrelationMeasurement'), DigitalImageCorrelationMeasurement, scope=AMDocRoot, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 17, 8)))

AMDocRoot._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AMMechanicalTesting'), MechanicalTestingMeasurement, scope=AMDocRoot, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 18, 8)))

AMDocRoot._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AMLaserAbsorptivity'), LaserAbsorptivityMeasurement, scope=AMDocRoot, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 19, 8)))

AMDocRoot._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AMRadiography'), RadiographyMeasurement, scope=AMDocRoot, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 20, 8)))

AMDocRoot._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AMRSSynchrotronED'), RSSynchrotronEDMeasurement, scope=AMDocRoot, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 21, 8)))

AMDocRoot._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AMThermography'), ThermographyMeasurement, scope=AMDocRoot, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 22, 8)))

AMDocRoot._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AMComposition'), CompositionMeasurement, scope=AMDocRoot, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 23, 8)))

AMDocRoot._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AMPowderSizeDistribution'), PowderSizeMeasurement, scope=AMDocRoot, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 24, 8)))

def _BuildAutomaton_28 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_28
    del _BuildAutomaton_28
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 9, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 22, 8))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AMDocRoot._UseForTag(pyxb.namespace.ExpandedName(None, 'pid')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 9, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMDocRoot._UseForTag(pyxb.namespace.ExpandedName(None, 'AMBuildPlate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 11, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMDocRoot._UseForTag(pyxb.namespace.ExpandedName(None, 'AMBuildPart')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 12, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMDocRoot._UseForTag(pyxb.namespace.ExpandedName(None, 'AMBSpecimen')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 13, 8))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMDocRoot._UseForTag(pyxb.namespace.ExpandedName(None, 'AMPowder')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 14, 8))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMDocRoot._UseForTag(pyxb.namespace.ExpandedName(None, 'Material')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 15, 8))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMDocRoot._UseForTag(pyxb.namespace.ExpandedName(None, 'AMBuildProcess')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 16, 8))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMDocRoot._UseForTag(pyxb.namespace.ExpandedName(None, 'AMDigitalImageCorrelationMeasurement')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 17, 8))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMDocRoot._UseForTag(pyxb.namespace.ExpandedName(None, 'AMMechanicalTesting')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 18, 8))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMDocRoot._UseForTag(pyxb.namespace.ExpandedName(None, 'AMLaserAbsorptivity')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 19, 8))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMDocRoot._UseForTag(pyxb.namespace.ExpandedName(None, 'AMRadiography')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 20, 8))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMDocRoot._UseForTag(pyxb.namespace.ExpandedName(None, 'AMRSSynchrotronED')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 21, 8))
    st_11 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AMDocRoot._UseForTag(pyxb.namespace.ExpandedName(None, 'AMThermography')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 22, 8))
    st_12 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMDocRoot._UseForTag(pyxb.namespace.ExpandedName(None, 'AMComposition')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 23, 8))
    st_13 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMDocRoot._UseForTag(pyxb.namespace.ExpandedName(None, 'AMPowderSizeDistribution')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMDocs.xsd', 24, 8))
    st_14 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    transitions = []
    st_4._set_transitionSet(transitions)
    transitions = []
    st_5._set_transitionSet(transitions)
    transitions = []
    st_6._set_transitionSet(transitions)
    transitions = []
    st_7._set_transitionSet(transitions)
    transitions = []
    st_8._set_transitionSet(transitions)
    transitions = []
    st_9._set_transitionSet(transitions)
    transitions = []
    st_10._set_transitionSet(transitions)
    transitions = []
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    st_13._set_transitionSet(transitions)
    transitions = []
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
AMDocRoot._Automaton = _BuildAutomaton_28()




RelatedMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), pyxb.binding.datatypes.string, scope=RelatedMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 26, 6)))

RelatedMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'measurementIdentifier'), identifier, scope=RelatedMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 27, 6)))

RelatedMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'data'), DigitalArtifact, scope=RelatedMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 28, 6)))

RelatedMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=RelatedMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 29, 6)))

def _BuildAutomaton_29 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_29
    del _BuildAutomaton_29
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 27, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 28, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 29, 6))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RelatedMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 26, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RelatedMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'measurementIdentifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 27, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(RelatedMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'data')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 28, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(RelatedMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 29, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RelatedMeasurement._Automaton = _BuildAutomaton_29()




MeasurementInput._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'specimenID'), pyxb.binding.datatypes.string, scope=MeasurementInput, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 34, 6)))

MeasurementInput._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'specimenPID'), pyxb.binding.datatypes.anyURI, scope=MeasurementInput, documentation='\n            PID identifying a PhysicalArtefact, i.e. more generic than a Specimen.\n          ', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 36, 6)))

MeasurementInput._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'specimenType'), ArtifactType, scope=MeasurementInput, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 43, 6)))

MeasurementInput._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'specimenMeasurementGeometry'), SpecimenMeasurementGeometry, scope=MeasurementInput, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 44, 6)))

MeasurementInput._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'specimenMetadata'), ObjectType, scope=MeasurementInput, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 46, 6)))

def _BuildAutomaton_30 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_30
    del _BuildAutomaton_30
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 34, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 36, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 43, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 44, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 46, 6))
    counters.add(cc_4)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementInput._UseForTag(pyxb.namespace.ExpandedName(None, 'specimenID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 34, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementInput._UseForTag(pyxb.namespace.ExpandedName(None, 'specimenPID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 36, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementInput._UseForTag(pyxb.namespace.ExpandedName(None, 'specimenType')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 43, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementInput._UseForTag(pyxb.namespace.ExpandedName(None, 'specimenMeasurementGeometry')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 44, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementInput._UseForTag(pyxb.namespace.ExpandedName(None, 'specimenMetadata')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 46, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    st_4._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MeasurementInput._Automaton = _BuildAutomaton_30()




SpecimenMeasurementGeometry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'document'), DigitalArtifact, scope=SpecimenMeasurementGeometry, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 52, 6)))

SpecimenMeasurementGeometry._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'imageRef'), AMBlobReference, scope=SpecimenMeasurementGeometry, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 53, 6)))

def _BuildAutomaton_31 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_31
    del _BuildAutomaton_31
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SpecimenMeasurementGeometry._UseForTag(pyxb.namespace.ExpandedName(None, 'document')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 52, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(SpecimenMeasurementGeometry._UseForTag(pyxb.namespace.ExpandedName(None, 'imageRef')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 53, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
SpecimenMeasurementGeometry._Automaton = _BuildAutomaton_31()




MeasurementMethod._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'instrumentConfiguration'), InstrumentConfiguration, scope=MeasurementMethod, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 59, 6)))

MeasurementMethod._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'experimentConfiguration'), ExperimentConfiguration, scope=MeasurementMethod, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 60, 6)))

def _BuildAutomaton_32 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_32
    del _BuildAutomaton_32
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 60, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MeasurementMethod._UseForTag(pyxb.namespace.ExpandedName(None, 'instrumentConfiguration')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 59, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementMethod._UseForTag(pyxb.namespace.ExpandedName(None, 'experimentConfiguration')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 60, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MeasurementMethod._Automaton = _BuildAutomaton_32()




InstrumentConfiguration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'mainInstrument'), Instrument, scope=InstrumentConfiguration, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 66, 6)))

InstrumentConfiguration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'ancillaryInstrument'), Instrument, scope=InstrumentConfiguration, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 67, 6)))

def _BuildAutomaton_33 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_33
    del _BuildAutomaton_33
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 66, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 67, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(InstrumentConfiguration._UseForTag(pyxb.namespace.ExpandedName(None, 'mainInstrument')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 66, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(InstrumentConfiguration._UseForTag(pyxb.namespace.ExpandedName(None, 'ancillaryInstrument')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 67, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
InstrumentConfiguration._Automaton = _BuildAutomaton_33()




ExperimentConfiguration._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'component'), ConfigurationObject, scope=ExperimentConfiguration, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 73, 6)))

def _BuildAutomaton_34 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_34
    del _BuildAutomaton_34
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 73, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ExperimentConfiguration._UseForTag(pyxb.namespace.ExpandedName(None, 'component')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 73, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ExperimentConfiguration._Automaton = _BuildAutomaton_34()




MeasurementOutput._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dataSet'), DataSet, scope=MeasurementOutput, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 88, 6)))

def _BuildAutomaton_35 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_35
    del _BuildAutomaton_35
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 88, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MeasurementOutput._UseForTag(pyxb.namespace.ExpandedName(None, 'dataSet')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 88, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
MeasurementOutput._Automaton = _BuildAutomaton_35()




DataSet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), pyxb.binding.datatypes.string, scope=DataSet, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 94, 6)))

DataSet._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'dataObject'), DataObject, scope=DataSet, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 95, 6)))

def _BuildAutomaton_36 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_36
    del _BuildAutomaton_36
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 95, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DataSet._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 94, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DataSet._UseForTag(pyxb.namespace.ExpandedName(None, 'dataObject')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 95, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DataSet._Automaton = _BuildAutomaton_36()




InstrumentRef._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'instrumentName'), pyxb.binding.datatypes.string, scope=InstrumentRef, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 111, 6)))

InstrumentRef._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detector'), pyxb.binding.datatypes.string, scope=InstrumentRef, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 113, 8)))

InstrumentRef._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sensor'), pyxb.binding.datatypes.string, scope=InstrumentRef, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 114, 8)))

def _BuildAutomaton_37 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_37
    del _BuildAutomaton_37
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 111, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 112, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(InstrumentRef._UseForTag(pyxb.namespace.ExpandedName(None, 'instrumentName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 111, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(InstrumentRef._UseForTag(pyxb.namespace.ExpandedName(None, 'detector')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 113, 8))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(InstrumentRef._UseForTag(pyxb.namespace.ExpandedName(None, 'sensor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 114, 8))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
InstrumentRef._Automaton = _BuildAutomaton_37()




CompositionResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'testReport'), DigitalArtifact, scope=CompositionResult, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 241, 6)))

CompositionResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'composition'), Composition, scope=CompositionResult, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 242, 6)))

def _BuildAutomaton_38 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_38
    del _BuildAutomaton_38
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 241, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 242, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CompositionResult._UseForTag(pyxb.namespace.ExpandedName(None, 'testReport')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 241, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CompositionResult._UseForTag(pyxb.namespace.ExpandedName(None, 'composition')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 242, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CompositionResult._Automaton = _BuildAutomaton_38()




PowderSizeDistributionResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'testReport'), DigitalArtifact, scope=PowderSizeDistributionResult, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 263, 6)))

PowderSizeDistributionResult._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'powderSizeDistribution'), PowderSizeDistribution, scope=PowderSizeDistributionResult, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 264, 6)))

def _BuildAutomaton_39 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_39
    del _BuildAutomaton_39
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 263, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 264, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeDistributionResult._UseForTag(pyxb.namespace.ExpandedName(None, 'testReport')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 263, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeDistributionResult._UseForTag(pyxb.namespace.ExpandedName(None, 'powderSizeDistribution')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 264, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
PowderSizeDistributionResult._Automaton = _BuildAutomaton_39()




AMResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=AMResource, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6)))

AMResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=AMResource, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6)))

AMResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'documentation'), pyxb.binding.datatypes.anyURI, scope=AMResource, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6)))

AMResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'primaryContact'), Person, scope=AMResource, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6)))

AMResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'contributor'), Contributor, scope=AMResource, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6)))

AMResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'note'), Note, scope=AMResource, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6)))

AMResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'altName'), pyxb.binding.datatypes.string, scope=AMResource, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6)))

AMResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'UUID'), pyxb.binding.datatypes.string, scope=AMResource, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6)))

AMResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'identifier'), identifier, scope=AMResource, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6)))

AMResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'journalPublication'), DigitalArtifact, scope=AMResource, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6)))

AMResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'referencePublication'), DigitalArtifact, scope=AMResource, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6)))

AMResource._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'relatedStandard'), DigitalArtifact, scope=AMResource, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6)))

def _BuildAutomaton_40 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_40
    del _BuildAutomaton_40
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMResource._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AMResource._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AMResource._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AMResource._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AMResource._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AMResource._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AMResource._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AMResource._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AMResource._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(AMResource._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(AMResource._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(AMResource._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_11._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AMResource._Automaton = _BuildAutomaton_40()




identifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'id'), pyxb.binding.datatypes.string, scope=identifier, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 80, 6)))

identifier._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), pyxb.binding.datatypes.string, scope=identifier, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 90, 6)))

def _BuildAutomaton_41 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_41
    del _BuildAutomaton_41
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 90, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(identifier._UseForTag(pyxb.namespace.ExpandedName(None, 'id')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 80, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(identifier._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 90, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
identifier._Automaton = _BuildAutomaton_41()




PIDReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'documentType'), ArtifactType, scope=PIDReference, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 103, 6)))

PIDReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pid'), pyxb.binding.datatypes.anyURI, scope=PIDReference, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 104, 6)))

def _BuildAutomaton_42 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_42
    del _BuildAutomaton_42
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PIDReference._UseForTag(pyxb.namespace.ExpandedName(None, 'documentType')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 103, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PIDReference._UseForTag(pyxb.namespace.ExpandedName(None, 'pid')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 104, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PIDReference._Automaton = _BuildAutomaton_42()




Field._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=Field, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 110, 6)))

Field._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'value'), pyxb.binding.datatypes.string, scope=Field, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 112, 8)))

Field._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quantity'), physical_quantity_type, scope=Field, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 113, 8)))

Field._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'object'), ObjectType, scope=Field, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 114, 8)))

Field._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'digitalArtifact'), DigitalArtifact, scope=Field, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 115, 8)))

Field._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=Field, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 117, 6)))

Field._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'documentationLink'), pyxb.binding.datatypes.anyURI, scope=Field, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 118, 6)))

def _BuildAutomaton_43 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_43
    del _BuildAutomaton_43
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 111, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 117, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 118, 6))
    counters.add(cc_2)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Field._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 110, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Field._UseForTag(pyxb.namespace.ExpandedName(None, 'value')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 112, 8))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Field._UseForTag(pyxb.namespace.ExpandedName(None, 'quantity')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 113, 8))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Field._UseForTag(pyxb.namespace.ExpandedName(None, 'object')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 114, 8))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Field._UseForTag(pyxb.namespace.ExpandedName(None, 'digitalArtifact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 115, 8))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Field._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 117, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Field._UseForTag(pyxb.namespace.ExpandedName(None, 'documentationLink')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 118, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Field._Automaton = _BuildAutomaton_43()




ObjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=ObjectType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 124, 6)))

ObjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=ObjectType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 125, 6)))

ObjectType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'field'), Field, scope=ObjectType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 126, 6)))

def _BuildAutomaton_44 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_44
    del _BuildAutomaton_44
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 124, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 125, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 126, 6))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ObjectType._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 124, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ObjectType._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 125, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ObjectType._UseForTag(pyxb.namespace.ExpandedName(None, 'field')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 126, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ObjectType._Automaton = _BuildAutomaton_44()




CrystalStructure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'CrystalLattice'), CrystalLatticeType, scope=CrystalStructure, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1062, 6)))

CrystalStructure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SpaceGroup'), SpaceGroupType, scope=CrystalStructure, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1063, 6)))

CrystalStructure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'wyckoffSequence'), pyxb.binding.datatypes.string, scope=CrystalStructure, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1064, 6)))

CrystalStructure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'prototype'), prototypeType, scope=CrystalStructure, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1065, 6)))

CrystalStructure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'pearsonSymbol'), pearsonSymbolType, scope=CrystalStructure, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1066, 6)))

CrystalStructure._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'strukturbericht'), strukturberichtType, scope=CrystalStructure, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1067, 6)))

def _BuildAutomaton_45 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_45
    del _BuildAutomaton_45
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1062, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1063, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1064, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1065, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1066, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1067, 6))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CrystalStructure._UseForTag(pyxb.namespace.ExpandedName(None, 'CrystalLattice')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1062, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CrystalStructure._UseForTag(pyxb.namespace.ExpandedName(None, 'SpaceGroup')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1063, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CrystalStructure._UseForTag(pyxb.namespace.ExpandedName(None, 'wyckoffSequence')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1064, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CrystalStructure._UseForTag(pyxb.namespace.ExpandedName(None, 'prototype')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1065, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CrystalStructure._UseForTag(pyxb.namespace.ExpandedName(None, 'pearsonSymbol')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1066, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CrystalStructure._UseForTag(pyxb.namespace.ExpandedName(None, 'strukturbericht')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1067, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
CrystalStructure._Automaton = _BuildAutomaton_45()




OxygenContentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'MaxO2Content'), pyxb.binding.datatypes.float, scope=OxygenContentType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1073, 6)))

OxygenContentType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'O2ContentUnits'), STD_ANON_4, scope=OxygenContentType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1074, 6)))

def _BuildAutomaton_46 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_46
    del _BuildAutomaton_46
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(OxygenContentType._UseForTag(pyxb.namespace.ExpandedName(None, 'MaxO2Content')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1073, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(OxygenContentType._UseForTag(pyxb.namespace.ExpandedName(None, 'O2ContentUnits')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1074, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
OxygenContentType._Automaton = _BuildAutomaton_46()




GasFlowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FlowType'), STD_ANON_5, scope=GasFlowType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1087, 6)))

GasFlowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FlowSpeed'), pyxb.binding.datatypes.float, scope=GasFlowType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1096, 6)))

GasFlowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FlowSpeedUnits'), FlowSpeedUnits, scope=GasFlowType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1097, 6)))

GasFlowType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'FlowDirection'), pyxb.binding.datatypes.string, scope=GasFlowType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1098, 6)))

def _BuildAutomaton_47 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_47
    del _BuildAutomaton_47
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1087, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1096, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1097, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1098, 6))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(GasFlowType._UseForTag(pyxb.namespace.ExpandedName(None, 'FlowType')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1087, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(GasFlowType._UseForTag(pyxb.namespace.ExpandedName(None, 'FlowSpeed')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1096, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(GasFlowType._UseForTag(pyxb.namespace.ExpandedName(None, 'FlowSpeedUnits')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1097, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(GasFlowType._UseForTag(pyxb.namespace.ExpandedName(None, 'FlowDirection')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1098, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
GasFlowType._Automaton = _BuildAutomaton_47()




PowderSizeDistribution._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'powderSize'), PowderSize, scope=PowderSizeDistribution, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1110, 6)))

def _BuildAutomaton_48 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_48
    del _BuildAutomaton_48
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PowderSizeDistribution._UseForTag(pyxb.namespace.ExpandedName(None, 'powderSize')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1110, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PowderSizeDistribution._Automaton = _BuildAutomaton_48()




PowderSize._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'diameterQuantile'), pyxb.binding.datatypes.string, scope=PowderSize, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1116, 6)))

PowderSize._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'diameter'), pyxb.binding.datatypes.decimal, scope=PowderSize, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1117, 6)))

PowderSize._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'diameterUnit'), pyxb.binding.datatypes.string, scope=PowderSize, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1118, 6)))

def _BuildAutomaton_49 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_49
    del _BuildAutomaton_49
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PowderSize._UseForTag(pyxb.namespace.ExpandedName(None, 'diameterQuantile')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1116, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(PowderSize._UseForTag(pyxb.namespace.ExpandedName(None, 'diameter')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1117, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PowderSize._UseForTag(pyxb.namespace.ExpandedName(None, 'diameterUnit')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1118, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PowderSize._Automaton = _BuildAutomaton_49()




LengthType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'lenghtQuanity'), pyxb.binding.datatypes.float, scope=LengthType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1171, 6)))

LengthType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'lengthUnit'), LengthUnit, scope=LengthType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1172, 6)))

LengthType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uncertainty'), Uncertainty, scope=LengthType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1173, 6)))

def _BuildAutomaton_51 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_51
    del _BuildAutomaton_51
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LengthType._UseForTag(pyxb.namespace.ExpandedName(None, 'lenghtQuanity')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1171, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_52 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_52
    del _BuildAutomaton_52
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LengthType._UseForTag(pyxb.namespace.ExpandedName(None, 'lengthUnit')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1172, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=st_0)

def _BuildAutomaton_53 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_53
    del _BuildAutomaton_53
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1173, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LengthType._UseForTag(pyxb.namespace.ExpandedName(None, 'uncertainty')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1173, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=st_0)

def _BuildAutomaton_50 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_50
    del _BuildAutomaton_50
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1173, 6))
    counters.add(cc_0)
    states = []
    sub_automata = []
    sub_automata.append(_BuildAutomaton_51())
    sub_automata.append(_BuildAutomaton_52())
    sub_automata.append(_BuildAutomaton_53())
    final_update = set()
    symbol = pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1170, 4)
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=True)
    st_0._set_subAutomata(*sub_automata)
    states.append(st_0)
    transitions = []
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LengthType._Automaton = _BuildAutomaton_50()




TemperatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'temperature'), pyxb.binding.datatypes.float, scope=TemperatureType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1178, 6)))

TemperatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'unit'), TemperatureUnit, scope=TemperatureType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1179, 6)))

TemperatureType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uncertainty'), Uncertainty, scope=TemperatureType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1180, 6)))

def _BuildAutomaton_54 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_54
    del _BuildAutomaton_54
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1180, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TemperatureType._UseForTag(pyxb.namespace.ExpandedName(None, 'temperature')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1178, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TemperatureType._UseForTag(pyxb.namespace.ExpandedName(None, 'unit')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1179, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TemperatureType._UseForTag(pyxb.namespace.ExpandedName(None, 'uncertainty')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1180, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TemperatureType._Automaton = _BuildAutomaton_54()




TimeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'duration'), pyxb.binding.datatypes.double, scope=TimeType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1185, 6)))

TimeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'unit'), TimeUnit, scope=TimeType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1186, 6)))

TimeType._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uncertainty'), Uncertainty, scope=TimeType, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1187, 6)))

def _BuildAutomaton_55 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_55
    del _BuildAutomaton_55
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1187, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(TimeType._UseForTag(pyxb.namespace.ExpandedName(None, 'duration')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1185, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(TimeType._UseForTag(pyxb.namespace.ExpandedName(None, 'unit')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1186, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(TimeType._UseForTag(pyxb.namespace.ExpandedName(None, 'uncertainty')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1187, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
TimeType._Automaton = _BuildAutomaton_55()




Volume._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'length'), physical_quantity_type, scope=Volume, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1193, 6)))

Volume._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'width'), physical_quantity_type, scope=Volume, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1194, 6)))

Volume._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'height'), physical_quantity_type, scope=Volume, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1195, 6)))

def _BuildAutomaton_56 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_56
    del _BuildAutomaton_56
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Volume._UseForTag(pyxb.namespace.ExpandedName(None, 'length')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1193, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Volume._UseForTag(pyxb.namespace.ExpandedName(None, 'width')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1194, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Volume._UseForTag(pyxb.namespace.ExpandedName(None, 'height')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1195, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Volume._Automaton = _BuildAutomaton_56()




physical_quantity_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'value'), pyxb.binding.datatypes.float, scope=physical_quantity_type, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1211, 6)))

physical_quantity_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'unit'), pyxb.binding.datatypes.string, scope=physical_quantity_type, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1212, 6)))

physical_quantity_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'uncertainty'), Uncertainty, scope=physical_quantity_type, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1213, 6)))

def _BuildAutomaton_57 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_57
    del _BuildAutomaton_57
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1211, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1212, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1213, 6))
    counters.add(cc_2)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(physical_quantity_type._UseForTag(pyxb.namespace.ExpandedName(None, 'value')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1211, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(physical_quantity_type._UseForTag(pyxb.namespace.ExpandedName(None, 'unit')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1212, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(physical_quantity_type._UseForTag(pyxb.namespace.ExpandedName(None, 'uncertainty')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1213, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
physical_quantity_type._Automaton = _BuildAutomaton_57()




Range._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'min'), pyxb.binding.datatypes.float, scope=Range, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1219, 6)))

Range._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'max'), pyxb.binding.datatypes.float, scope=Range, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1220, 6)))

Range._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'unit'), pyxb.binding.datatypes.string, scope=Range, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1221, 6)))

def _BuildAutomaton_58 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_58
    del _BuildAutomaton_58
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1221, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Range._UseForTag(pyxb.namespace.ExpandedName(None, 'min')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1219, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Range._UseForTag(pyxb.namespace.ExpandedName(None, 'max')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1220, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Range._UseForTag(pyxb.namespace.ExpandedName(None, 'unit')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1221, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Range._Automaton = _BuildAutomaton_58()




Uncertainty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), STD_ANON_6, scope=Uncertainty, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1227, 6)))

Uncertainty._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'value'), pyxb.binding.datatypes.double, scope=Uncertainty, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1235, 6)))

def _BuildAutomaton_59 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_59
    del _BuildAutomaton_59
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Uncertainty._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1227, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Uncertainty._UseForTag(pyxb.namespace.ExpandedName(None, 'value')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1235, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Uncertainty._Automaton = _BuildAutomaton_59()




Note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'title'), pyxb.binding.datatypes.string, scope=Note, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1250, 6)))

Note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'date'), pyxb.binding.datatypes.dateTime, scope=Note, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1251, 6)))

Note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'text'), pyxb.binding.datatypes.string, scope=Note, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1252, 6)))

Note._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'digitalArtifact'), DigitalArtifact, scope=Note, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1253, 6)))

def _BuildAutomaton_60 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_60
    del _BuildAutomaton_60
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1250, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1251, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1252, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1253, 6))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Note._UseForTag(pyxb.namespace.ExpandedName(None, 'title')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1250, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Note._UseForTag(pyxb.namespace.ExpandedName(None, 'date')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1251, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Note._UseForTag(pyxb.namespace.ExpandedName(None, 'text')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1252, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Note._UseForTag(pyxb.namespace.ExpandedName(None, 'digitalArtifact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1253, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Note._Automaton = _BuildAutomaton_60()




DigitalArtifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'identifier'), pyxb.binding.datatypes.string, scope=DigitalArtifact, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1259, 6)))

DigitalArtifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'title'), pyxb.binding.datatypes.string, scope=DigitalArtifact, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1260, 6)))

DigitalArtifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=DigitalArtifact, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1261, 6)))

DigitalArtifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), DigitalArtifactType, scope=DigitalArtifact, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1262, 6)))

DigitalArtifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'format'), pyxb.binding.datatypes.string, scope=DigitalArtifact, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1263, 6)))

DigitalArtifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'comment'), pyxb.binding.datatypes.string, scope=DigitalArtifact, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1264, 6)))

DigitalArtifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'accessURL'), pyxb.binding.datatypes.anyURI, scope=DigitalArtifact, documentation='URL providing direct access to a downloadable file of a dataset.\n          ', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1265, 6)))

def _BuildAutomaton_61 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_61
    del _BuildAutomaton_61
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1259, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1260, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1261, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1262, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1263, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1264, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1265, 6))
    counters.add(cc_6)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DigitalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1259, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DigitalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'title')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1260, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DigitalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1261, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DigitalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1262, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DigitalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'format')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1263, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DigitalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'comment')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1264, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DigitalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'accessURL')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1265, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    st_6._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DigitalArtifact._Automaton = _BuildAutomaton_61()




AMBlobReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'handle'), pyxb.binding.datatypes.anyURI, scope=AMBlobReference, documentation='\n            handle of the blob, also part of the AMDoc/AMBlob document.\n          ', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1300, 6)))

AMBlobReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'checksum'), pyxb.binding.datatypes.string, scope=AMBlobReference, documentation='\n            MD5 checksum of the referenced image.\n          ', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1307, 6)))

AMBlobReference._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=AMBlobReference, documentation='\n            MD5 checksum of the referenced image.\n          ', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1314, 6)))

def _BuildAutomaton_62 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_62
    del _BuildAutomaton_62
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1314, 6))
    counters.add(cc_0)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AMBlobReference._UseForTag(pyxb.namespace.ExpandedName(None, 'handle')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1300, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMBlobReference._UseForTag(pyxb.namespace.ExpandedName(None, 'checksum')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1307, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AMBlobReference._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1314, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_2._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AMBlobReference._Automaton = _BuildAutomaton_62()




Blob._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'handle'), pyxb.binding.datatypes.anyURI, scope=Blob, documentation='Handle assigned by CDCS to retrieve the blob.', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1326, 6)))

Blob._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'checksum'), pyxb.binding.datatypes.string, scope=Blob, documentation='MD5 checksum of the blob bytes. Must be provided to be able to check whether this image was\n            already loaded.', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1331, 6)))

Blob._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'cdcsPID'), pyxb.binding.datatypes.string, scope=Blob, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1337, 6)))

Blob._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'format'), pyxb.binding.datatypes.string, scope=Blob, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1338, 6)))

def _BuildAutomaton_63 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_63
    del _BuildAutomaton_63
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1337, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1338, 6))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Blob._UseForTag(pyxb.namespace.ExpandedName(None, 'handle')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1326, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Blob._UseForTag(pyxb.namespace.ExpandedName(None, 'checksum')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1331, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Blob._UseForTag(pyxb.namespace.ExpandedName(None, 'cdcsPID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1337, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Blob._UseForTag(pyxb.namespace.ExpandedName(None, 'format')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1338, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Blob._Automaton = _BuildAutomaton_63()




Table._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'headers'), Headers, scope=Table, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1344, 6)))

Table._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'rows'), Rows, scope=Table, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1345, 6)))

def _BuildAutomaton_64 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_64
    del _BuildAutomaton_64
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Table._UseForTag(pyxb.namespace.ExpandedName(None, 'headers')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1344, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Table._UseForTag(pyxb.namespace.ExpandedName(None, 'rows')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1345, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Table._Automaton = _BuildAutomaton_64()




Headers._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'column'), Column, scope=Headers, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1351, 6)))

def _BuildAutomaton_65 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_65
    del _BuildAutomaton_65
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Headers._UseForTag(pyxb.namespace.ExpandedName(None, 'column')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1351, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Headers._Automaton = _BuildAutomaton_65()




Rows._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'row'), Row, scope=Rows, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1356, 6)))

def _BuildAutomaton_66 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_66
    del _BuildAutomaton_66
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Rows._UseForTag(pyxb.namespace.ExpandedName(None, 'row')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1356, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Rows._Automaton = _BuildAutomaton_66()




Row._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'column'), Column, scope=Row, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1363, 6)))

def _BuildAutomaton_67 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_67
    del _BuildAutomaton_67
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Row._UseForTag(pyxb.namespace.ExpandedName(None, 'column')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1363, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Row._Automaton = _BuildAutomaton_67()




Person._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=Person, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1378, 6)))

Person._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'email'), pyxb.binding.datatypes.string, scope=Person, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1379, 6)))

Person._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'orcid'), pyxb.binding.datatypes.string, scope=Person, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1380, 6)))

Person._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'location'), pyxb.binding.datatypes.string, scope=Person, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1381, 6)))

Person._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'phone'), pyxb.binding.datatypes.string, scope=Person, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1382, 6)))

Person._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'affiliation'), pyxb.binding.datatypes.string, scope=Person, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1383, 6)))

def _BuildAutomaton_68 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_68
    del _BuildAutomaton_68
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1378, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1379, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1380, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1381, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1382, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1383, 6))
    counters.add(cc_5)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Person._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1378, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Person._UseForTag(pyxb.namespace.ExpandedName(None, 'email')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1379, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Person._UseForTag(pyxb.namespace.ExpandedName(None, 'orcid')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1380, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Person._UseForTag(pyxb.namespace.ExpandedName(None, 'location')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1381, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Person._UseForTag(pyxb.namespace.ExpandedName(None, 'phone')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1382, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Person._UseForTag(pyxb.namespace.ExpandedName(None, 'affiliation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1383, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_5._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Person._Automaton = _BuildAutomaton_68()




Contributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'person'), Person, scope=Contributor, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1389, 6)))

Contributor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'role'), pyxb.binding.datatypes.string, scope=Contributor, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1390, 6)))

def _BuildAutomaton_69 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_69
    del _BuildAutomaton_69
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1390, 6))
    counters.add(cc_0)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Contributor._UseForTag(pyxb.namespace.ExpandedName(None, 'person')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1389, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Contributor._UseForTag(pyxb.namespace.ExpandedName(None, 'role')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1390, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Contributor._Automaton = _BuildAutomaton_69()




Sensor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=Sensor, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1420, 6)))

Sensor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'description'), pyxb.binding.datatypes.string, scope=Sensor, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1421, 6)))

Sensor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), pyxb.binding.datatypes.string, scope=Sensor, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1422, 6)))

Sensor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'manufacturer'), pyxb.binding.datatypes.string, scope=Sensor, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1423, 6)))

Sensor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'model'), pyxb.binding.datatypes.string, scope=Sensor, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1424, 6)))

Sensor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'identifier'), identifier, scope=Sensor, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1425, 6)))

Sensor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'calibrationDate'), pyxb.binding.datatypes.dateTime, scope=Sensor, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1426, 6)))

Sensor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'range'), Range, scope=Sensor, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1427, 6)))

Sensor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'accuracy'), physical_quantity_type, scope=Sensor, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1428, 6)))

Sensor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'accuracyClass'), pyxb.binding.datatypes.string, scope=Sensor, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1429, 6)))

Sensor._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'specializedMetadata'), ObjectType, scope=Sensor, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1430, 6)))

def _BuildAutomaton_70 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_70
    del _BuildAutomaton_70
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1420, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1421, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1422, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1423, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1424, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1425, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1426, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1427, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1428, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1429, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1430, 6))
    counters.add(cc_10)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Sensor._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1420, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Sensor._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1421, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Sensor._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1422, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Sensor._UseForTag(pyxb.namespace.ExpandedName(None, 'manufacturer')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1423, 6))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Sensor._UseForTag(pyxb.namespace.ExpandedName(None, 'model')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1424, 6))
    st_4 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Sensor._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1425, 6))
    st_5 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Sensor._UseForTag(pyxb.namespace.ExpandedName(None, 'calibrationDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1426, 6))
    st_6 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Sensor._UseForTag(pyxb.namespace.ExpandedName(None, 'range')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1427, 6))
    st_7 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Sensor._UseForTag(pyxb.namespace.ExpandedName(None, 'accuracy')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1428, 6))
    st_8 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Sensor._UseForTag(pyxb.namespace.ExpandedName(None, 'accuracyClass')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1429, 6))
    st_9 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Sensor._UseForTag(pyxb.namespace.ExpandedName(None, 'specializedMetadata')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1430, 6))
    st_10 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_10, True) ]))
    st_10._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Sensor._Automaton = _BuildAutomaton_70()




Composition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'Constituents'), Constituents, scope=Composition, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1438, 6)))

Composition._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quantityUnit'), ConstituentQuantityUnit, scope=Composition, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1439, 6)))

def _BuildAutomaton_71 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_71
    del _BuildAutomaton_71
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1438, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1439, 6))
    counters.add(cc_1)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Composition._UseForTag(pyxb.namespace.ExpandedName(None, 'Constituents')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1438, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Composition._UseForTag(pyxb.namespace.ExpandedName(None, 'quantityUnit')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1439, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_1._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
Composition._Automaton = _BuildAutomaton_71()




Constituents._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'constituent'), ConstituentMaterial, scope=Constituents, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1450, 6)))

def _BuildAutomaton_72 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_72
    del _BuildAutomaton_72
    import pyxb.utils.fac as fac

    counters = set()
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Constituents._UseForTag(pyxb.namespace.ExpandedName(None, 'constituent')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1450, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    transitions = []
    transitions.append(fac.Transition(st_0, [
         ]))
    st_0._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Constituents._Automaton = _BuildAutomaton_72()




ConstituentMaterial._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'element'), ChemicalElement, scope=ConstituentMaterial, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1456, 6)))

ConstituentMaterial._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'quantity'), pyxb.binding.datatypes.double, scope=ConstituentMaterial, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1457, 6)))

ConstituentMaterial._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'purity'), pyxb.binding.datatypes.double, scope=ConstituentMaterial, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1458, 6)))

ConstituentMaterial._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'error'), pyxb.binding.datatypes.double, scope=ConstituentMaterial, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1459, 6)))

def _BuildAutomaton_73 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_73
    del _BuildAutomaton_73
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1458, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1459, 6))
    counters.add(cc_1)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(ConstituentMaterial._UseForTag(pyxb.namespace.ExpandedName(None, 'element')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1456, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ConstituentMaterial._UseForTag(pyxb.namespace.ExpandedName(None, 'quantity')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1457, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ConstituentMaterial._UseForTag(pyxb.namespace.ExpandedName(None, 'purity')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1458, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ConstituentMaterial._UseForTag(pyxb.namespace.ExpandedName(None, 'error')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1459, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ConstituentMaterial._Automaton = _BuildAutomaton_73()




PhysicalArtifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'creationDate'), pyxb.binding.datatypes.dateTime, scope=PhysicalArtifact, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 10, 10)))

PhysicalArtifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'location'), pyxb.binding.datatypes.string, scope=PhysicalArtifact, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 17, 10)))

PhysicalArtifact._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'processingSteps'), ProcessingSteps, scope=PhysicalArtifact, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 24, 10)))

def _BuildAutomaton_74 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_74
    del _BuildAutomaton_74
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 10, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 17, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 24, 10))
    counters.add(cc_13)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PhysicalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'creationDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 10, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'location')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 17, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(PhysicalArtifact._UseForTag(pyxb.namespace.ExpandedName(None, 'processingSteps')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 24, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    st_14._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PhysicalArtifact._Automaton = _BuildAutomaton_74()




AMSample._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SampleID'), SampleIDType, scope=AMSample, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 350, 6)))

AMSample._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'AM2022BuildPlate'), CTD_ANON_, scope=AMSample, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 351, 6)))

AMSample._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'RelatedSamples'), CTD_ANON_2, scope=AMSample, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 359, 6)))

AMSample._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SampleImage'), DigitalArtifact, scope=AMSample, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 367, 6)))

AMSample._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SampleLocation'), pyxb.binding.datatypes.string, scope=AMSample, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 369, 6)))

AMSample._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SamplePreparation'), SamplePreparationMethods, scope=AMSample, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 371, 6)))

AMSample._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SamplePurpose'), STD_ANON, scope=AMSample, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 372, 6)))

AMSample._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'SampleNote'), Note, scope=AMSample, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 393, 6)))

AMSample._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'PrintingNotes'), Note, scope=AMSample, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 394, 6)))

def _BuildAutomaton_75 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_75
    del _BuildAutomaton_75
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 359, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 367, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 369, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 371, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 393, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 394, 6))
    counters.add(cc_5)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AMSample._UseForTag(pyxb.namespace.ExpandedName(None, 'SampleID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 350, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AMSample._UseForTag(pyxb.namespace.ExpandedName(None, 'AM2022BuildPlate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 351, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AMSample._UseForTag(pyxb.namespace.ExpandedName(None, 'RelatedSamples')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 359, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AMSample._UseForTag(pyxb.namespace.ExpandedName(None, 'SampleImage')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 367, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AMSample._UseForTag(pyxb.namespace.ExpandedName(None, 'SampleLocation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 369, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(AMSample._UseForTag(pyxb.namespace.ExpandedName(None, 'SamplePreparation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 371, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMSample._UseForTag(pyxb.namespace.ExpandedName(None, 'SamplePurpose')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 372, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AMSample._UseForTag(pyxb.namespace.ExpandedName(None, 'SampleNote')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 393, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AMSample._UseForTag(pyxb.namespace.ExpandedName(None, 'PrintingNotes')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 394, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, True) ]))
    st_8._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AMSample._Automaton = _BuildAutomaton_75()




ConfigurationObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'associatedInstrument'), InstrumentRef, scope=ConfigurationObject, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 81, 10)))

def _BuildAutomaton_76 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_76
    del _BuildAutomaton_76
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 124, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 125, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 126, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 81, 10))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ConfigurationObject._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 124, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ConfigurationObject._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 125, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ConfigurationObject._UseForTag(pyxb.namespace.ExpandedName(None, 'field')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 126, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ConfigurationObject._UseForTag(pyxb.namespace.ExpandedName(None, 'associatedInstrument')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 81, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
ConfigurationObject._Automaton = _BuildAutomaton_76()




DataObject._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'measuredBy'), InstrumentRef, scope=DataObject, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 103, 10)))

def _BuildAutomaton_77 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_77
    del _BuildAutomaton_77
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 124, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 125, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 126, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 103, 10))
    counters.add(cc_3)
    states = []
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DataObject._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 124, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DataObject._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 125, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DataObject._UseForTag(pyxb.namespace.ExpandedName(None, 'field')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 126, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DataObject._UseForTag(pyxb.namespace.ExpandedName(None, 'measuredBy')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 103, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_3, True) ]))
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, True, containing_state=None)
DataObject._Automaton = _BuildAutomaton_77()




AMActivity._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'startDate'), pyxb.binding.datatypes.dateTime, scope=AMActivity, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10)))

AMActivity._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'completeDate'), pyxb.binding.datatypes.dateTime, scope=AMActivity, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10)))

def _BuildAutomaton_78 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_78
    del _BuildAutomaton_78
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    counters.add(cc_12)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMActivity._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AMActivity._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AMActivity._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AMActivity._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AMActivity._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AMActivity._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AMActivity._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AMActivity._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AMActivity._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(AMActivity._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(AMActivity._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(AMActivity._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(AMActivity._UseForTag(pyxb.namespace.ExpandedName(None, 'startDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(AMActivity._UseForTag(pyxb.namespace.ExpandedName(None, 'completeDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    st_13._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AMActivity._Automaton = _BuildAutomaton_78()




parameter_type._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'name'), pyxb.binding.datatypes.string, scope=parameter_type, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1204, 10)))

def _BuildAutomaton_79 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_79
    del _BuildAutomaton_79
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1211, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1212, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1213, 6))
    counters.add(cc_2)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(parameter_type._UseForTag(pyxb.namespace.ExpandedName(None, 'value')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1211, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(parameter_type._UseForTag(pyxb.namespace.ExpandedName(None, 'unit')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1212, 6))
    st_1 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(parameter_type._UseForTag(pyxb.namespace.ExpandedName(None, 'uncertainty')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1213, 6))
    st_2 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(parameter_type._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1204, 10))
    st_3 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    transitions = []
    transitions.append(fac.Transition(st_0, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    st_3._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
parameter_type._Automaton = _BuildAutomaton_79()




Instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'model'), pyxb.binding.datatypes.string, scope=Instrument, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1407, 10)))

Instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'physicalLocation'), pyxb.binding.datatypes.string, scope=Instrument, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1408, 10)))

Instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'instrumentMetadata'), ObjectType, scope=Instrument, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1409, 10)))

Instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'detector'), Sensor, scope=Instrument, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1410, 10)))

Instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'sensor'), Sensor, scope=Instrument, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1411, 10)))

Instrument._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supportingFile'), DigitalArtifact, scope=Instrument, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1412, 10)))

def _BuildAutomaton_80 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_80
    del _BuildAutomaton_80
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1407, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1408, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1409, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1410, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1411, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1412, 10))
    counters.add(cc_16)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'model')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1407, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'physicalLocation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1408, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'instrumentMetadata')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1409, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'detector')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1410, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'sensor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1411, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(Instrument._UseForTag(pyxb.namespace.ExpandedName(None, 'supportingFile')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 1412, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Instrument._Automaton = _BuildAutomaton_80()




AMBuildProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'benchmarkId'), pyxb.binding.datatypes.string, scope=AMBuildProduct, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 39, 10)))

AMBuildProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'status'), pyxb.binding.datatypes.string, scope=AMBuildProduct, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 46, 10)))

AMBuildProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'purpose'), pyxb.binding.datatypes.string, scope=AMBuildProduct, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 53, 10)))

AMBuildProduct._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'designDiagram'), DesignDiagramRef, scope=AMBuildProduct, documentation='', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 60, 10)))

def _BuildAutomaton_81 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_81
    del _BuildAutomaton_81
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 10, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 17, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 24, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 39, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 46, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 53, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 60, 10))
    counters.add(cc_17)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'creationDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 10, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'location')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 17, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'processingSteps')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 24, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'benchmarkId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 39, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 46, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'purpose')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 53, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildProduct._UseForTag(pyxb.namespace.ExpandedName(None, 'designDiagram')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 60, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AMBuildProduct._Automaton = _BuildAutomaton_81()




Powder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'supplier'), pyxb.binding.datatypes.string, scope=Powder, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 201, 10)))

Powder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'lotNumber'), pyxb.binding.datatypes.string, scope=Powder, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 202, 10)))

Powder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'alloyPowderType'), AlloyDesignation, scope=Powder, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 203, 10)))

Powder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'usageType'), PowderUsageType, scope=Powder, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 204, 10)))

Powder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'atomizationType'), PowderAtomizationType, scope=Powder, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 205, 10)))

Powder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nominalComposition'), Composition, scope=Powder, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 206, 10)))

Powder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'nominalPowderSizeDistribution'), PowderSizeDistribution, scope=Powder, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 207, 10)))

Powder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'powderSpecsFile'), DigitalArtifact, scope=Powder, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 208, 10)))

Powder._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'additionalSupplierInfo'), Note, scope=Powder, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 209, 10)))

def _BuildAutomaton_82 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_82
    del _BuildAutomaton_82
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 10, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 17, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 24, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 201, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 202, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 203, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 204, 10))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 205, 10))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 206, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 207, 10))
    counters.add(cc_20)
    cc_21 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 208, 10))
    counters.add(cc_21)
    cc_22 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 209, 10))
    counters.add(cc_22)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'creationDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 10, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'location')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 17, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'processingSteps')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 24, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'supplier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 201, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'lotNumber')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 202, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'alloyPowderType')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 203, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'usageType')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 204, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'atomizationType')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 205, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'nominalComposition')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 206, 10))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'nominalPowderSizeDistribution')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 207, 10))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_21, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'powderSpecsFile')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 208, 10))
    st_22 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_22)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_22, False))
    symbol = pyxb.binding.content.ElementUse(Powder._UseForTag(pyxb.namespace.ExpandedName(None, 'additionalSupplierInfo')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 209, 10))
    st_23 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_23)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    transitions.append(fac.Transition(st_22, [
         ]))
    transitions.append(fac.Transition(st_23, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_19, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_20, False) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_20, False) ]))
    st_21._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_22, [
        fac.UpdateInstruction(cc_21, True) ]))
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_21, False) ]))
    st_22._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_23, [
        fac.UpdateInstruction(cc_22, True) ]))
    st_23._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Powder._Automaton = _BuildAutomaton_82()




Material._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'source'), pyxb.binding.datatypes.string, scope=Material, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 219, 10)))

Material._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'type'), pyxb.binding.datatypes.string, scope=Material, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 220, 10)))

Material._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'specifications'), pyxb.binding.datatypes.string, scope=Material, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 221, 10)))

Material._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'providedCharacterization'), DigitalArtifact, scope=Material, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 222, 10)))

def _BuildAutomaton_83 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_83
    del _BuildAutomaton_83
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 10, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 17, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 24, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 219, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 220, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 221, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 222, 10))
    counters.add(cc_17)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'creationDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 10, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'location')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 17, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'processingSteps')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 24, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'source')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 219, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'type')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 220, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'specifications')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 221, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(Material._UseForTag(pyxb.namespace.ExpandedName(None, 'providedCharacterization')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 222, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Material._Automaton = _BuildAutomaton_83()




Measurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'benchmarkId'), pyxb.binding.datatypes.string, scope=Measurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 15, 10)))

Measurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'challengeId'), pyxb.binding.datatypes.string, scope=Measurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 16, 10)))

Measurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'facility'), pyxb.binding.datatypes.string, scope=Measurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 17, 10)))

Measurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'relatedMeasurement'), RelatedMeasurement, scope=Measurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 18, 10)))

Measurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'isCalibrationMeasurement'), pyxb.binding.datatypes.string, scope=Measurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 19, 10)))

def _BuildAutomaton_84 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_84
    del _BuildAutomaton_84
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 15, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 16, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 17, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 18, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 19, 10))
    counters.add(cc_17)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'startDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'completeDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'benchmarkId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 15, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'challengeId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 16, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'facility')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 17, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedMeasurement')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 18, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(Measurement._UseForTag(pyxb.namespace.ExpandedName(None, 'isCalibrationMeasurement')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 19, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    st_18._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Measurement._Automaton = _BuildAutomaton_84()




CompositionMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'materialDesignation'), pyxb.binding.datatypes.string, scope=CompositionMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 230, 10)))

CompositionMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'testingLab'), pyxb.binding.datatypes.string, scope=CompositionMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 231, 10)))

CompositionMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'specimen'), MeasurementInput, scope=CompositionMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 232, 10)))

CompositionMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'results'), CompositionResult, scope=CompositionMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 233, 10)))

def _BuildAutomaton_85 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_85
    del _BuildAutomaton_85
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 230, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 231, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 232, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 233, 10))
    counters.add(cc_16)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'startDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'completeDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'materialDesignation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 230, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'testingLab')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 231, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'specimen')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 232, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(CompositionMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'results')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 233, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    st_17._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
CompositionMeasurement._Automaton = _BuildAutomaton_85()




PowderSizeMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'specimen'), MeasurementInput, scope=PowderSizeMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 255, 10)))

PowderSizeMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'results'), PowderSizeDistributionResult, scope=PowderSizeMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 256, 10)))

def _BuildAutomaton_86 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_86
    del _BuildAutomaton_86
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 255, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 256, 10))
    counters.add(cc_14)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(PowderSizeMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'startDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'completeDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'specimen')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 255, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(PowderSizeMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'results')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 256, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    st_15._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
PowderSizeMeasurement._Automaton = _BuildAutomaton_86()




AMBuildPlate._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'partDefinition'), PartDefinition, scope=AMBuildPlate, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 115, 10)))

def _BuildAutomaton_87 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_87
    del _BuildAutomaton_87
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 10, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 17, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 24, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 39, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 46, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 53, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 60, 10))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 115, 10))
    counters.add(cc_18)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'creationDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 10, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'location')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 17, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'processingSteps')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 24, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'benchmarkId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 39, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 46, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'purpose')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 53, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'designDiagram')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 60, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(AMBuildPlate._UseForTag(pyxb.namespace.ExpandedName(None, 'partDefinition')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 115, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    st_19._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
AMBuildPlate._Automaton = _BuildAutomaton_87()




BuildPart._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'buildPlateId'), pyxb.binding.datatypes.anyURI, scope=BuildPart, documentation=' PID of the Build Plate this Part was extracted from.\n              ', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 143, 10)))

BuildPart._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'partLabel'), pyxb.binding.datatypes.string, scope=BuildPart, documentation=' Label identifying the part in the build plate it was extracted from.\n              ', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 149, 10)))

def _BuildAutomaton_88 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_88
    del _BuildAutomaton_88
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 10, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 17, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 24, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 39, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 46, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 53, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 60, 10))
    counters.add(cc_17)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'creationDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 10, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'location')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 17, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'processingSteps')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 24, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'benchmarkId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 39, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 46, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'purpose')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 53, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'designDiagram')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 60, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'buildPlateId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 143, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(BuildPart._UseForTag(pyxb.namespace.ExpandedName(None, 'partLabel')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 149, 10))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    st_20._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
BuildPart._Automaton = _BuildAutomaton_88()




Specimen._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'buildPlateId'), pyxb.binding.datatypes.anyURI, scope=Specimen, documentation=' PID of the Build Plate this Specimen was ultimately extracted from.\n                  ', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 168, 14)))

Specimen._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'buildPartId'), pyxb.binding.datatypes.anyURI, scope=Specimen, documentation=' PID of the Build Part this Specimen was extracted from.\n                  ', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 174, 14)))

Specimen._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'materialId'), pyxb.binding.datatypes.anyURI, scope=Specimen, documentation=' PID of the Material this Specimen was extracted from.\n                  ', location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 182, 14)))

def _BuildAutomaton_89 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_89
    del _BuildAutomaton_89
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 10, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 17, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 24, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 39, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 46, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 53, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 60, 10))
    counters.add(cc_17)
    states = []
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'creationDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 10, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'location')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 17, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'processingSteps')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 24, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'benchmarkId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 39, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'status')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 46, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'purpose')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 53, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'designDiagram')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 60, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = None
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'buildPlateId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 168, 14))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'buildPartId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 174, 14))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(Specimen._UseForTag(pyxb.namespace.ExpandedName(None, 'materialId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMBuild.xsd', 182, 14))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
         ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    st_20._set_transitionSet(transitions)
    transitions = []
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
Specimen._Automaton = _BuildAutomaton_89()




DigitalImageCorrelationMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'measurementMethod'), MeasurementMethod, scope=DigitalImageCorrelationMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 129, 10)))

DigitalImageCorrelationMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'specimen'), MeasurementInput, scope=DigitalImageCorrelationMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 130, 10)))

DigitalImageCorrelationMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'results'), MeasurementOutput, scope=DigitalImageCorrelationMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 131, 10)))

def _BuildAutomaton_90 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_90
    del _BuildAutomaton_90
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 15, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 16, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 17, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 18, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 19, 10))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 129, 10))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 130, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 131, 10))
    counters.add(cc_20)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'startDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'completeDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'benchmarkId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 15, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'challengeId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 16, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'facility')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 17, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedMeasurement')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 18, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'isCalibrationMeasurement')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 19, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'measurementMethod')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 129, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'specimen')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 130, 10))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(DigitalImageCorrelationMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'results')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 131, 10))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
DigitalImageCorrelationMeasurement._Automaton = _BuildAutomaton_90()




LaserAbsorptivityMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'measurementMethod'), MeasurementMethod, scope=LaserAbsorptivityMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 147, 10)))

LaserAbsorptivityMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'specimen'), MeasurementInput, scope=LaserAbsorptivityMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 148, 10)))

LaserAbsorptivityMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'results'), MeasurementOutput, scope=LaserAbsorptivityMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 149, 10)))

def _BuildAutomaton_91 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_91
    del _BuildAutomaton_91
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 15, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 16, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 17, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 18, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 19, 10))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 147, 10))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 148, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 149, 10))
    counters.add(cc_20)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'startDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'completeDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'benchmarkId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 15, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'challengeId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 16, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'facility')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 17, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedMeasurement')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 18, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'isCalibrationMeasurement')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 19, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'measurementMethod')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 147, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'specimen')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 148, 10))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(LaserAbsorptivityMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'results')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 149, 10))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
LaserAbsorptivityMeasurement._Automaton = _BuildAutomaton_91()




MechanicalTestingMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'measurementMethod'), MeasurementMethod, scope=MechanicalTestingMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 165, 10)))

MechanicalTestingMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'specimen'), MeasurementInput, scope=MechanicalTestingMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 166, 10)))

MechanicalTestingMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'results'), MeasurementOutput, scope=MechanicalTestingMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 167, 10)))

def _BuildAutomaton_92 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_92
    del _BuildAutomaton_92
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 15, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 16, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 17, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 18, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 19, 10))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 165, 10))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 166, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 167, 10))
    counters.add(cc_20)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'startDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'completeDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'benchmarkId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 15, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'challengeId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 16, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'facility')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 17, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedMeasurement')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 18, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'isCalibrationMeasurement')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 19, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'measurementMethod')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 165, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'specimen')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 166, 10))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(MechanicalTestingMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'results')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 167, 10))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
MechanicalTestingMeasurement._Automaton = _BuildAutomaton_92()




RadiographyMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'measurementMethod'), MeasurementMethod, scope=RadiographyMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 183, 10)))

RadiographyMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'specimen'), MeasurementInput, scope=RadiographyMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 184, 10)))

RadiographyMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'results'), MeasurementOutput, scope=RadiographyMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 185, 10)))

def _BuildAutomaton_93 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_93
    del _BuildAutomaton_93
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 15, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 16, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 17, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 18, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 19, 10))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 183, 10))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 184, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 185, 10))
    counters.add(cc_20)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'startDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'completeDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'benchmarkId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 15, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'challengeId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 16, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'facility')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 17, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedMeasurement')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 18, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'isCalibrationMeasurement')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 19, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'measurementMethod')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 183, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'specimen')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 184, 10))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(RadiographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'results')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 185, 10))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RadiographyMeasurement._Automaton = _BuildAutomaton_93()




RSSynchrotronEDMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'measurementMethod'), MeasurementMethod, scope=RSSynchrotronEDMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 201, 10)))

RSSynchrotronEDMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'specimen'), MeasurementInput, scope=RSSynchrotronEDMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 202, 10)))

RSSynchrotronEDMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'results'), MeasurementOutput, scope=RSSynchrotronEDMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 203, 10)))

def _BuildAutomaton_94 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_94
    del _BuildAutomaton_94
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 15, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 16, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 17, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 18, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 19, 10))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 201, 10))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 202, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 203, 10))
    counters.add(cc_20)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'startDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'completeDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'benchmarkId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 15, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'challengeId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 16, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'facility')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 17, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedMeasurement')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 18, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'isCalibrationMeasurement')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 19, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'measurementMethod')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 201, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'specimen')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 202, 10))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(RSSynchrotronEDMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'results')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 203, 10))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
RSSynchrotronEDMeasurement._Automaton = _BuildAutomaton_94()




ThermographyMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'measurementMethod'), MeasurementMethod, scope=ThermographyMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 218, 10)))

ThermographyMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'specimen'), MeasurementInput, scope=ThermographyMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 219, 10)))

ThermographyMeasurement._AddElement(pyxb.binding.basis.element(pyxb.namespace.ExpandedName(None, 'results'), MeasurementOutput, scope=ThermographyMeasurement, location=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 220, 10)))

def _BuildAutomaton_95 ():
    # Remove this helper function from the namespace after it is invoked
    global _BuildAutomaton_95
    del _BuildAutomaton_95
    import pyxb.utils.fac as fac

    counters = set()
    cc_0 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    counters.add(cc_0)
    cc_1 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    counters.add(cc_1)
    cc_2 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    counters.add(cc_2)
    cc_3 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    counters.add(cc_3)
    cc_4 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    counters.add(cc_4)
    cc_5 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    counters.add(cc_5)
    cc_6 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    counters.add(cc_6)
    cc_7 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    counters.add(cc_7)
    cc_8 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    counters.add(cc_8)
    cc_9 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    counters.add(cc_9)
    cc_10 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    counters.add(cc_10)
    cc_11 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    counters.add(cc_11)
    cc_12 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    counters.add(cc_12)
    cc_13 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 15, 10))
    counters.add(cc_13)
    cc_14 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 16, 10))
    counters.add(cc_14)
    cc_15 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 17, 10))
    counters.add(cc_15)
    cc_16 = fac.CounterCondition(min=0, max=None, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 18, 10))
    counters.add(cc_16)
    cc_17 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 19, 10))
    counters.add(cc_17)
    cc_18 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 218, 10))
    counters.add(cc_18)
    cc_19 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 219, 10))
    counters.add(cc_19)
    cc_20 = fac.CounterCondition(min=0, max=1, metadata=pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 220, 10))
    counters.add(cc_20)
    states = []
    final_update = set()
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'name')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 7, 6))
    st_0 = fac.State(symbol, is_initial=True, final_update=final_update, is_unordered_catenation=False)
    states.append(st_0)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_0, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'description')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 18, 6))
    st_1 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_1)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_1, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'documentation')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 26, 6))
    st_2 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_2)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_2, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'primaryContact')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 27, 6))
    st_3 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_3)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_3, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'contributor')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 28, 6))
    st_4 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_4)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_4, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'note')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 29, 6))
    st_5 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_5)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_5, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'altName')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 30, 6))
    st_6 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_6)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_6, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'UUID')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 37, 6))
    st_7 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_7)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_7, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'identifier')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 53, 6))
    st_8 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_8)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_8, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'journalPublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 60, 6))
    st_9 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_9)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_9, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'referencePublication')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 61, 6))
    st_10 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_10)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_10, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedStandard')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 63, 6))
    st_11 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_11)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_11, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'startDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 71, 10))
    st_12 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_12)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_12, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'completeDate')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMReference.xsd', 72, 10))
    st_13 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_13)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_13, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'benchmarkId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 15, 10))
    st_14 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_14)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_14, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'challengeId')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 16, 10))
    st_15 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_15)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_15, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'facility')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 17, 10))
    st_16 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_16)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_16, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'relatedMeasurement')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 18, 10))
    st_17 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_17)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_17, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'isCalibrationMeasurement')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 19, 10))
    st_18 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_18)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_18, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'measurementMethod')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 218, 10))
    st_19 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_19)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_19, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'specimen')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 219, 10))
    st_20 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_20)
    final_update = set()
    final_update.add(fac.UpdateInstruction(cc_20, False))
    symbol = pyxb.binding.content.ElementUse(ThermographyMeasurement._UseForTag(pyxb.namespace.ExpandedName(None, 'results')), pyxb.utils.utility.Location('/home/idies/workspace/Storage/jkim485/persistent/GIT/informatics/XML/XSD/AMBench2022/AMMeasurement.xsd', 220, 10))
    st_21 = fac.State(symbol, is_initial=False, final_update=final_update, is_unordered_catenation=False)
    states.append(st_21)
    transitions = []
    transitions.append(fac.Transition(st_1, [
         ]))
    transitions.append(fac.Transition(st_2, [
         ]))
    transitions.append(fac.Transition(st_3, [
         ]))
    transitions.append(fac.Transition(st_4, [
         ]))
    transitions.append(fac.Transition(st_5, [
         ]))
    transitions.append(fac.Transition(st_6, [
         ]))
    transitions.append(fac.Transition(st_7, [
         ]))
    transitions.append(fac.Transition(st_8, [
         ]))
    transitions.append(fac.Transition(st_9, [
         ]))
    transitions.append(fac.Transition(st_10, [
         ]))
    transitions.append(fac.Transition(st_11, [
         ]))
    transitions.append(fac.Transition(st_12, [
         ]))
    transitions.append(fac.Transition(st_13, [
         ]))
    transitions.append(fac.Transition(st_14, [
         ]))
    transitions.append(fac.Transition(st_15, [
         ]))
    transitions.append(fac.Transition(st_16, [
         ]))
    transitions.append(fac.Transition(st_17, [
         ]))
    transitions.append(fac.Transition(st_18, [
         ]))
    transitions.append(fac.Transition(st_19, [
         ]))
    transitions.append(fac.Transition(st_20, [
         ]))
    transitions.append(fac.Transition(st_21, [
         ]))
    st_0._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_1, [
        fac.UpdateInstruction(cc_0, True) ]))
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_0, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_0, False) ]))
    st_1._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_2, [
        fac.UpdateInstruction(cc_1, True) ]))
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_1, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_1, False) ]))
    st_2._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_3, [
        fac.UpdateInstruction(cc_2, True) ]))
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_2, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_2, False) ]))
    st_3._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_4, [
        fac.UpdateInstruction(cc_3, True) ]))
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_3, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_3, False) ]))
    st_4._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_5, [
        fac.UpdateInstruction(cc_4, True) ]))
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_4, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_4, False) ]))
    st_5._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_6, [
        fac.UpdateInstruction(cc_5, True) ]))
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_5, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_5, False) ]))
    st_6._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_7, [
        fac.UpdateInstruction(cc_6, True) ]))
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_6, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_6, False) ]))
    st_7._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_8, [
        fac.UpdateInstruction(cc_7, True) ]))
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_7, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_7, False) ]))
    st_8._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_9, [
        fac.UpdateInstruction(cc_8, True) ]))
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_8, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_8, False) ]))
    st_9._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_10, [
        fac.UpdateInstruction(cc_9, True) ]))
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_9, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_9, False) ]))
    st_10._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_11, [
        fac.UpdateInstruction(cc_10, True) ]))
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_10, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_10, False) ]))
    st_11._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_12, [
        fac.UpdateInstruction(cc_11, True) ]))
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_11, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_11, False) ]))
    st_12._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_13, [
        fac.UpdateInstruction(cc_12, True) ]))
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_12, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_12, False) ]))
    st_13._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_14, [
        fac.UpdateInstruction(cc_13, True) ]))
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_13, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_13, False) ]))
    st_14._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_15, [
        fac.UpdateInstruction(cc_14, True) ]))
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_14, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_14, False) ]))
    st_15._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_16, [
        fac.UpdateInstruction(cc_15, True) ]))
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_15, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_15, False) ]))
    st_16._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_17, [
        fac.UpdateInstruction(cc_16, True) ]))
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_16, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_16, False) ]))
    st_17._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_18, [
        fac.UpdateInstruction(cc_17, True) ]))
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_17, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_17, False) ]))
    st_18._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_19, [
        fac.UpdateInstruction(cc_18, True) ]))
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_18, False) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_18, False) ]))
    st_19._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_20, [
        fac.UpdateInstruction(cc_19, True) ]))
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_19, False) ]))
    st_20._set_transitionSet(transitions)
    transitions = []
    transitions.append(fac.Transition(st_21, [
        fac.UpdateInstruction(cc_20, True) ]))
    st_21._set_transitionSet(transitions)
    return fac.Automaton(states, counters, False, containing_state=None)
ThermographyMeasurement._Automaton = _BuildAutomaton_95()

